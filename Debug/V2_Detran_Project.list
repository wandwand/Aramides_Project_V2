
V2_Detran_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006640  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  080066f8  080066f8  000076f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a50  08006a50  00008084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006a50  08006a50  00008084  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006a50  08006a50  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a50  08006a50  00007a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a54  08006a54  00007a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08006a58  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000084  08006adc  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08006adc  00008358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001464c  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be9  00000000  00000000  0001c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001f2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cfb  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173f2  00000000  00000000  0002107b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015377  00000000  00000000  0003846d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093cf6  00000000  00000000  0004d7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e14da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a8  00000000  00000000  000e1520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e55c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000084 	.word	0x20000084
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080066e0 	.word	0x080066e0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000088 	.word	0x20000088
 80000fc:	080066e0 	.word	0x080066e0

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000414:	f000 fbc0 	bl	8000b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000418:	f000 f82c 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041c:	f000 f98a 	bl	8000734 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000420:	f000 f870 	bl	8000504 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000424:	f000 f8d6 	bl	80005d4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000428:	f000 f936 	bl	8000698 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Inicia conversão contínua do ADC1.
    * Essa chamada habilita o ADC para que HAL_ADC_PollForConversion()
    * passe a retornar o valor mais recente sem reiniciar o módulo. */
   HAL_ADC_Start(&hadc1);
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <main+0x50>)
 800042e:	0018      	movs	r0, r3
 8000430:	f000 ff3a 	bl	80012a8 <HAL_ADC_Start>

   /* Envia mensagem inicial pela UART1 */
   HAL_UART_Transmit(&huart1,
 8000434:	2301      	movs	r3, #1
 8000436:	425b      	negs	r3, r3
 8000438:	490a      	ldr	r1, [pc, #40]	@ (8000464 <main+0x54>)
 800043a:	480b      	ldr	r0, [pc, #44]	@ (8000468 <main+0x58>)
 800043c:	2212      	movs	r2, #18
 800043e:	f003 fb41 	bl	8003ac4 <HAL_UART_Transmit>
                     strlen("Sistema Iniciado\r\n"),
                     HAL_MAX_DELAY);

   /* Habilita interrupção de recepção de 1 byte na UART1.
    * A cada byte recebido, entra em HAL_UART_RxCpltCallback(...). */
   HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1);
 8000442:	490a      	ldr	r1, [pc, #40]	@ (800046c <main+0x5c>)
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <main+0x58>)
 8000446:	2201      	movs	r2, #1
 8000448:	0018      	movs	r0, r3
 800044a:	f003 fbdf 	bl	8003c0c <HAL_UART_Receive_IT>

   /* Inicia o canal 1 de PWM do TIM3.
    * A partir daqui, __HAL_TIM_SET_COMPARE() passa a ter efeito. */
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <main+0x60>)
 8000450:	2100      	movs	r1, #0
 8000452:	0018      	movs	r0, r3
 8000454:	f002 fc24 	bl	8002ca0 <HAL_TIM_PWM_Start>

   while (1)
   {
       /* Executa a rampa de PWM caso tenha sido requisitada */
       pwm_ramp_task();
 8000458:	f005 fbfa 	bl	8005c50 <pwm_ramp_task>
 800045c:	e7fc      	b.n	8000458 <main+0x48>
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	200000a0 	.word	0x200000a0
 8000464:	080066f8 	.word	0x080066f8
 8000468:	20000150 	.word	0x20000150
 800046c:	2000020d 	.word	0x2000020d
 8000470:	20000104 	.word	0x20000104

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b093      	sub	sp, #76	@ 0x4c
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	2414      	movs	r4, #20
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2334      	movs	r3, #52	@ 0x34
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f005 fc95 	bl	8005db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	0018      	movs	r0, r3
 800048e:	2310      	movs	r3, #16
 8000490:	001a      	movs	r2, r3
 8000492:	2100      	movs	r1, #0
 8000494:	f005 fc8e 	bl	8005db4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000498:	2380      	movs	r3, #128	@ 0x80
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fd7b 	bl	8001f98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2202      	movs	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2280      	movs	r2, #128	@ 0x80
 80004ac:	0052      	lsls	r2, r2, #1
 80004ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004b0:	193b      	adds	r3, r7, r4
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2240      	movs	r2, #64	@ 0x40
 80004ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fdb3 	bl	8002030 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ce:	f000 f991 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2100      	movs	r1, #0
 80004ee:	0018      	movs	r0, r3
 80004f0:	f002 f8ae 	bl	8002650 <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004f8:	f000 f97c 	bl	80007f4 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	@ 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f005 fc4e 	bl	8005db4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000518:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 800051a:	4a2c      	ldr	r2, [pc, #176]	@ (80005cc <MX_ADC1_Init+0xc8>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000532:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 800053a:	2204      	movs	r2, #4
 800053c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800053e:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000540:	2200      	movs	r2, #0
 8000542:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000546:	2200      	movs	r2, #0
 8000548:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 800054c:	2201      	movs	r2, #1
 800054e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000550:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000552:	2201      	movs	r2, #1
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000556:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000558:	2200      	movs	r2, #0
 800055a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800055c:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 800055e:	2200      	movs	r2, #0
 8000560:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000562:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000564:	222c      	movs	r2, #44	@ 0x2c
 8000566:	2100      	movs	r1, #0
 8000568:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800056a:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 800056c:	2200      	movs	r2, #0
 800056e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000570:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000572:	2200      	movs	r2, #0
 8000574:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000576:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000578:	2200      	movs	r2, #0
 800057a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 800057e:	223c      	movs	r2, #60	@ 0x3c
 8000580:	2100      	movs	r1, #0
 8000582:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000584:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 8000586:	2200      	movs	r2, #0
 8000588:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 800058c:	0018      	movs	r0, r3
 800058e:	f000 fce3 	bl	8000f58 <HAL_ADC_Init>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000596:	f000 f92d 	bl	80007f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4a0c      	ldr	r2, [pc, #48]	@ (80005d0 <MX_ADC1_Init+0xcc>)
 800059e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	1d3a      	adds	r2, r7, #4
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <MX_ADC1_Init+0xc4>)
 80005b0:	0011      	movs	r1, r2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 ff66 	bl	8001484 <HAL_ADC_ConfigChannel>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80005bc:	f000 f91a 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	46c0      	nop			@ (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b004      	add	sp, #16
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200000a0 	.word	0x200000a0
 80005cc:	40012400 	.word	0x40012400
 80005d0:	1c000080 	.word	0x1c000080

080005d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005da:	231c      	movs	r3, #28
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	0018      	movs	r0, r3
 80005e0:	230c      	movs	r3, #12
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f005 fbe5 	bl	8005db4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ea:	003b      	movs	r3, r7
 80005ec:	0018      	movs	r0, r3
 80005ee:	231c      	movs	r3, #28
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f005 fbde 	bl	8005db4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005f8:	4b24      	ldr	r3, [pc, #144]	@ (800068c <MX_TIM3_Init+0xb8>)
 80005fa:	4a25      	ldr	r2, [pc, #148]	@ (8000690 <MX_TIM3_Init+0xbc>)
 80005fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80005fe:	4b23      	ldr	r3, [pc, #140]	@ (800068c <MX_TIM3_Init+0xb8>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <MX_TIM3_Init+0xb8>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625;
 800060a:	4b20      	ldr	r3, [pc, #128]	@ (800068c <MX_TIM3_Init+0xb8>)
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <MX_TIM3_Init+0xc0>)
 800060e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000610:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <MX_TIM3_Init+0xb8>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000616:	4b1d      	ldr	r3, [pc, #116]	@ (800068c <MX_TIM3_Init+0xb8>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800061c:	4b1b      	ldr	r3, [pc, #108]	@ (800068c <MX_TIM3_Init+0xb8>)
 800061e:	0018      	movs	r0, r3
 8000620:	f002 fae6 	bl	8002bf0 <HAL_TIM_PWM_Init>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000628:	f000 f8e4 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062c:	211c      	movs	r1, #28
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800063a:	187a      	adds	r2, r7, r1
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_TIM3_Init+0xb8>)
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f003 f96f 	bl	8003924 <HAL_TIMEx_MasterConfigSynchronization>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800064a:	f000 f8d3 	bl	80007f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800064e:	003b      	movs	r3, r7
 8000650:	2260      	movs	r2, #96	@ 0x60
 8000652:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000654:	003b      	movs	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800065a:	003b      	movs	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000660:	003b      	movs	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000666:	0039      	movs	r1, r7
 8000668:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_TIM3_Init+0xb8>)
 800066a:	2200      	movs	r2, #0
 800066c:	0018      	movs	r0, r3
 800066e:	f002 fcf7 	bl	8003060 <HAL_TIM_PWM_ConfigChannel>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000676:	f000 f8bd 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800067a:	4b04      	ldr	r3, [pc, #16]	@ (800068c <MX_TIM3_Init+0xb8>)
 800067c:	0018      	movs	r0, r3
 800067e:	f000 f94d 	bl	800091c <HAL_TIM_MspPostInit>

}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b00a      	add	sp, #40	@ 0x28
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	20000104 	.word	0x20000104
 8000690:	40000400 	.word	0x40000400
 8000694:	00000271 	.word	0x00000271

08000698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800069c:	4b23      	ldr	r3, [pc, #140]	@ (800072c <MX_USART1_UART_Init+0x94>)
 800069e:	4a24      	ldr	r2, [pc, #144]	@ (8000730 <MX_USART1_UART_Init+0x98>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006a4:	22e1      	movs	r2, #225	@ 0xe1
 80006a6:	0252      	lsls	r2, r2, #9
 80006a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b20      	ldr	r3, [pc, #128]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b18      	ldr	r3, [pc, #96]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006dc:	2200      	movs	r2, #0
 80006de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f003 f998 	bl	8003a18 <HAL_UART_Init>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006ec:	f000 f882 	bl	80007f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART1_UART_Init+0x94>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	0018      	movs	r0, r3
 80006f6:	f005 f86f 	bl	80057d8 <HAL_UARTEx_SetTxFifoThreshold>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006fe:	f000 f879 	bl	80007f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_USART1_UART_Init+0x94>)
 8000704:	2100      	movs	r1, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f005 f8a6 	bl	8005858 <HAL_UARTEx_SetRxFifoThreshold>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000710:	f000 f870 	bl	80007f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <MX_USART1_UART_Init+0x94>)
 8000716:	0018      	movs	r0, r3
 8000718:	f005 f824 	bl	8005764 <HAL_UARTEx_DisableFifoMode>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000720:	f000 f868 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	20000150 	.word	0x20000150
 8000730:	40013800 	.word	0x40013800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b089      	sub	sp, #36	@ 0x24
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	240c      	movs	r4, #12
 800073c:	193b      	adds	r3, r7, r4
 800073e:	0018      	movs	r0, r3
 8000740:	2314      	movs	r3, #20
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f005 fb35 	bl	8005db4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <MX_GPIO_Init+0xb8>)
 800074c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800074e:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <MX_GPIO_Init+0xb8>)
 8000750:	2102      	movs	r1, #2
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	@ 0x34
 8000756:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <MX_GPIO_Init+0xb8>)
 8000758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800075a:	2202      	movs	r2, #2
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <MX_GPIO_Init+0xb8>)
 8000764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_GPIO_Init+0xb8>)
 8000768:	2101      	movs	r1, #1
 800076a:	430a      	orrs	r2, r1
 800076c:	635a      	str	r2, [r3, #52]	@ 0x34
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_GPIO_Init+0xb8>)
 8000770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000772:	2201      	movs	r2, #1
 8000774:	4013      	ands	r3, r2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_GPIO_Init+0xbc>)
 800077c:	2200      	movs	r2, #0
 800077e:	2101      	movs	r1, #1
 8000780:	0018      	movs	r0, r3
 8000782:	f001 fbeb 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000786:	2380      	movs	r3, #128	@ 0x80
 8000788:	0119      	lsls	r1, r3, #4
 800078a:	23a0      	movs	r3, #160	@ 0xa0
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	2200      	movs	r2, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fbe3 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2201      	movs	r2, #1
 80007a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	4a0f      	ldr	r2, [pc, #60]	@ (80007f0 <MX_GPIO_Init+0xbc>)
 80007b2:	0019      	movs	r1, r3
 80007b4:	0010      	movs	r0, r2
 80007b6:	f001 fa6d 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007ba:	0021      	movs	r1, r4
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2280      	movs	r2, #128	@ 0x80
 80007c0:	0112      	lsls	r2, r2, #4
 80007c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2201      	movs	r2, #1
 80007c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	187a      	adds	r2, r7, r1
 80007d8:	23a0      	movs	r3, #160	@ 0xa0
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	0011      	movs	r1, r2
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 fa58 	bl	8001c94 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b009      	add	sp, #36	@ 0x24
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	40021000 	.word	0x40021000
 80007f0:	50000400 	.word	0x50000400

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	e7fd      	b.n	80007fc <Error_Handler+0x8>

08000800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <HAL_MspInit+0x44>)
 8000808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <HAL_MspInit+0x44>)
 800080c:	2101      	movs	r1, #1
 800080e:	430a      	orrs	r2, r1
 8000810:	641a      	str	r2, [r3, #64]	@ 0x40
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <HAL_MspInit+0x44>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	2201      	movs	r2, #1
 8000818:	4013      	ands	r3, r2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_MspInit+0x44>)
 8000820:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <HAL_MspInit+0x44>)
 8000824:	2180      	movs	r1, #128	@ 0x80
 8000826:	0549      	lsls	r1, r1, #21
 8000828:	430a      	orrs	r2, r1
 800082a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800082c:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_MspInit+0x44>)
 800082e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	055b      	lsls	r3, r3, #21
 8000834:	4013      	ands	r3, r2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	40021000 	.word	0x40021000

08000848 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b08b      	sub	sp, #44	@ 0x2c
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	2414      	movs	r4, #20
 8000852:	193b      	adds	r3, r7, r4
 8000854:	0018      	movs	r0, r3
 8000856:	2314      	movs	r3, #20
 8000858:	001a      	movs	r2, r3
 800085a:	2100      	movs	r1, #0
 800085c:	f005 faaa 	bl	8005db4 <memset>
  if(hadc->Instance==ADC1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a18      	ldr	r2, [pc, #96]	@ (80008c8 <HAL_ADC_MspInit+0x80>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d129      	bne.n	80008be <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <HAL_ADC_MspInit+0x84>)
 800086c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800086e:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <HAL_ADC_MspInit+0x84>)
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	0349      	lsls	r1, r1, #13
 8000874:	430a      	orrs	r2, r1
 8000876:	641a      	str	r2, [r3, #64]	@ 0x40
 8000878:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <HAL_ADC_MspInit+0x84>)
 800087a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800087c:	2380      	movs	r3, #128	@ 0x80
 800087e:	035b      	lsls	r3, r3, #13
 8000880:	4013      	ands	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <HAL_ADC_MspInit+0x84>)
 8000888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <HAL_ADC_MspInit+0x84>)
 800088c:	2101      	movs	r1, #1
 800088e:	430a      	orrs	r2, r1
 8000890:	635a      	str	r2, [r3, #52]	@ 0x34
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <HAL_ADC_MspInit+0x84>)
 8000894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000896:	2201      	movs	r2, #1
 8000898:	4013      	ands	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2280      	movs	r2, #128	@ 0x80
 80008a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2203      	movs	r2, #3
 80008a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	193a      	adds	r2, r7, r4
 80008b2:	23a0      	movs	r3, #160	@ 0xa0
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f001 f9eb 	bl	8001c94 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b00b      	add	sp, #44	@ 0x2c
 80008c4:	bd90      	pop	{r4, r7, pc}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	40012400 	.word	0x40012400
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <HAL_TIM_PWM_MspInit+0x44>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d113      	bne.n	800090a <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <HAL_TIM_PWM_MspInit+0x48>)
 80008e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_TIM_PWM_MspInit+0x48>)
 80008e8:	2102      	movs	r1, #2
 80008ea:	430a      	orrs	r2, r1
 80008ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <HAL_TIM_PWM_MspInit+0x48>)
 80008f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008f2:	2202      	movs	r2, #2
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2010      	movs	r0, #16
 8000900:	f001 f8ca 	bl	8001a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000904:	2010      	movs	r0, #16
 8000906:	f001 f8dc 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b004      	add	sp, #16
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	40000400 	.word	0x40000400
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b089      	sub	sp, #36	@ 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	240c      	movs	r4, #12
 8000926:	193b      	adds	r3, r7, r4
 8000928:	0018      	movs	r0, r3
 800092a:	2314      	movs	r3, #20
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f005 fa40 	bl	8005db4 <memset>
  if(htim->Instance==TIM3)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a14      	ldr	r2, [pc, #80]	@ (800098c <HAL_TIM_MspPostInit+0x70>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d122      	bne.n	8000984 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <HAL_TIM_MspPostInit+0x74>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <HAL_TIM_MspPostInit+0x74>)
 8000944:	2101      	movs	r1, #1
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	@ 0x34
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <HAL_TIM_MspPostInit+0x74>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800094e:	2201      	movs	r2, #1
 8000950:	4013      	ands	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000956:	0021      	movs	r1, r4
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2240      	movs	r2, #64	@ 0x40
 800095c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2202      	movs	r2, #2
 8000962:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2201      	movs	r2, #1
 8000974:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	187a      	adds	r2, r7, r1
 8000978:	23a0      	movs	r3, #160	@ 0xa0
 800097a:	05db      	lsls	r3, r3, #23
 800097c:	0011      	movs	r1, r2
 800097e:	0018      	movs	r0, r3
 8000980:	f001 f988 	bl	8001c94 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b009      	add	sp, #36	@ 0x24
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	40000400 	.word	0x40000400
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b091      	sub	sp, #68	@ 0x44
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	232c      	movs	r3, #44	@ 0x2c
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	0018      	movs	r0, r3
 80009a2:	2314      	movs	r3, #20
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f005 fa04 	bl	8005db4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	2414      	movs	r4, #20
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	0018      	movs	r0, r3
 80009b2:	2318      	movs	r3, #24
 80009b4:	001a      	movs	r2, r3
 80009b6:	2100      	movs	r1, #0
 80009b8:	f005 f9fc 	bl	8005db4 <memset>
  if(huart->Instance==USART1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a26      	ldr	r2, [pc, #152]	@ (8000a5c <HAL_UART_MspInit+0xc8>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d145      	bne.n	8000a52 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2201      	movs	r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 ffe5 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009de:	f7ff ff09 	bl	80007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <HAL_UART_MspInit+0xcc>)
 80009e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <HAL_UART_MspInit+0xcc>)
 80009e8:	2180      	movs	r1, #128	@ 0x80
 80009ea:	01c9      	lsls	r1, r1, #7
 80009ec:	430a      	orrs	r2, r1
 80009ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80009f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <HAL_UART_MspInit+0xcc>)
 80009f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	01db      	lsls	r3, r3, #7
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <HAL_UART_MspInit+0xcc>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <HAL_UART_MspInit+0xcc>)
 8000a04:	2102      	movs	r1, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_UART_MspInit+0xcc>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a0e:	2202      	movs	r2, #2
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000a16:	212c      	movs	r1, #44	@ 0x2c
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	22c0      	movs	r2, #192	@ 0xc0
 8000a1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2202      	movs	r2, #2
 8000a22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	4a0a      	ldr	r2, [pc, #40]	@ (8000a64 <HAL_UART_MspInit+0xd0>)
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	0010      	movs	r0, r2
 8000a3e:	f001 f929 	bl	8001c94 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	201b      	movs	r0, #27
 8000a48:	f001 f826 	bl	8001a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a4c:	201b      	movs	r0, #27
 8000a4e:	f001 f838 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b011      	add	sp, #68	@ 0x44
 8000a58:	bd90      	pop	{r4, r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	40013800 	.word	0x40013800
 8000a60:	40021000 	.word	0x40021000
 8000a64:	50000400 	.word	0x50000400

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	e7fd      	b.n	8000a6c <NMI_Handler+0x4>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0x4>

08000a78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f8ec 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	46c0      	nop			@ (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <TIM3_IRQHandler+0x14>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 f9d4 	bl	8002e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	20000104 	.word	0x20000104

08000ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <USART1_IRQHandler+0x14>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f003 f8fe 	bl	8003cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	20000150 	.word	0x20000150

08000acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad4:	4a14      	ldr	r2, [pc, #80]	@ (8000b28 <_sbrk+0x5c>)
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <_sbrk+0x60>)
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <_sbrk+0x64>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <_sbrk+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	18d3      	adds	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d207      	bcs.n	8000b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000afc:	f005 f97e 	bl	8005dfc <__errno>
 8000b00:	0003      	movs	r3, r0
 8000b02:	220c      	movs	r2, #12
 8000b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	425b      	negs	r3, r3
 8000b0a:	e009      	b.n	8000b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b0c:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <_sbrk+0x64>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b12:	4b07      	ldr	r3, [pc, #28]	@ (8000b30 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	18d2      	adds	r2, r2, r3
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <_sbrk+0x64>)
 8000b1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	0018      	movs	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b006      	add	sp, #24
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20002000 	.word	0x20002000
 8000b2c:	00000400 	.word	0x00000400
 8000b30:	200001e4 	.word	0x200001e4
 8000b34:	20000358 	.word	0x20000358

08000b38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b44:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b48:	f7ff fff6 	bl	8000b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4e:	490d      	ldr	r1, [pc, #52]	@ (8000b84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b50:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <LoopForever+0xe>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b64:	4c0a      	ldr	r4, [pc, #40]	@ (8000b90 <LoopForever+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b72:	f005 f949 	bl	8005e08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b76:	f7ff fc4b 	bl	8000410 <main>

08000b7a <LoopForever>:

LoopForever:
  b LoopForever
 8000b7a:	e7fe      	b.n	8000b7a <LoopForever>
  ldr   r0, =_estack
 8000b7c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b84:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000b88:	08006a58 	.word	0x08006a58
  ldr r2, =_sbss
 8000b8c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000b90:	20000358 	.word	0x20000358

08000b94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b94:	e7fe      	b.n	8000b94 <ADC1_IRQHandler>
	...

08000b98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <HAL_Init+0x3c>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <HAL_Init+0x3c>)
 8000baa:	2180      	movs	r1, #128	@ 0x80
 8000bac:	0049      	lsls	r1, r1, #1
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	f000 f810 	bl	8000bd8 <HAL_InitTick>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e001      	b.n	8000bc8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fe1c 	bl	8000800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	781b      	ldrb	r3, [r3, #0]
}
 8000bcc:	0018      	movs	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40022000 	.word	0x40022000

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be0:	230f      	movs	r3, #15
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000be8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <HAL_InitTick+0x88>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d02b      	beq.n	8000c48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <HAL_InitTick+0x8c>)
 8000bf2:	681c      	ldr	r4, [r3, #0]
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <HAL_InitTick+0x88>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	23fa      	movs	r3, #250	@ 0xfa
 8000bfc:	0098      	lsls	r0, r3, #2
 8000bfe:	f7ff fa91 	bl	8000124 <__udivsi3>
 8000c02:	0003      	movs	r3, r0
 8000c04:	0019      	movs	r1, r3
 8000c06:	0020      	movs	r0, r4
 8000c08:	f7ff fa8c 	bl	8000124 <__udivsi3>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 ff67 	bl	8001ae2 <HAL_SYSTICK_Config>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d112      	bne.n	8000c3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d80a      	bhi.n	8000c34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	425b      	negs	r3, r3
 8000c24:	2200      	movs	r2, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 ff36 	bl	8001a98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <HAL_InitTick+0x90>)
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e00d      	b.n	8000c50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e008      	b.n	8000c50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c3e:	230f      	movs	r3, #15
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e003      	b.n	8000c50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c48:	230f      	movs	r3, #15
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c50:	230f      	movs	r3, #15
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	781b      	ldrb	r3, [r3, #0]
}
 8000c56:	0018      	movs	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b005      	add	sp, #20
 8000c5c:	bd90      	pop	{r4, r7, pc}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	001a      	movs	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	18d2      	adds	r2, r2, r3
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	200001e8 	.word	0x200001e8

08000c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	@ (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	200001e8 	.word	0x200001e8

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff fff0 	bl	8000c90 <HAL_GetTick>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	189b      	adds	r3, r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	f7ff ffe0 	bl	8000c90 <HAL_GetTick>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b004      	add	sp, #16
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	20000008 	.word	0x20000008

08000cec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a05      	ldr	r2, [pc, #20]	@ (8000d10 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	431a      	orrs	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	fe3fffff 	.word	0xfe3fffff

08000d14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	23e0      	movs	r3, #224	@ 0xe0
 8000d22:	045b      	lsls	r3, r3, #17
 8000d24:	4013      	ands	r3, r2
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	2104      	movs	r1, #4
 8000d42:	400a      	ands	r2, r1
 8000d44:	2107      	movs	r1, #7
 8000d46:	4091      	lsls	r1, r2
 8000d48:	000a      	movs	r2, r1
 8000d4a:	43d2      	mvns	r2, r2
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	2104      	movs	r1, #4
 8000d52:	400b      	ands	r3, r1
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4099      	lsls	r1, r3
 8000d58:	000b      	movs	r3, r1
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b004      	add	sp, #16
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	2104      	movs	r1, #4
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	2107      	movs	r1, #7
 8000d7e:	4091      	lsls	r1, r2
 8000d80:	000a      	movs	r2, r1
 8000d82:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2104      	movs	r1, #4
 8000d88:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d8a:	40da      	lsrs	r2, r3
 8000d8c:	0013      	movs	r3, r2
}
 8000d8e:	0018      	movs	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	23c0      	movs	r3, #192	@ 0xc0
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	4013      	ands	r3, r2
 8000da8:	d101      	bne.n	8000dae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	211f      	movs	r1, #31
 8000dcc:	400a      	ands	r2, r1
 8000dce:	210f      	movs	r1, #15
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	43d2      	mvns	r2, r2
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	0e9b      	lsrs	r3, r3, #26
 8000ddc:	210f      	movs	r1, #15
 8000dde:	4019      	ands	r1, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	201f      	movs	r0, #31
 8000de4:	4003      	ands	r3, r0
 8000de6:	4099      	lsls	r1, r3
 8000de8:	000b      	movs	r3, r1
 8000dea:	431a      	orrs	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b004      	add	sp, #16
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	035b      	lsls	r3, r3, #13
 8000e0a:	0b5b      	lsrs	r3, r3, #13
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	0352      	lsls	r2, r2, #13
 8000e2c:	0b52      	lsrs	r2, r2, #13
 8000e2e:	43d2      	mvns	r2, r2
 8000e30:	401a      	ands	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	0212      	lsls	r2, r2, #8
 8000e54:	43d2      	mvns	r2, r2
 8000e56:	401a      	ands	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
 8000e60:	4904      	ldr	r1, [pc, #16]	@ (8000e74 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e62:	400b      	ands	r3, r1
 8000e64:	431a      	orrs	r2, r3
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b004      	add	sp, #16
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	07ffff00 	.word	0x07ffff00

08000e78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <LL_ADC_EnableInternalRegulator+0x24>)
 8000e86:	4013      	ands	r3, r2
 8000e88:	2280      	movs	r2, #128	@ 0x80
 8000e8a:	0552      	lsls	r2, r2, #21
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	6fffffe8 	.word	0x6fffffe8

08000ea0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	2380      	movs	r3, #128	@ 0x80
 8000eae:	055b      	lsls	r3, r3, #21
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	2380      	movs	r3, #128	@ 0x80
 8000eb4:	055b      	lsls	r3, r3, #21
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d101      	bne.n	8000ebe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	@ (8000ee8 <LL_ADC_Enable+0x20>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2201      	movs	r2, #1
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ee0:	46c0      	nop			@ (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	7fffffe8 	.word	0x7fffffe8

08000eec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4013      	ands	r3, r2
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d101      	bne.n	8000f04 <LL_ADC_IsEnabled+0x18>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <LL_ADC_IsEnabled+0x1a>
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	0018      	movs	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <LL_ADC_REG_StartConversion+0x20>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	2204      	movs	r2, #4
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	7fffffe8 	.word	0x7fffffe8

08000f34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2204      	movs	r2, #4
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d101      	bne.n	8000f4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e000      	b.n	8000f4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b002      	add	sp, #8
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f60:	231f      	movs	r3, #31
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e17f      	b.n	800127e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10a      	bne.n	8000f9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fc5d 	bl	8000848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2254      	movs	r2, #84	@ 0x54
 8000f98:	2100      	movs	r1, #0
 8000f9a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff ff7d 	bl	8000ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d115      	bne.n	8000fd6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff ff62 	bl	8000e78 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fb4:	4bb4      	ldr	r3, [pc, #720]	@ (8001288 <HAL_ADC_Init+0x330>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	49b4      	ldr	r1, [pc, #720]	@ (800128c <HAL_ADC_Init+0x334>)
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff f8b2 	bl	8000124 <__udivsi3>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f7ff ff60 	bl	8000ea0 <LL_ADC_IsInternalRegulatorEnabled>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d10f      	bne.n	8001004 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe8:	2210      	movs	r2, #16
 8000fea:	431a      	orrs	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000ffc:	231f      	movs	r3, #31
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	0018      	movs	r0, r3
 800100a:	f7ff ff93 	bl	8000f34 <LL_ADC_REG_IsConversionOngoing>
 800100e:	0003      	movs	r3, r0
 8001010:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001016:	2210      	movs	r2, #16
 8001018:	4013      	ands	r3, r2
 800101a:	d000      	beq.n	800101e <HAL_ADC_Init+0xc6>
 800101c:	e122      	b.n	8001264 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d000      	beq.n	8001026 <HAL_ADC_Init+0xce>
 8001024:	e11e      	b.n	8001264 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102a:	4a99      	ldr	r2, [pc, #612]	@ (8001290 <HAL_ADC_Init+0x338>)
 800102c:	4013      	ands	r3, r2
 800102e:	2202      	movs	r2, #2
 8001030:	431a      	orrs	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff ff56 	bl	8000eec <LL_ADC_IsEnabled>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d000      	beq.n	8001046 <HAL_ADC_Init+0xee>
 8001044:	e0ad      	b.n	80011a2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7e1b      	ldrb	r3, [r3, #24]
 800104e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001050:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	7e5b      	ldrb	r3, [r3, #25]
 8001056:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001058:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7e9b      	ldrb	r3, [r3, #26]
 800105e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001060:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <HAL_ADC_Init+0x118>
 800106a:	2380      	movs	r3, #128	@ 0x80
 800106c:	015b      	lsls	r3, r3, #5
 800106e:	e000      	b.n	8001072 <HAL_ADC_Init+0x11a>
 8001070:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001072:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001078:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	2b00      	cmp	r3, #0
 8001080:	da04      	bge.n	800108c <HAL_ADC_Init+0x134>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	085b      	lsrs	r3, r3, #1
 800108a:	e001      	b.n	8001090 <HAL_ADC_Init+0x138>
 800108c:	2380      	movs	r3, #128	@ 0x80
 800108e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001090:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	212c      	movs	r1, #44	@ 0x2c
 8001096:	5c5b      	ldrb	r3, [r3, r1]
 8001098:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800109a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2220      	movs	r2, #32
 80010a6:	5c9b      	ldrb	r3, [r3, r2]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d115      	bne.n	80010d8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7e9b      	ldrb	r3, [r3, #26]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2280      	movs	r2, #128	@ 0x80
 80010b8:	0252      	lsls	r2, r2, #9
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
 80010be:	e00b      	b.n	80010d8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c4:	2220      	movs	r2, #32
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010d0:	2201      	movs	r2, #1
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00a      	beq.n	80010f6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010e4:	23e0      	movs	r3, #224	@ 0xe0
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80010ee:	4313      	orrs	r3, r2
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	4a65      	ldr	r2, [pc, #404]	@ (8001294 <HAL_ADC_Init+0x33c>)
 80010fe:	4013      	ands	r3, r2
 8001100:	0019      	movs	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	430a      	orrs	r2, r1
 800110a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	0f9b      	lsrs	r3, r3, #30
 8001112:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001118:	4313      	orrs	r3, r2
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4313      	orrs	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	223c      	movs	r2, #60	@ 0x3c
 8001124:	5c9b      	ldrb	r3, [r3, r2]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d111      	bne.n	800114e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	0f9b      	lsrs	r3, r3, #30
 8001130:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001136:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 800113c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001142:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	4313      	orrs	r3, r2
 8001148:	2201      	movs	r2, #1
 800114a:	4313      	orrs	r3, r2
 800114c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	4a50      	ldr	r2, [pc, #320]	@ (8001298 <HAL_ADC_Init+0x340>)
 8001156:	4013      	ands	r3, r2
 8001158:	0019      	movs	r1, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	430a      	orrs	r2, r1
 8001162:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	23c0      	movs	r3, #192	@ 0xc0
 800116a:	061b      	lsls	r3, r3, #24
 800116c:	429a      	cmp	r2, r3
 800116e:	d018      	beq.n	80011a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001174:	2380      	movs	r3, #128	@ 0x80
 8001176:	05db      	lsls	r3, r3, #23
 8001178:	429a      	cmp	r2, r3
 800117a:	d012      	beq.n	80011a2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001180:	2380      	movs	r3, #128	@ 0x80
 8001182:	061b      	lsls	r3, r3, #24
 8001184:	429a      	cmp	r2, r3
 8001186:	d00c      	beq.n	80011a2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001188:	4b44      	ldr	r3, [pc, #272]	@ (800129c <HAL_ADC_Init+0x344>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a44      	ldr	r2, [pc, #272]	@ (80012a0 <HAL_ADC_Init+0x348>)
 800118e:	4013      	ands	r3, r2
 8001190:	0019      	movs	r1, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	23f0      	movs	r3, #240	@ 0xf0
 8001198:	039b      	lsls	r3, r3, #14
 800119a:	401a      	ands	r2, r3
 800119c:	4b3f      	ldr	r3, [pc, #252]	@ (800129c <HAL_ADC_Init+0x344>)
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011aa:	001a      	movs	r2, r3
 80011ac:	2100      	movs	r1, #0
 80011ae:	f7ff fdbe 	bl	8000d2e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ba:	493a      	ldr	r1, [pc, #232]	@ (80012a4 <HAL_ADC_Init+0x34c>)
 80011bc:	001a      	movs	r2, r3
 80011be:	f7ff fdb6 	bl	8000d2e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d109      	bne.n	80011de <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2110      	movs	r1, #16
 80011d6:	4249      	negs	r1, r1
 80011d8:	430a      	orrs	r2, r1
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
 80011dc:	e018      	b.n	8001210 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	2380      	movs	r3, #128	@ 0x80
 80011e4:	039b      	lsls	r3, r3, #14
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d112      	bne.n	8001210 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	221c      	movs	r2, #28
 80011fa:	4013      	ands	r3, r2
 80011fc:	2210      	movs	r2, #16
 80011fe:	4252      	negs	r2, r2
 8001200:	409a      	lsls	r2, r3
 8001202:	0011      	movs	r1, r2
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2100      	movs	r1, #0
 8001216:	0018      	movs	r0, r3
 8001218:	f7ff fda6 	bl	8000d68 <LL_ADC_GetSamplingTimeCommonChannels>
 800121c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001222:	429a      	cmp	r2, r3
 8001224:	d10b      	bne.n	800123e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001230:	2203      	movs	r2, #3
 8001232:	4393      	bics	r3, r2
 8001234:	2201      	movs	r2, #1
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800123c:	e01c      	b.n	8001278 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	2212      	movs	r2, #18
 8001244:	4393      	bics	r3, r2
 8001246:	2210      	movs	r2, #16
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001252:	2201      	movs	r2, #1
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800125a:	231f      	movs	r3, #31
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001262:	e009      	b.n	8001278 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001268:	2210      	movs	r2, #16
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001270:	231f      	movs	r3, #31
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001278:	231f      	movs	r3, #31
 800127a:	18fb      	adds	r3, r7, r3
 800127c:	781b      	ldrb	r3, [r3, #0]
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b008      	add	sp, #32
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	20000000 	.word	0x20000000
 800128c:	00030d40 	.word	0x00030d40
 8001290:	fffffefd 	.word	0xfffffefd
 8001294:	ffde0201 	.word	0xffde0201
 8001298:	1ffffc02 	.word	0x1ffffc02
 800129c:	40012708 	.word	0x40012708
 80012a0:	ffc3ffff 	.word	0xffc3ffff
 80012a4:	07ffff04 	.word	0x07ffff04

080012a8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff fe3d 	bl	8000f34 <LL_ADC_REG_IsConversionOngoing>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d135      	bne.n	800132a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2254      	movs	r2, #84	@ 0x54
 80012c2:	5c9b      	ldrb	r3, [r3, r2]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_ADC_Start+0x24>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e035      	b.n	8001338 <HAL_ADC_Start+0x90>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2254      	movs	r2, #84	@ 0x54
 80012d0:	2101      	movs	r1, #1
 80012d2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012d4:	250f      	movs	r5, #15
 80012d6:	197c      	adds	r4, r7, r5
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 faaa 	bl	8001834 <ADC_Enable>
 80012e0:	0003      	movs	r3, r0
 80012e2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012e4:	197b      	adds	r3, r7, r5
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d119      	bne.n	8001320 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f0:	4a13      	ldr	r2, [pc, #76]	@ (8001340 <HAL_ADC_Start+0x98>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	2280      	movs	r2, #128	@ 0x80
 80012f6:	0052      	lsls	r2, r2, #1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	221c      	movs	r2, #28
 800130a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2254      	movs	r2, #84	@ 0x54
 8001310:	2100      	movs	r1, #0
 8001312:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff fdf9 	bl	8000f10 <LL_ADC_REG_StartConversion>
 800131e:	e008      	b.n	8001332 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2254      	movs	r2, #84	@ 0x54
 8001324:	2100      	movs	r1, #0
 8001326:	5499      	strb	r1, [r3, r2]
 8001328:	e003      	b.n	8001332 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800132a:	230f      	movs	r3, #15
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	2202      	movs	r2, #2
 8001330:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001332:	230f      	movs	r3, #15
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	781b      	ldrb	r3, [r3, #0]
}
 8001338:	0018      	movs	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	b004      	add	sp, #16
 800133e:	bdb0      	pop	{r4, r5, r7, pc}
 8001340:	fffff0fe 	.word	0xfffff0fe

08001344 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b08      	cmp	r3, #8
 8001354:	d102      	bne.n	800135c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001356:	2308      	movs	r3, #8
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	e00f      	b.n	800137c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	4013      	ands	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136c:	2220      	movs	r2, #32
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e072      	b.n	800145e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001378:	2304      	movs	r3, #4
 800137a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800137c:	f7ff fc88 	bl	8000c90 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001384:	e01f      	b.n	80013c6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	d01c      	beq.n	80013c6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800138c:	f7ff fc80 	bl	8000c90 <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d302      	bcc.n	80013a2 <HAL_ADC_PollForConversion+0x5e>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d111      	bne.n	80013c6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4013      	ands	r3, r2
 80013ac:	d10b      	bne.n	80013c6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b2:	2204      	movs	r2, #4
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2254      	movs	r2, #84	@ 0x54
 80013be:	2100      	movs	r1, #0
 80013c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e04b      	b.n	800145e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4013      	ands	r3, r2
 80013d0:	d0d9      	beq.n	8001386 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	2280      	movs	r2, #128	@ 0x80
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff fcd6 	bl	8000d96 <LL_ADC_REG_IsTriggerSourceSWStart>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d02e      	beq.n	800144c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7e9b      	ldrb	r3, [r3, #26]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d12a      	bne.n	800144c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2208      	movs	r2, #8
 80013fe:	4013      	ands	r3, r2
 8001400:	2b08      	cmp	r3, #8
 8001402:	d123      	bne.n	800144c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff fd93 	bl	8000f34 <LL_ADC_REG_IsConversionOngoing>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d110      	bne.n	8001434 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	210c      	movs	r1, #12
 800141e:	438a      	bics	r2, r1
 8001420:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <HAL_ADC_PollForConversion+0x124>)
 8001428:	4013      	ands	r3, r2
 800142a:	2201      	movs	r2, #1
 800142c:	431a      	orrs	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	659a      	str	r2, [r3, #88]	@ 0x58
 8001432:	e00b      	b.n	800144c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001438:	2220      	movs	r2, #32
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001444:	2201      	movs	r2, #1
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7e1b      	ldrb	r3, [r3, #24]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d103      	bne.n	800145c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	220c      	movs	r2, #12
 800145a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	fffffefe 	.word	0xfffffefe

0800146c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800147a:	0018      	movs	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	b002      	add	sp, #8
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800148e:	2317      	movs	r3, #23
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2254      	movs	r2, #84	@ 0x54
 800149e:	5c9b      	ldrb	r3, [r3, r2]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_ADC_ConfigChannel+0x24>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e1c0      	b.n	800182a <HAL_ADC_ConfigChannel+0x3a6>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2254      	movs	r2, #84	@ 0x54
 80014ac:	2101      	movs	r1, #1
 80014ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff fd3d 	bl	8000f34 <LL_ADC_REG_IsConversionOngoing>
 80014ba:	1e03      	subs	r3, r0, #0
 80014bc:	d000      	beq.n	80014c0 <HAL_ADC_ConfigChannel+0x3c>
 80014be:	e1a3      	b.n	8001808 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d100      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x46>
 80014c8:	e143      	b.n	8001752 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	061b      	lsls	r3, r3, #24
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d004      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014da:	4ac1      	ldr	r2, [pc, #772]	@ (80017e0 <HAL_ADC_ConfigChannel+0x35c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d108      	bne.n	80014f2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	0019      	movs	r1, r3
 80014ea:	0010      	movs	r0, r2
 80014ec:	f7ff fc84 	bl	8000df8 <LL_ADC_REG_SetSequencerChAdd>
 80014f0:	e0c9      	b.n	8001686 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	211f      	movs	r1, #31
 80014fc:	400b      	ands	r3, r1
 80014fe:	210f      	movs	r1, #15
 8001500:	4099      	lsls	r1, r3
 8001502:	000b      	movs	r3, r1
 8001504:	43db      	mvns	r3, r3
 8001506:	4013      	ands	r3, r2
 8001508:	0019      	movs	r1, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	035b      	lsls	r3, r3, #13
 8001510:	0b5b      	lsrs	r3, r3, #13
 8001512:	d105      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x9c>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0e9b      	lsrs	r3, r3, #26
 800151a:	221f      	movs	r2, #31
 800151c:	4013      	ands	r3, r2
 800151e:	e098      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	4013      	ands	r3, r2
 8001528:	d000      	beq.n	800152c <HAL_ADC_ConfigChannel+0xa8>
 800152a:	e091      	b.n	8001650 <HAL_ADC_ConfigChannel+0x1cc>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2202      	movs	r2, #2
 8001532:	4013      	ands	r3, r2
 8001534:	d000      	beq.n	8001538 <HAL_ADC_ConfigChannel+0xb4>
 8001536:	e089      	b.n	800164c <HAL_ADC_ConfigChannel+0x1c8>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2204      	movs	r2, #4
 800153e:	4013      	ands	r3, r2
 8001540:	d000      	beq.n	8001544 <HAL_ADC_ConfigChannel+0xc0>
 8001542:	e081      	b.n	8001648 <HAL_ADC_ConfigChannel+0x1c4>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2208      	movs	r2, #8
 800154a:	4013      	ands	r3, r2
 800154c:	d000      	beq.n	8001550 <HAL_ADC_ConfigChannel+0xcc>
 800154e:	e079      	b.n	8001644 <HAL_ADC_ConfigChannel+0x1c0>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2210      	movs	r2, #16
 8001556:	4013      	ands	r3, r2
 8001558:	d000      	beq.n	800155c <HAL_ADC_ConfigChannel+0xd8>
 800155a:	e071      	b.n	8001640 <HAL_ADC_ConfigChannel+0x1bc>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2220      	movs	r2, #32
 8001562:	4013      	ands	r3, r2
 8001564:	d000      	beq.n	8001568 <HAL_ADC_ConfigChannel+0xe4>
 8001566:	e069      	b.n	800163c <HAL_ADC_ConfigChannel+0x1b8>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2240      	movs	r2, #64	@ 0x40
 800156e:	4013      	ands	r3, r2
 8001570:	d000      	beq.n	8001574 <HAL_ADC_ConfigChannel+0xf0>
 8001572:	e061      	b.n	8001638 <HAL_ADC_ConfigChannel+0x1b4>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2280      	movs	r2, #128	@ 0x80
 800157a:	4013      	ands	r3, r2
 800157c:	d000      	beq.n	8001580 <HAL_ADC_ConfigChannel+0xfc>
 800157e:	e059      	b.n	8001634 <HAL_ADC_ConfigChannel+0x1b0>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d151      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1ac>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2380      	movs	r3, #128	@ 0x80
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d149      	bne.n	800162c <HAL_ADC_ConfigChannel+0x1a8>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4013      	ands	r3, r2
 80015a2:	d141      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x1a4>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	@ 0x80
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	4013      	ands	r3, r2
 80015ae:	d139      	bne.n	8001624 <HAL_ADC_ConfigChannel+0x1a0>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2380      	movs	r3, #128	@ 0x80
 80015b6:	015b      	lsls	r3, r3, #5
 80015b8:	4013      	ands	r3, r2
 80015ba:	d131      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x19c>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	@ 0x80
 80015c2:	019b      	lsls	r3, r3, #6
 80015c4:	4013      	ands	r3, r2
 80015c6:	d129      	bne.n	800161c <HAL_ADC_ConfigChannel+0x198>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	2380      	movs	r3, #128	@ 0x80
 80015ce:	01db      	lsls	r3, r3, #7
 80015d0:	4013      	ands	r3, r2
 80015d2:	d121      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x194>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	4013      	ands	r3, r2
 80015de:	d119      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x190>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2380      	movs	r3, #128	@ 0x80
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	4013      	ands	r3, r2
 80015ea:	d111      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x18c>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	@ 0x80
 80015f2:	029b      	lsls	r3, r3, #10
 80015f4:	4013      	ands	r3, r2
 80015f6:	d109      	bne.n	800160c <HAL_ADC_ConfigChannel+0x188>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	@ 0x80
 80015fe:	02db      	lsls	r3, r3, #11
 8001600:	4013      	ands	r3, r2
 8001602:	d001      	beq.n	8001608 <HAL_ADC_ConfigChannel+0x184>
 8001604:	2312      	movs	r3, #18
 8001606:	e024      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001608:	2300      	movs	r3, #0
 800160a:	e022      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 800160c:	2311      	movs	r3, #17
 800160e:	e020      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001610:	2310      	movs	r3, #16
 8001612:	e01e      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001614:	230f      	movs	r3, #15
 8001616:	e01c      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001618:	230e      	movs	r3, #14
 800161a:	e01a      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 800161c:	230d      	movs	r3, #13
 800161e:	e018      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001620:	230c      	movs	r3, #12
 8001622:	e016      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001624:	230b      	movs	r3, #11
 8001626:	e014      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001628:	230a      	movs	r3, #10
 800162a:	e012      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 800162c:	2309      	movs	r3, #9
 800162e:	e010      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001630:	2308      	movs	r3, #8
 8001632:	e00e      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001634:	2307      	movs	r3, #7
 8001636:	e00c      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001638:	2306      	movs	r3, #6
 800163a:	e00a      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 800163c:	2305      	movs	r3, #5
 800163e:	e008      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001640:	2304      	movs	r3, #4
 8001642:	e006      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001644:	2303      	movs	r3, #3
 8001646:	e004      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001648:	2302      	movs	r3, #2
 800164a:	e002      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_ADC_ConfigChannel+0x1ce>
 8001650:	2300      	movs	r3, #0
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	6852      	ldr	r2, [r2, #4]
 8001656:	201f      	movs	r0, #31
 8001658:	4002      	ands	r2, r0
 800165a:	4093      	lsls	r3, r2
 800165c:	000a      	movs	r2, r1
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	429a      	cmp	r2, r3
 8001672:	d808      	bhi.n	8001686 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	001a      	movs	r2, r3
 8001682:	f7ff fb99 	bl	8000db8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6819      	ldr	r1, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	001a      	movs	r2, r3
 8001694:	f7ff fbd4 	bl	8000e40 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	db00      	blt.n	80016a2 <HAL_ADC_ConfigChannel+0x21e>
 80016a0:	e0bc      	b.n	800181c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016a2:	4b50      	ldr	r3, [pc, #320]	@ (80017e4 <HAL_ADC_ConfigChannel+0x360>)
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff fb35 	bl	8000d14 <LL_ADC_GetCommonPathInternalCh>
 80016aa:	0003      	movs	r3, r0
 80016ac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a4d      	ldr	r2, [pc, #308]	@ (80017e8 <HAL_ADC_ConfigChannel+0x364>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d122      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016c0:	d11d      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	2280      	movs	r2, #128	@ 0x80
 80016c6:	0412      	lsls	r2, r2, #16
 80016c8:	4313      	orrs	r3, r2
 80016ca:	4a46      	ldr	r2, [pc, #280]	@ (80017e4 <HAL_ADC_ConfigChannel+0x360>)
 80016cc:	0019      	movs	r1, r3
 80016ce:	0010      	movs	r0, r2
 80016d0:	f7ff fb0c 	bl	8000cec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016d4:	4b45      	ldr	r3, [pc, #276]	@ (80017ec <HAL_ADC_ConfigChannel+0x368>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4945      	ldr	r1, [pc, #276]	@ (80017f0 <HAL_ADC_ConfigChannel+0x36c>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f7fe fd22 	bl	8000124 <__udivsi3>
 80016e0:	0003      	movs	r3, r0
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	0013      	movs	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	189b      	adds	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016ee:	e002      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f9      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016fc:	e08e      	b.n	800181c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a3c      	ldr	r2, [pc, #240]	@ (80017f4 <HAL_ADC_ConfigChannel+0x370>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d10e      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	045b      	lsls	r3, r3, #17
 800170e:	4013      	ands	r3, r2
 8001710:	d109      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	2280      	movs	r2, #128	@ 0x80
 8001716:	0452      	lsls	r2, r2, #17
 8001718:	4313      	orrs	r3, r2
 800171a:	4a32      	ldr	r2, [pc, #200]	@ (80017e4 <HAL_ADC_ConfigChannel+0x360>)
 800171c:	0019      	movs	r1, r3
 800171e:	0010      	movs	r0, r2
 8001720:	f7ff fae4 	bl	8000cec <LL_ADC_SetCommonPathInternalCh>
 8001724:	e07a      	b.n	800181c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a33      	ldr	r2, [pc, #204]	@ (80017f8 <HAL_ADC_ConfigChannel+0x374>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d000      	beq.n	8001732 <HAL_ADC_ConfigChannel+0x2ae>
 8001730:	e074      	b.n	800181c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	03db      	lsls	r3, r3, #15
 8001738:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800173a:	d000      	beq.n	800173e <HAL_ADC_ConfigChannel+0x2ba>
 800173c:	e06e      	b.n	800181c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2280      	movs	r2, #128	@ 0x80
 8001742:	03d2      	lsls	r2, r2, #15
 8001744:	4313      	orrs	r3, r2
 8001746:	4a27      	ldr	r2, [pc, #156]	@ (80017e4 <HAL_ADC_ConfigChannel+0x360>)
 8001748:	0019      	movs	r1, r3
 800174a:	0010      	movs	r0, r2
 800174c:	f7ff face 	bl	8000cec <LL_ADC_SetCommonPathInternalCh>
 8001750:	e064      	b.n	800181c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691a      	ldr	r2, [r3, #16]
 8001756:	2380      	movs	r3, #128	@ 0x80
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	429a      	cmp	r2, r3
 800175c:	d004      	beq.n	8001768 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001762:	4a1f      	ldr	r2, [pc, #124]	@ (80017e0 <HAL_ADC_ConfigChannel+0x35c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d107      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0019      	movs	r1, r3
 8001772:	0010      	movs	r0, r2
 8001774:	f7ff fb51 	bl	8000e1a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	da4d      	bge.n	800181c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <HAL_ADC_ConfigChannel+0x360>)
 8001782:	0018      	movs	r0, r3
 8001784:	f7ff fac6 	bl	8000d14 <LL_ADC_GetCommonPathInternalCh>
 8001788:	0003      	movs	r3, r0
 800178a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a15      	ldr	r2, [pc, #84]	@ (80017e8 <HAL_ADC_ConfigChannel+0x364>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d108      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4a18      	ldr	r2, [pc, #96]	@ (80017fc <HAL_ADC_ConfigChannel+0x378>)
 800179a:	4013      	ands	r3, r2
 800179c:	4a11      	ldr	r2, [pc, #68]	@ (80017e4 <HAL_ADC_ConfigChannel+0x360>)
 800179e:	0019      	movs	r1, r3
 80017a0:	0010      	movs	r0, r2
 80017a2:	f7ff faa3 	bl	8000cec <LL_ADC_SetCommonPathInternalCh>
 80017a6:	e039      	b.n	800181c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <HAL_ADC_ConfigChannel+0x370>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d108      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <HAL_ADC_ConfigChannel+0x37c>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <HAL_ADC_ConfigChannel+0x360>)
 80017ba:	0019      	movs	r1, r3
 80017bc:	0010      	movs	r0, r2
 80017be:	f7ff fa95 	bl	8000cec <LL_ADC_SetCommonPathInternalCh>
 80017c2:	e02b      	b.n	800181c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <HAL_ADC_ConfigChannel+0x374>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d126      	bne.n	800181c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001804 <HAL_ADC_ConfigChannel+0x380>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	4a03      	ldr	r2, [pc, #12]	@ (80017e4 <HAL_ADC_ConfigChannel+0x360>)
 80017d6:	0019      	movs	r1, r3
 80017d8:	0010      	movs	r0, r2
 80017da:	f7ff fa87 	bl	8000cec <LL_ADC_SetCommonPathInternalCh>
 80017de:	e01d      	b.n	800181c <HAL_ADC_ConfigChannel+0x398>
 80017e0:	80000004 	.word	0x80000004
 80017e4:	40012708 	.word	0x40012708
 80017e8:	b0001000 	.word	0xb0001000
 80017ec:	20000000 	.word	0x20000000
 80017f0:	00030d40 	.word	0x00030d40
 80017f4:	b8004000 	.word	0xb8004000
 80017f8:	b4002000 	.word	0xb4002000
 80017fc:	ff7fffff 	.word	0xff7fffff
 8001800:	feffffff 	.word	0xfeffffff
 8001804:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180c:	2220      	movs	r2, #32
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001814:	2317      	movs	r3, #23
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2254      	movs	r2, #84	@ 0x54
 8001820:	2100      	movs	r1, #0
 8001822:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001824:	2317      	movs	r3, #23
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	781b      	ldrb	r3, [r3, #0]
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b006      	add	sp, #24
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			@ (mov r8, r8)

08001834 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff fb51 	bl	8000eec <LL_ADC_IsEnabled>
 800184a:	1e03      	subs	r3, r0, #0
 800184c:	d000      	beq.n	8001850 <ADC_Enable+0x1c>
 800184e:	e069      	b.n	8001924 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	4a36      	ldr	r2, [pc, #216]	@ (8001930 <ADC_Enable+0xfc>)
 8001858:	4013      	ands	r3, r2
 800185a:	d00d      	beq.n	8001878 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	2210      	movs	r2, #16
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186c:	2201      	movs	r2, #1
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e056      	b.n	8001926 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff fb23 	bl	8000ec8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001882:	4b2c      	ldr	r3, [pc, #176]	@ (8001934 <ADC_Enable+0x100>)
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff fa45 	bl	8000d14 <LL_ADC_GetCommonPathInternalCh>
 800188a:	0002      	movs	r2, r0
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	041b      	lsls	r3, r3, #16
 8001890:	4013      	ands	r3, r2
 8001892:	d00f      	beq.n	80018b4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001894:	4b28      	ldr	r3, [pc, #160]	@ (8001938 <ADC_Enable+0x104>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4928      	ldr	r1, [pc, #160]	@ (800193c <ADC_Enable+0x108>)
 800189a:	0018      	movs	r0, r3
 800189c:	f7fe fc42 	bl	8000124 <__udivsi3>
 80018a0:	0003      	movs	r3, r0
 80018a2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80018a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80018a6:	e002      	b.n	80018ae <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f9      	bne.n	80018a8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	7e5b      	ldrb	r3, [r3, #25]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d033      	beq.n	8001924 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80018bc:	f7ff f9e8 	bl	8000c90 <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018c4:	e027      	b.n	8001916 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7ff fb0e 	bl	8000eec <LL_ADC_IsEnabled>
 80018d0:	1e03      	subs	r3, r0, #0
 80018d2:	d104      	bne.n	80018de <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff faf5 	bl	8000ec8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018de:	f7ff f9d7 	bl	8000c90 <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d914      	bls.n	8001916 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2201      	movs	r2, #1
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d00d      	beq.n	8001916 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	2210      	movs	r2, #16
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190a:	2201      	movs	r2, #1
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e007      	b.n	8001926 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2201      	movs	r2, #1
 800191e:	4013      	ands	r3, r2
 8001920:	2b01      	cmp	r3, #1
 8001922:	d1d0      	bne.n	80018c6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	0018      	movs	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	b004      	add	sp, #16
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	80000017 	.word	0x80000017
 8001934:	40012708 	.word	0x40012708
 8001938:	20000000 	.word	0x20000000
 800193c:	00030d40 	.word	0x00030d40

08001940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	0002      	movs	r2, r0
 8001948:	1dfb      	adds	r3, r7, #7
 800194a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800194c:	1dfb      	adds	r3, r7, #7
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b7f      	cmp	r3, #127	@ 0x7f
 8001952:	d809      	bhi.n	8001968 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001954:	1dfb      	adds	r3, r7, #7
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	001a      	movs	r2, r3
 800195a:	231f      	movs	r3, #31
 800195c:	401a      	ands	r2, r3
 800195e:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <__NVIC_EnableIRQ+0x30>)
 8001960:	2101      	movs	r1, #1
 8001962:	4091      	lsls	r1, r2
 8001964:	000a      	movs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b002      	add	sp, #8
 800196e:	bd80      	pop	{r7, pc}
 8001970:	e000e100 	.word	0xe000e100

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	0002      	movs	r2, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b7f      	cmp	r3, #127	@ 0x7f
 8001988:	d828      	bhi.n	80019dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a48 <__NVIC_SetPriority+0xd4>)
 800198c:	1dfb      	adds	r3, r7, #7
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b25b      	sxtb	r3, r3
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	33c0      	adds	r3, #192	@ 0xc0
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	589b      	ldr	r3, [r3, r2]
 800199a:	1dfa      	adds	r2, r7, #7
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	0011      	movs	r1, r2
 80019a0:	2203      	movs	r2, #3
 80019a2:	400a      	ands	r2, r1
 80019a4:	00d2      	lsls	r2, r2, #3
 80019a6:	21ff      	movs	r1, #255	@ 0xff
 80019a8:	4091      	lsls	r1, r2
 80019aa:	000a      	movs	r2, r1
 80019ac:	43d2      	mvns	r2, r2
 80019ae:	401a      	ands	r2, r3
 80019b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	019b      	lsls	r3, r3, #6
 80019b6:	22ff      	movs	r2, #255	@ 0xff
 80019b8:	401a      	ands	r2, r3
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	0018      	movs	r0, r3
 80019c0:	2303      	movs	r3, #3
 80019c2:	4003      	ands	r3, r0
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019c8:	481f      	ldr	r0, [pc, #124]	@ (8001a48 <__NVIC_SetPriority+0xd4>)
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	430a      	orrs	r2, r1
 80019d4:	33c0      	adds	r3, #192	@ 0xc0
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019da:	e031      	b.n	8001a40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019dc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a4c <__NVIC_SetPriority+0xd8>)
 80019de:	1dfb      	adds	r3, r7, #7
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	0019      	movs	r1, r3
 80019e4:	230f      	movs	r3, #15
 80019e6:	400b      	ands	r3, r1
 80019e8:	3b08      	subs	r3, #8
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3306      	adds	r3, #6
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	3304      	adds	r3, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	1dfa      	adds	r2, r7, #7
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	0011      	movs	r1, r2
 80019fc:	2203      	movs	r2, #3
 80019fe:	400a      	ands	r2, r1
 8001a00:	00d2      	lsls	r2, r2, #3
 8001a02:	21ff      	movs	r1, #255	@ 0xff
 8001a04:	4091      	lsls	r1, r2
 8001a06:	000a      	movs	r2, r1
 8001a08:	43d2      	mvns	r2, r2
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	019b      	lsls	r3, r3, #6
 8001a12:	22ff      	movs	r2, #255	@ 0xff
 8001a14:	401a      	ands	r2, r3
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	4003      	ands	r3, r0
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a24:	4809      	ldr	r0, [pc, #36]	@ (8001a4c <__NVIC_SetPriority+0xd8>)
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	001c      	movs	r4, r3
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	4023      	ands	r3, r4
 8001a30:	3b08      	subs	r3, #8
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	430a      	orrs	r2, r1
 8001a36:	3306      	adds	r3, #6
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	18c3      	adds	r3, r0, r3
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b003      	add	sp, #12
 8001a46:	bd90      	pop	{r4, r7, pc}
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	1e5a      	subs	r2, r3, #1
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	045b      	lsls	r3, r3, #17
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d301      	bcc.n	8001a68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a64:	2301      	movs	r3, #1
 8001a66:	e010      	b.n	8001a8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a68:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <SysTick_Config+0x44>)
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	3a01      	subs	r2, #1
 8001a6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a70:	2301      	movs	r3, #1
 8001a72:	425b      	negs	r3, r3
 8001a74:	2103      	movs	r1, #3
 8001a76:	0018      	movs	r0, r3
 8001a78:	f7ff ff7c 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <SysTick_Config+0x44>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <SysTick_Config+0x44>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	1c02      	adds	r2, r0, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7ff ff5d 	bl	8001974 <__NVIC_SetPriority>
}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b004      	add	sp, #16
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	0002      	movs	r2, r0
 8001aca:	1dfb      	adds	r3, r7, #7
 8001acc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ace:	1dfb      	adds	r3, r7, #7
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	b25b      	sxtb	r3, r3
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff ff33 	bl	8001940 <__NVIC_EnableIRQ>
}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b002      	add	sp, #8
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff ffaf 	bl	8001a50 <SysTick_Config>
 8001af2:	0003      	movs	r3, r0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e050      	b.n	8001bb0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2225      	movs	r2, #37	@ 0x25
 8001b12:	5c9b      	ldrb	r3, [r3, r2]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d008      	beq.n	8001b2c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2224      	movs	r2, #36	@ 0x24
 8001b24:	2100      	movs	r1, #0
 8001b26:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e041      	b.n	8001bb0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	210e      	movs	r1, #14
 8001b38:	438a      	bics	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	491c      	ldr	r1, [pc, #112]	@ (8001bb8 <HAL_DMA_Abort+0xbc>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2101      	movs	r1, #1
 8001b58:	438a      	bics	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001b5c:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <HAL_DMA_Abort+0xc0>)
 8001b5e:	6859      	ldr	r1, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	221c      	movs	r2, #28
 8001b66:	4013      	ands	r3, r2
 8001b68:	2201      	movs	r2, #1
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <HAL_DMA_Abort+0xc0>)
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b7a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00c      	beq.n	8001b9e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8e:	490a      	ldr	r1, [pc, #40]	@ (8001bb8 <HAL_DMA_Abort+0xbc>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b9c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2225      	movs	r2, #37	@ 0x25
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2224      	movs	r2, #36	@ 0x24
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	fffffeff 	.word	0xfffffeff
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc8:	210f      	movs	r1, #15
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2225      	movs	r2, #37	@ 0x25
 8001bd4:	5c9b      	ldrb	r3, [r3, r2]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d006      	beq.n	8001bea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2204      	movs	r2, #4
 8001be0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e049      	b.n	8001c7e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	210e      	movs	r1, #14
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	438a      	bics	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c14:	491d      	ldr	r1, [pc, #116]	@ (8001c8c <HAL_DMA_Abort_IT+0xcc>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_DMA_Abort_IT+0xd0>)
 8001c1c:	6859      	ldr	r1, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	221c      	movs	r2, #28
 8001c24:	4013      	ands	r3, r2
 8001c26:	2201      	movs	r2, #1
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <HAL_DMA_Abort_IT+0xd0>)
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00c      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c4c:	490f      	ldr	r1, [pc, #60]	@ (8001c8c <HAL_DMA_Abort_IT+0xcc>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001c5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2225      	movs	r2, #37	@ 0x25
 8001c60:	2101      	movs	r1, #1
 8001c62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	@ 0x24
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	4798      	blx	r3
    }
  }
  return status;
 8001c7e:	230f      	movs	r3, #15
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	781b      	ldrb	r3, [r3, #0]
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b004      	add	sp, #16
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	fffffeff 	.word	0xfffffeff
 8001c90:	40020000 	.word	0x40020000

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e147      	b.n	8001f34 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4091      	lsls	r1, r2
 8001cae:	000a      	movs	r2, r1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <HAL_GPIO_Init+0x28>
 8001cba:	e138      	b.n	8001f2e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d005      	beq.n	8001cd4 <HAL_GPIO_Init+0x40>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d130      	bne.n	8001d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	0013      	movs	r3, r2
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	0013      	movs	r3, r2
 8001d12:	43da      	mvns	r2, r3
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	2201      	movs	r2, #1
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
 8001d28:	0013      	movs	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d017      	beq.n	8001d72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	0013      	movs	r3, r2
 8001d52:	43da      	mvns	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	409a      	lsls	r2, r3
 8001d64:	0013      	movs	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2203      	movs	r2, #3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d123      	bne.n	8001dc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	58d3      	ldr	r3, [r2, r3]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2207      	movs	r2, #7
 8001d90:	4013      	ands	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	409a      	lsls	r2, r3
 8001d98:	0013      	movs	r3, r2
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	691a      	ldr	r2, [r3, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2107      	movs	r1, #7
 8001daa:	400b      	ands	r3, r1
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	08da      	lsrs	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3208      	adds	r2, #8
 8001dc0:	0092      	lsls	r2, r2, #2
 8001dc2:	6939      	ldr	r1, [r7, #16]
 8001dc4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2203      	movs	r2, #3
 8001de4:	401a      	ands	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	409a      	lsls	r2, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	23c0      	movs	r3, #192	@ 0xc0
 8001e00:	029b      	lsls	r3, r3, #10
 8001e02:	4013      	ands	r3, r2
 8001e04:	d100      	bne.n	8001e08 <HAL_GPIO_Init+0x174>
 8001e06:	e092      	b.n	8001f2e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e08:	4a50      	ldr	r2, [pc, #320]	@ (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3318      	adds	r3, #24
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	589b      	ldr	r3, [r3, r2]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2203      	movs	r2, #3
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	220f      	movs	r2, #15
 8001e20:	409a      	lsls	r2, r3
 8001e22:	0013      	movs	r3, r2
 8001e24:	43da      	mvns	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	23a0      	movs	r3, #160	@ 0xa0
 8001e30:	05db      	lsls	r3, r3, #23
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0x1ca>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a45      	ldr	r2, [pc, #276]	@ (8001f50 <HAL_GPIO_Init+0x2bc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x1c6>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a44      	ldr	r2, [pc, #272]	@ (8001f54 <HAL_GPIO_Init+0x2c0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x1c2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a43      	ldr	r2, [pc, #268]	@ (8001f58 <HAL_GPIO_Init+0x2c4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x1be>
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x1cc>
 8001e52:	2305      	movs	r3, #5
 8001e54:	e004      	b.n	8001e60 <HAL_GPIO_Init+0x1cc>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_Init+0x1cc>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x1cc>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	2103      	movs	r1, #3
 8001e64:	400a      	ands	r2, r1
 8001e66:	00d2      	lsls	r2, r2, #3
 8001e68:	4093      	lsls	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001e70:	4936      	ldr	r1, [pc, #216]	@ (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3318      	adds	r3, #24
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e7e:	4b33      	ldr	r3, [pc, #204]	@ (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43da      	mvns	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	035b      	lsls	r3, r3, #13
 8001e96:	4013      	ands	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001ea8:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	039b      	lsls	r3, r3, #14
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001ed4:	2384      	movs	r3, #132	@ 0x84
 8001ed6:	58d3      	ldr	r3, [r2, r3]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43da      	mvns	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	2380      	movs	r3, #128	@ 0x80
 8001eea:	029b      	lsls	r3, r3, #10
 8001eec:	4013      	ands	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef8:	4914      	ldr	r1, [pc, #80]	@ (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001efa:	2284      	movs	r2, #132	@ 0x84
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001f00:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001f02:	2380      	movs	r3, #128	@ 0x80
 8001f04:	58d3      	ldr	r3, [r2, r3]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	2380      	movs	r3, #128	@ 0x80
 8001f18:	025b      	lsls	r3, r3, #9
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f26:	4909      	ldr	r1, [pc, #36]	@ (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001f28:	2280      	movs	r2, #128	@ 0x80
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	40da      	lsrs	r2, r3
 8001f3c:	1e13      	subs	r3, r2, #0
 8001f3e:	d000      	beq.n	8001f42 <HAL_GPIO_Init+0x2ae>
 8001f40:	e6b0      	b.n	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001f42:	46c0      	nop			@ (mov r8, r8)
 8001f44:	46c0      	nop			@ (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b006      	add	sp, #24
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	50000400 	.word	0x50000400
 8001f54:	50000800 	.word	0x50000800
 8001f58:	50000c00 	.word	0x50000c00

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	0008      	movs	r0, r1
 8001f66:	0011      	movs	r1, r2
 8001f68:	1cbb      	adds	r3, r7, #2
 8001f6a:	1c02      	adds	r2, r0, #0
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	1c7b      	adds	r3, r7, #1
 8001f70:	1c0a      	adds	r2, r1, #0
 8001f72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f74:	1c7b      	adds	r3, r7, #1
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f7c:	1cbb      	adds	r3, r7, #2
 8001f7e:	881a      	ldrh	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f84:	e003      	b.n	8001f8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f86:	1cbb      	adds	r3, r7, #2
 8001f88:	881a      	ldrh	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	@ (800200c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d11f      	bne.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	@ (8002010 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	0013      	movs	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	189b      	adds	r3, r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4912      	ldr	r1, [pc, #72]	@ (8002014 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7fe f8aa 	bl	8000124 <__udivsi3>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fd6:	e008      	b.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e001      	b.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e009      	b.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fea:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	2380      	movs	r3, #128	@ 0x80
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d0ed      	beq.n	8001fd8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b004      	add	sp, #16
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	40007000 	.word	0x40007000
 800200c:	fffff9ff 	.word	0xfffff9ff
 8002010:	20000000 	.word	0x20000000
 8002014:	000f4240 	.word	0x000f4240

08002018 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <LL_RCC_GetAPB1Prescaler+0x14>)
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	23e0      	movs	r3, #224	@ 0xe0
 8002022:	01db      	lsls	r3, r3, #7
 8002024:	4013      	ands	r3, r2
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e2f3      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2201      	movs	r2, #1
 8002048:	4013      	ands	r3, r2
 800204a:	d100      	bne.n	800204e <HAL_RCC_OscConfig+0x1e>
 800204c:	e07c      	b.n	8002148 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204e:	4bc3      	ldr	r3, [pc, #780]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2238      	movs	r2, #56	@ 0x38
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002058:	4bc0      	ldr	r3, [pc, #768]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2203      	movs	r2, #3
 800205e:	4013      	ands	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b10      	cmp	r3, #16
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0x3e>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d002      	beq.n	8002074 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b08      	cmp	r3, #8
 8002072:	d10b      	bne.n	800208c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	4bb9      	ldr	r3, [pc, #740]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	029b      	lsls	r3, r3, #10
 800207c:	4013      	ands	r3, r2
 800207e:	d062      	beq.n	8002146 <HAL_RCC_OscConfig+0x116>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d15e      	bne.n	8002146 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e2ce      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2380      	movs	r3, #128	@ 0x80
 8002092:	025b      	lsls	r3, r3, #9
 8002094:	429a      	cmp	r2, r3
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_OscConfig+0x78>
 8002098:	4bb0      	ldr	r3, [pc, #704]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4baf      	ldr	r3, [pc, #700]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 800209e:	2180      	movs	r1, #128	@ 0x80
 80020a0:	0249      	lsls	r1, r1, #9
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e020      	b.n	80020ea <HAL_RCC_OscConfig+0xba>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	23a0      	movs	r3, #160	@ 0xa0
 80020ae:	02db      	lsls	r3, r3, #11
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d10e      	bne.n	80020d2 <HAL_RCC_OscConfig+0xa2>
 80020b4:	4ba9      	ldr	r3, [pc, #676]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4ba8      	ldr	r3, [pc, #672]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80020ba:	2180      	movs	r1, #128	@ 0x80
 80020bc:	02c9      	lsls	r1, r1, #11
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	4ba6      	ldr	r3, [pc, #664]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4ba5      	ldr	r3, [pc, #660]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	0249      	lsls	r1, r1, #9
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0xba>
 80020d2:	4ba2      	ldr	r3, [pc, #648]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4ba1      	ldr	r3, [pc, #644]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80020d8:	49a1      	ldr	r1, [pc, #644]	@ (8002360 <HAL_RCC_OscConfig+0x330>)
 80020da:	400a      	ands	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	4b9f      	ldr	r3, [pc, #636]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b9e      	ldr	r3, [pc, #632]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80020e4:	499f      	ldr	r1, [pc, #636]	@ (8002364 <HAL_RCC_OscConfig+0x334>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d014      	beq.n	800211c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe fdcd 	bl	8000c90 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020fc:	f7fe fdc8 	bl	8000c90 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b64      	cmp	r3, #100	@ 0x64
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e28d      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210e:	4b93      	ldr	r3, [pc, #588]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	2380      	movs	r3, #128	@ 0x80
 8002114:	029b      	lsls	r3, r3, #10
 8002116:	4013      	ands	r3, r2
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0xcc>
 800211a:	e015      	b.n	8002148 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fdb8 	bl	8000c90 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002126:	f7fe fdb3 	bl	8000c90 <HAL_GetTick>
 800212a:	0002      	movs	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b64      	cmp	r3, #100	@ 0x64
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e278      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002138:	4b88      	ldr	r3, [pc, #544]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	029b      	lsls	r3, r3, #10
 8002140:	4013      	ands	r3, r2
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0xf6>
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002146:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2202      	movs	r2, #2
 800214e:	4013      	ands	r3, r2
 8002150:	d100      	bne.n	8002154 <HAL_RCC_OscConfig+0x124>
 8002152:	e099      	b.n	8002288 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002154:	4b81      	ldr	r3, [pc, #516]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2238      	movs	r2, #56	@ 0x38
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800215e:	4b7f      	ldr	r3, [pc, #508]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2203      	movs	r2, #3
 8002164:	4013      	ands	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2b10      	cmp	r3, #16
 800216c:	d102      	bne.n	8002174 <HAL_RCC_OscConfig+0x144>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d002      	beq.n	800217a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d135      	bne.n	80021e6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217a:	4b78      	ldr	r3, [pc, #480]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	@ 0x80
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4013      	ands	r3, r2
 8002184:	d005      	beq.n	8002192 <HAL_RCC_OscConfig+0x162>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e24b      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	4b72      	ldr	r3, [pc, #456]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a74      	ldr	r2, [pc, #464]	@ (8002368 <HAL_RCC_OscConfig+0x338>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	021a      	lsls	r2, r3, #8
 80021a2:	4b6e      	ldr	r3, [pc, #440]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d112      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021ae:	4b6b      	ldr	r3, [pc, #428]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6e      	ldr	r2, [pc, #440]	@ (800236c <HAL_RCC_OscConfig+0x33c>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	4b67      	ldr	r3, [pc, #412]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80021c2:	4b66      	ldr	r3, [pc, #408]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0adb      	lsrs	r3, r3, #11
 80021c8:	2207      	movs	r2, #7
 80021ca:	4013      	ands	r3, r2
 80021cc:	4a68      	ldr	r2, [pc, #416]	@ (8002370 <HAL_RCC_OscConfig+0x340>)
 80021ce:	40da      	lsrs	r2, r3
 80021d0:	4b68      	ldr	r3, [pc, #416]	@ (8002374 <HAL_RCC_OscConfig+0x344>)
 80021d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021d4:	4b68      	ldr	r3, [pc, #416]	@ (8002378 <HAL_RCC_OscConfig+0x348>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0018      	movs	r0, r3
 80021da:	f7fe fcfd 	bl	8000bd8 <HAL_InitTick>
 80021de:	1e03      	subs	r3, r0, #0
 80021e0:	d051      	beq.n	8002286 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e221      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d030      	beq.n	8002250 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021ee:	4b5b      	ldr	r3, [pc, #364]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a5e      	ldr	r2, [pc, #376]	@ (800236c <HAL_RCC_OscConfig+0x33c>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	0019      	movs	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	4b57      	ldr	r3, [pc, #348]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002202:	4b56      	ldr	r3, [pc, #344]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b55      	ldr	r3, [pc, #340]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002208:	2180      	movs	r1, #128	@ 0x80
 800220a:	0049      	lsls	r1, r1, #1
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7fe fd3e 	bl	8000c90 <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fd39 	bl	8000c90 <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e1fe      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222c:	4b4b      	ldr	r3, [pc, #300]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4013      	ands	r3, r2
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b48      	ldr	r3, [pc, #288]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4a4a      	ldr	r2, [pc, #296]	@ (8002368 <HAL_RCC_OscConfig+0x338>)
 800223e:	4013      	ands	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	021a      	lsls	r2, r3, #8
 8002248:	4b44      	ldr	r3, [pc, #272]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	e01b      	b.n	8002288 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002250:	4b42      	ldr	r3, [pc, #264]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b41      	ldr	r3, [pc, #260]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002256:	4949      	ldr	r1, [pc, #292]	@ (800237c <HAL_RCC_OscConfig+0x34c>)
 8002258:	400a      	ands	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe fd18 	bl	8000c90 <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002266:	f7fe fd13 	bl	8000c90 <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1d8      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002278:	4b38      	ldr	r3, [pc, #224]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4013      	ands	r3, r2
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x236>
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002286:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2208      	movs	r2, #8
 800228e:	4013      	ands	r3, r2
 8002290:	d047      	beq.n	8002322 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002292:	4b32      	ldr	r3, [pc, #200]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2238      	movs	r2, #56	@ 0x38
 8002298:	4013      	ands	r3, r2
 800229a:	2b18      	cmp	r3, #24
 800229c:	d10a      	bne.n	80022b4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800229e:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d03c      	beq.n	8002322 <HAL_RCC_OscConfig+0x2f2>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d138      	bne.n	8002322 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e1ba      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d019      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80022bc:	4b27      	ldr	r3, [pc, #156]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80022be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022c0:	4b26      	ldr	r3, [pc, #152]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	430a      	orrs	r2, r1
 80022c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fce2 	bl	8000c90 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d2:	f7fe fcdd 	bl	8000c90 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1a2      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e4:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80022e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d0f1      	beq.n	80022d2 <HAL_RCC_OscConfig+0x2a2>
 80022ee:	e018      	b.n	8002322 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80022f0:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80022f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022f4:	4b19      	ldr	r3, [pc, #100]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	438a      	bics	r2, r1
 80022fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fcc8 	bl	8000c90 <HAL_GetTick>
 8002300:	0003      	movs	r3, r0
 8002302:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe fcc3 	bl	8000c90 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e188      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002318:	4b10      	ldr	r3, [pc, #64]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 800231a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231c:	2202      	movs	r2, #2
 800231e:	4013      	ands	r3, r2
 8002320:	d1f1      	bne.n	8002306 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2204      	movs	r2, #4
 8002328:	4013      	ands	r3, r2
 800232a:	d100      	bne.n	800232e <HAL_RCC_OscConfig+0x2fe>
 800232c:	e0c6      	b.n	80024bc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232e:	231f      	movs	r3, #31
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2238      	movs	r2, #56	@ 0x38
 800233c:	4013      	ands	r3, r2
 800233e:	2b20      	cmp	r3, #32
 8002340:	d11e      	bne.n	8002380 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_RCC_OscConfig+0x32c>)
 8002344:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002346:	2202      	movs	r2, #2
 8002348:	4013      	ands	r3, r2
 800234a:	d100      	bne.n	800234e <HAL_RCC_OscConfig+0x31e>
 800234c:	e0b6      	b.n	80024bc <HAL_RCC_OscConfig+0x48c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d000      	beq.n	8002358 <HAL_RCC_OscConfig+0x328>
 8002356:	e0b1      	b.n	80024bc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e166      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
 800235c:	40021000 	.word	0x40021000
 8002360:	fffeffff 	.word	0xfffeffff
 8002364:	fffbffff 	.word	0xfffbffff
 8002368:	ffff80ff 	.word	0xffff80ff
 800236c:	ffffc7ff 	.word	0xffffc7ff
 8002370:	00f42400 	.word	0x00f42400
 8002374:	20000000 	.word	0x20000000
 8002378:	20000004 	.word	0x20000004
 800237c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002380:	4bac      	ldr	r3, [pc, #688]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002384:	2380      	movs	r3, #128	@ 0x80
 8002386:	055b      	lsls	r3, r3, #21
 8002388:	4013      	ands	r3, r2
 800238a:	d101      	bne.n	8002390 <HAL_RCC_OscConfig+0x360>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x362>
 8002390:	2300      	movs	r3, #0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d011      	beq.n	80023ba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4ba7      	ldr	r3, [pc, #668]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002398:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800239a:	4ba6      	ldr	r3, [pc, #664]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 800239c:	2180      	movs	r1, #128	@ 0x80
 800239e:	0549      	lsls	r1, r1, #21
 80023a0:	430a      	orrs	r2, r1
 80023a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023a4:	4ba3      	ldr	r3, [pc, #652]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 80023a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	055b      	lsls	r3, r3, #21
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80023b2:	231f      	movs	r3, #31
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ba:	4b9f      	ldr	r3, [pc, #636]	@ (8002638 <HAL_RCC_OscConfig+0x608>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	@ 0x80
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	d11a      	bne.n	80023fc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c6:	4b9c      	ldr	r3, [pc, #624]	@ (8002638 <HAL_RCC_OscConfig+0x608>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b9b      	ldr	r3, [pc, #620]	@ (8002638 <HAL_RCC_OscConfig+0x608>)
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0049      	lsls	r1, r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fc5c 	bl	8000c90 <HAL_GetTick>
 80023d8:	0003      	movs	r3, r0
 80023da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7fe fc57 	bl	8000c90 <HAL_GetTick>
 80023e2:	0002      	movs	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e11c      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f0:	4b91      	ldr	r3, [pc, #580]	@ (8002638 <HAL_RCC_OscConfig+0x608>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2380      	movs	r3, #128	@ 0x80
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x3e2>
 8002404:	4b8b      	ldr	r3, [pc, #556]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002406:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002408:	4b8a      	ldr	r3, [pc, #552]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 800240a:	2101      	movs	r1, #1
 800240c:	430a      	orrs	r2, r1
 800240e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002410:	e01c      	b.n	800244c <HAL_RCC_OscConfig+0x41c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b05      	cmp	r3, #5
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x404>
 800241a:	4b86      	ldr	r3, [pc, #536]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 800241c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800241e:	4b85      	ldr	r3, [pc, #532]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002420:	2104      	movs	r1, #4
 8002422:	430a      	orrs	r2, r1
 8002424:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002426:	4b83      	ldr	r3, [pc, #524]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002428:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800242a:	4b82      	ldr	r3, [pc, #520]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 800242c:	2101      	movs	r1, #1
 800242e:	430a      	orrs	r2, r1
 8002430:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0x41c>
 8002434:	4b7f      	ldr	r3, [pc, #508]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002436:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002438:	4b7e      	ldr	r3, [pc, #504]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 800243a:	2101      	movs	r1, #1
 800243c:	438a      	bics	r2, r1
 800243e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002440:	4b7c      	ldr	r3, [pc, #496]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002442:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002444:	4b7b      	ldr	r3, [pc, #492]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002446:	2104      	movs	r1, #4
 8002448:	438a      	bics	r2, r1
 800244a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d014      	beq.n	800247e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fc1c 	bl	8000c90 <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245c:	e009      	b.n	8002472 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7fe fc17 	bl	8000c90 <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	4a74      	ldr	r2, [pc, #464]	@ (800263c <HAL_RCC_OscConfig+0x60c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e0db      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002472:	4b70      	ldr	r3, [pc, #448]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002476:	2202      	movs	r2, #2
 8002478:	4013      	ands	r3, r2
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x42e>
 800247c:	e013      	b.n	80024a6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7fe fc07 	bl	8000c90 <HAL_GetTick>
 8002482:	0003      	movs	r3, r0
 8002484:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002486:	e009      	b.n	800249c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7fe fc02 	bl	8000c90 <HAL_GetTick>
 800248c:	0002      	movs	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	4a6a      	ldr	r2, [pc, #424]	@ (800263c <HAL_RCC_OscConfig+0x60c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e0c6      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800249c:	4b65      	ldr	r3, [pc, #404]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 800249e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024a6:	231f      	movs	r3, #31
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80024b0:	4b60      	ldr	r3, [pc, #384]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 80024b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024b4:	4b5f      	ldr	r3, [pc, #380]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 80024b6:	4962      	ldr	r1, [pc, #392]	@ (8002640 <HAL_RCC_OscConfig+0x610>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d100      	bne.n	80024c6 <HAL_RCC_OscConfig+0x496>
 80024c4:	e0b0      	b.n	8002628 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2238      	movs	r2, #56	@ 0x38
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d100      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4a4>
 80024d2:	e078      	b.n	80025c6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d153      	bne.n	8002584 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024dc:	4b55      	ldr	r3, [pc, #340]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b54      	ldr	r3, [pc, #336]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 80024e2:	4958      	ldr	r1, [pc, #352]	@ (8002644 <HAL_RCC_OscConfig+0x614>)
 80024e4:	400a      	ands	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fbd2 	bl	8000c90 <HAL_GetTick>
 80024ec:	0003      	movs	r3, r0
 80024ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe fbcd 	bl	8000c90 <HAL_GetTick>
 80024f6:	0002      	movs	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e092      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002504:	4b4b      	ldr	r3, [pc, #300]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	049b      	lsls	r3, r3, #18
 800250c:	4013      	ands	r3, r2
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002510:	4b48      	ldr	r3, [pc, #288]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a4c      	ldr	r2, [pc, #304]	@ (8002648 <HAL_RCC_OscConfig+0x618>)
 8002516:	4013      	ands	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1a      	ldr	r2, [r3, #32]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	431a      	orrs	r2, r3
 8002538:	4b3e      	ldr	r3, [pc, #248]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 800253a:	430a      	orrs	r2, r1
 800253c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253e:	4b3d      	ldr	r3, [pc, #244]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b3c      	ldr	r3, [pc, #240]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002544:	2180      	movs	r1, #128	@ 0x80
 8002546:	0449      	lsls	r1, r1, #17
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800254c:	4b39      	ldr	r3, [pc, #228]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	4b38      	ldr	r3, [pc, #224]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002552:	2180      	movs	r1, #128	@ 0x80
 8002554:	0549      	lsls	r1, r1, #21
 8002556:	430a      	orrs	r2, r1
 8002558:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe fb99 	bl	8000c90 <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fb94 	bl	8000c90 <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e059      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002576:	4b2f      	ldr	r3, [pc, #188]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	049b      	lsls	r3, r3, #18
 800257e:	4013      	ands	r3, r2
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x534>
 8002582:	e051      	b.n	8002628 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002584:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b2a      	ldr	r3, [pc, #168]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 800258a:	492e      	ldr	r1, [pc, #184]	@ (8002644 <HAL_RCC_OscConfig+0x614>)
 800258c:	400a      	ands	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fb7e 	bl	8000c90 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe fb79 	bl	8000c90 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e03e      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ac:	4b21      	ldr	r3, [pc, #132]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	049b      	lsls	r3, r3, #18
 80025b4:	4013      	ands	r3, r2
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80025b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 80025be:	4923      	ldr	r1, [pc, #140]	@ (800264c <HAL_RCC_OscConfig+0x61c>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	e030      	b.n	8002628 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e02b      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80025d2:	4b18      	ldr	r3, [pc, #96]	@ (8002634 <HAL_RCC_OscConfig+0x604>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2203      	movs	r2, #3
 80025dc:	401a      	ands	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d11e      	bne.n	8002624 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2270      	movs	r2, #112	@ 0x70
 80025ea:	401a      	ands	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d117      	bne.n	8002624 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	23fe      	movs	r3, #254	@ 0xfe
 80025f8:	01db      	lsls	r3, r3, #7
 80025fa:	401a      	ands	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002600:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002602:	429a      	cmp	r2, r3
 8002604:	d10e      	bne.n	8002624 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	23f8      	movs	r3, #248	@ 0xf8
 800260a:	039b      	lsls	r3, r3, #14
 800260c:	401a      	ands	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d106      	bne.n	8002624 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	0f5b      	lsrs	r3, r3, #29
 800261a:	075a      	lsls	r2, r3, #29
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b008      	add	sp, #32
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	40021000 	.word	0x40021000
 8002638:	40007000 	.word	0x40007000
 800263c:	00001388 	.word	0x00001388
 8002640:	efffffff 	.word	0xefffffff
 8002644:	feffffff 	.word	0xfeffffff
 8002648:	1fc1808c 	.word	0x1fc1808c
 800264c:	effefffc 	.word	0xeffefffc

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0e9      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b76      	ldr	r3, [pc, #472]	@ (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2207      	movs	r2, #7
 800266a:	4013      	ands	r3, r2
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d91e      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b73      	ldr	r3, [pc, #460]	@ (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2207      	movs	r2, #7
 8002678:	4393      	bics	r3, r2
 800267a:	0019      	movs	r1, r3
 800267c:	4b70      	ldr	r3, [pc, #448]	@ (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002684:	f7fe fb04 	bl	8000c90 <HAL_GetTick>
 8002688:	0003      	movs	r3, r0
 800268a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800268c:	e009      	b.n	80026a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800268e:	f7fe faff 	bl	8000c90 <HAL_GetTick>
 8002692:	0002      	movs	r2, r0
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	4a6a      	ldr	r2, [pc, #424]	@ (8002844 <HAL_RCC_ClockConfig+0x1f4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0ca      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026a2:	4b67      	ldr	r3, [pc, #412]	@ (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2207      	movs	r2, #7
 80026a8:	4013      	ands	r3, r2
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d1ee      	bne.n	800268e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2202      	movs	r2, #2
 80026b6:	4013      	ands	r3, r2
 80026b8:	d015      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2204      	movs	r2, #4
 80026c0:	4013      	ands	r3, r2
 80026c2:	d006      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026c4:	4b60      	ldr	r3, [pc, #384]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80026ca:	21e0      	movs	r1, #224	@ 0xe0
 80026cc:	01c9      	lsls	r1, r1, #7
 80026ce:	430a      	orrs	r2, r1
 80026d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4a5d      	ldr	r2, [pc, #372]	@ (800284c <HAL_RCC_ClockConfig+0x1fc>)
 80026d8:	4013      	ands	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	4b59      	ldr	r3, [pc, #356]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80026e2:	430a      	orrs	r2, r1
 80026e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2201      	movs	r2, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d057      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f8:	4b53      	ldr	r3, [pc, #332]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	029b      	lsls	r3, r3, #10
 8002700:	4013      	ands	r3, r2
 8002702:	d12b      	bne.n	800275c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e097      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d107      	bne.n	8002720 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002710:	4b4d      	ldr	r3, [pc, #308]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	2380      	movs	r3, #128	@ 0x80
 8002716:	049b      	lsls	r3, r3, #18
 8002718:	4013      	ands	r3, r2
 800271a:	d11f      	bne.n	800275c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e08b      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002728:	4b47      	ldr	r3, [pc, #284]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4013      	ands	r3, r2
 8002732:	d113      	bne.n	800275c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e07f      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d106      	bne.n	800274e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002740:	4b41      	ldr	r3, [pc, #260]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002744:	2202      	movs	r2, #2
 8002746:	4013      	ands	r3, r2
 8002748:	d108      	bne.n	800275c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e074      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	4b3e      	ldr	r3, [pc, #248]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002752:	2202      	movs	r2, #2
 8002754:	4013      	ands	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e06d      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800275c:	4b3a      	ldr	r3, [pc, #232]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2207      	movs	r2, #7
 8002762:	4393      	bics	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4b37      	ldr	r3, [pc, #220]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 800276c:	430a      	orrs	r2, r1
 800276e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002770:	f7fe fa8e 	bl	8000c90 <HAL_GetTick>
 8002774:	0003      	movs	r3, r0
 8002776:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002778:	e009      	b.n	800278e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277a:	f7fe fa89 	bl	8000c90 <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	4a2f      	ldr	r2, [pc, #188]	@ (8002844 <HAL_RCC_ClockConfig+0x1f4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e054      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2e      	ldr	r3, [pc, #184]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2238      	movs	r2, #56	@ 0x38
 8002794:	401a      	ands	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	429a      	cmp	r2, r3
 800279e:	d1ec      	bne.n	800277a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b27      	ldr	r3, [pc, #156]	@ (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2207      	movs	r2, #7
 80027a6:	4013      	ands	r3, r2
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d21e      	bcs.n	80027ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b24      	ldr	r3, [pc, #144]	@ (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2207      	movs	r2, #7
 80027b4:	4393      	bics	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	4b21      	ldr	r3, [pc, #132]	@ (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027c0:	f7fe fa66 	bl	8000c90 <HAL_GetTick>
 80027c4:	0003      	movs	r3, r0
 80027c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027c8:	e009      	b.n	80027de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ca:	f7fe fa61 	bl	8000c90 <HAL_GetTick>
 80027ce:	0002      	movs	r2, r0
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002844 <HAL_RCC_ClockConfig+0x1f4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e02c      	b.n	8002838 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027de:	4b18      	ldr	r3, [pc, #96]	@ (8002840 <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2207      	movs	r2, #7
 80027e4:	4013      	ands	r3, r2
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1ee      	bne.n	80027ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2204      	movs	r2, #4
 80027f2:	4013      	ands	r3, r2
 80027f4:	d009      	beq.n	800280a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027f6:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4a15      	ldr	r2, [pc, #84]	@ (8002850 <HAL_RCC_ClockConfig+0x200>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	0019      	movs	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002806:	430a      	orrs	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800280a:	f000 f829 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 800280e:	0001      	movs	r1, r0
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	220f      	movs	r2, #15
 8002818:	401a      	ands	r2, r3
 800281a:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <HAL_RCC_ClockConfig+0x204>)
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	58d3      	ldr	r3, [r2, r3]
 8002820:	221f      	movs	r2, #31
 8002822:	4013      	ands	r3, r2
 8002824:	000a      	movs	r2, r1
 8002826:	40da      	lsrs	r2, r3
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCC_ClockConfig+0x208>)
 800282a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800282c:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <HAL_RCC_ClockConfig+0x20c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0018      	movs	r0, r3
 8002832:	f7fe f9d1 	bl	8000bd8 <HAL_InitTick>
 8002836:	0003      	movs	r3, r0
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	b004      	add	sp, #16
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40022000 	.word	0x40022000
 8002844:	00001388 	.word	0x00001388
 8002848:	40021000 	.word	0x40021000
 800284c:	fffff0ff 	.word	0xfffff0ff
 8002850:	ffff8fff 	.word	0xffff8fff
 8002854:	08006840 	.word	0x08006840
 8002858:	20000000 	.word	0x20000000
 800285c:	20000004 	.word	0x20000004

08002860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002866:	4b3c      	ldr	r3, [pc, #240]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2238      	movs	r2, #56	@ 0x38
 800286c:	4013      	ands	r3, r2
 800286e:	d10f      	bne.n	8002890 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002870:	4b39      	ldr	r3, [pc, #228]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0adb      	lsrs	r3, r3, #11
 8002876:	2207      	movs	r2, #7
 8002878:	4013      	ands	r3, r2
 800287a:	2201      	movs	r2, #1
 800287c:	409a      	lsls	r2, r3
 800287e:	0013      	movs	r3, r2
 8002880:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002882:	6839      	ldr	r1, [r7, #0]
 8002884:	4835      	ldr	r0, [pc, #212]	@ (800295c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002886:	f7fd fc4d 	bl	8000124 <__udivsi3>
 800288a:	0003      	movs	r3, r0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	e05d      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002890:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2238      	movs	r2, #56	@ 0x38
 8002896:	4013      	ands	r3, r2
 8002898:	2b08      	cmp	r3, #8
 800289a:	d102      	bne.n	80028a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800289c:	4b30      	ldr	r3, [pc, #192]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x100>)
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	e054      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2238      	movs	r2, #56	@ 0x38
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d138      	bne.n	8002920 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80028ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2203      	movs	r2, #3
 80028b4:	4013      	ands	r3, r2
 80028b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b8:	4b27      	ldr	r3, [pc, #156]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	2207      	movs	r2, #7
 80028c0:	4013      	ands	r3, r2
 80028c2:	3301      	adds	r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	4824      	ldr	r0, [pc, #144]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x100>)
 80028d0:	f7fd fc28 	bl	8000124 <__udivsi3>
 80028d4:	0003      	movs	r3, r0
 80028d6:	0019      	movs	r1, r3
 80028d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	227f      	movs	r2, #127	@ 0x7f
 80028e0:	4013      	ands	r3, r2
 80028e2:	434b      	muls	r3, r1
 80028e4:	617b      	str	r3, [r7, #20]
        break;
 80028e6:	e00d      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	481c      	ldr	r0, [pc, #112]	@ (800295c <HAL_RCC_GetSysClockFreq+0xfc>)
 80028ec:	f7fd fc1a 	bl	8000124 <__udivsi3>
 80028f0:	0003      	movs	r3, r0
 80028f2:	0019      	movs	r1, r3
 80028f4:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	227f      	movs	r2, #127	@ 0x7f
 80028fc:	4013      	ands	r3, r2
 80028fe:	434b      	muls	r3, r1
 8002900:	617b      	str	r3, [r7, #20]
        break;
 8002902:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002904:	4b14      	ldr	r3, [pc, #80]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0f5b      	lsrs	r3, r3, #29
 800290a:	2207      	movs	r2, #7
 800290c:	4013      	ands	r3, r2
 800290e:	3301      	adds	r3, #1
 8002910:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f7fd fc05 	bl	8000124 <__udivsi3>
 800291a:	0003      	movs	r3, r0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	e015      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002920:	4b0d      	ldr	r3, [pc, #52]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2238      	movs	r2, #56	@ 0x38
 8002926:	4013      	ands	r3, r2
 8002928:	2b20      	cmp	r3, #32
 800292a:	d103      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	e00b      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002934:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2238      	movs	r2, #56	@ 0x38
 800293a:	4013      	ands	r3, r2
 800293c:	2b18      	cmp	r3, #24
 800293e:	d103      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002940:	23fa      	movs	r3, #250	@ 0xfa
 8002942:	01db      	lsls	r3, r3, #7
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	e001      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800294c:	693b      	ldr	r3, [r7, #16]
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b006      	add	sp, #24
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	40021000 	.word	0x40021000
 800295c:	00f42400 	.word	0x00f42400
 8002960:	007a1200 	.word	0x007a1200

08002964 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b02      	ldr	r3, [pc, #8]	@ (8002974 <HAL_RCC_GetHCLKFreq+0x10>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	20000000 	.word	0x20000000

08002978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002978:	b5b0      	push	{r4, r5, r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800297c:	f7ff fff2 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002980:	0004      	movs	r4, r0
 8002982:	f7ff fb49 	bl	8002018 <LL_RCC_GetAPB1Prescaler>
 8002986:	0003      	movs	r3, r0
 8002988:	0b1a      	lsrs	r2, r3, #12
 800298a:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	58d3      	ldr	r3, [r2, r3]
 8002990:	221f      	movs	r2, #31
 8002992:	4013      	ands	r3, r2
 8002994:	40dc      	lsrs	r4, r3
 8002996:	0023      	movs	r3, r4
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	bdb0      	pop	{r4, r5, r7, pc}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	08006880 	.word	0x08006880

080029a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80029ac:	2313      	movs	r3, #19
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b4:	2312      	movs	r3, #18
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	@ 0x80
 80029c2:	029b      	lsls	r3, r3, #10
 80029c4:	4013      	ands	r3, r2
 80029c6:	d100      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x26>
 80029c8:	e0a3      	b.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2011      	movs	r0, #17
 80029cc:	183b      	adds	r3, r7, r0
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d2:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029d6:	2380      	movs	r3, #128	@ 0x80
 80029d8:	055b      	lsls	r3, r3, #21
 80029da:	4013      	ands	r3, r2
 80029dc:	d110      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	4b7c      	ldr	r3, [pc, #496]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029e2:	4b7b      	ldr	r3, [pc, #492]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029e4:	2180      	movs	r1, #128	@ 0x80
 80029e6:	0549      	lsls	r1, r1, #21
 80029e8:	430a      	orrs	r2, r1
 80029ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029ec:	4b78      	ldr	r3, [pc, #480]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80029ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	055b      	lsls	r3, r3, #21
 80029f4:	4013      	ands	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fa:	183b      	adds	r3, r7, r0
 80029fc:	2201      	movs	r2, #1
 80029fe:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a00:	4b74      	ldr	r3, [pc, #464]	@ (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b73      	ldr	r3, [pc, #460]	@ (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a06:	2180      	movs	r1, #128	@ 0x80
 8002a08:	0049      	lsls	r1, r1, #1
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe f93f 	bl	8000c90 <HAL_GetTick>
 8002a12:	0003      	movs	r3, r0
 8002a14:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a16:	e00b      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a18:	f7fe f93a 	bl	8000c90 <HAL_GetTick>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d904      	bls.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a26:	2313      	movs	r3, #19
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	701a      	strb	r2, [r3, #0]
        break;
 8002a2e:	e005      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a30:	4b68      	ldr	r3, [pc, #416]	@ (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	@ 0x80
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d0ed      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002a3c:	2313      	movs	r3, #19
 8002a3e:	18fb      	adds	r3, r7, r3
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d154      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a46:	4b62      	ldr	r3, [pc, #392]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a4a:	23c0      	movs	r3, #192	@ 0xc0
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d019      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d014      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a62:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a66:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a6c:	4b58      	ldr	r3, [pc, #352]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a70:	4b57      	ldr	r3, [pc, #348]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a72:	2180      	movs	r1, #128	@ 0x80
 8002a74:	0249      	lsls	r1, r1, #9
 8002a76:	430a      	orrs	r2, r1
 8002a78:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a7a:	4b55      	ldr	r3, [pc, #340]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a7e:	4b54      	ldr	r3, [pc, #336]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a80:	4956      	ldr	r1, [pc, #344]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002a82:	400a      	ands	r2, r1
 8002a84:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a86:	4b52      	ldr	r3, [pc, #328]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4013      	ands	r3, r2
 8002a92:	d016      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7fe f8fc 	bl	8000c90 <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9c:	e00c      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe f8f7 	bl	8000c90 <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	4a4d      	ldr	r2, [pc, #308]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d904      	bls.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002aae:	2313      	movs	r3, #19
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	701a      	strb	r2, [r3, #0]
            break;
 8002ab6:	e004      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab8:	4b45      	ldr	r3, [pc, #276]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	2202      	movs	r2, #2
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d0ed      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ac2:	2313      	movs	r3, #19
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002acc:	4b40      	ldr	r3, [pc, #256]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad0:	4a41      	ldr	r2, [pc, #260]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002adc:	430a      	orrs	r2, r1
 8002ade:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ae0:	e00c      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ae2:	2312      	movs	r3, #18
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	2213      	movs	r2, #19
 8002ae8:	18ba      	adds	r2, r7, r2
 8002aea:	7812      	ldrb	r2, [r2, #0]
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e005      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af0:	2312      	movs	r3, #18
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2213      	movs	r2, #19
 8002af6:	18ba      	adds	r2, r7, r2
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002afc:	2311      	movs	r3, #17
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4b32      	ldr	r3, [pc, #200]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b0a:	4b31      	ldr	r3, [pc, #196]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b0c:	4935      	ldr	r1, [pc, #212]	@ (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b20:	2203      	movs	r2, #3
 8002b22:	4393      	bics	r3, r2
 8002b24:	0019      	movs	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4b29      	ldr	r3, [pc, #164]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2220      	movs	r2, #32
 8002b36:	4013      	ands	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b3a:	4b25      	ldr	r3, [pc, #148]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4b21      	ldr	r3, [pc, #132]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	01db      	lsls	r3, r3, #7
 8002b56:	4013      	ands	r3, r2
 8002b58:	d015      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	0899      	lsrs	r1, r3, #2
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691a      	ldr	r2, [r3, #16]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	05db      	lsls	r3, r3, #23
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d106      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b78:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4b14      	ldr	r3, [pc, #80]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b7e:	2180      	movs	r1, #128	@ 0x80
 8002b80:	0249      	lsls	r1, r1, #9
 8002b82:	430a      	orrs	r2, r1
 8002b84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d016      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b92:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b96:	4a15      	ldr	r2, [pc, #84]	@ (8002bec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	01db      	lsls	r3, r3, #7
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d106      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002bb2:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bb8:	2180      	movs	r1, #128	@ 0x80
 8002bba:	0249      	lsls	r1, r1, #9
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002bc0:	2312      	movs	r3, #18
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b006      	add	sp, #24
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	fffffcff 	.word	0xfffffcff
 8002bdc:	fffeffff 	.word	0xfffeffff
 8002be0:	00001388 	.word	0x00001388
 8002be4:	efffffff 	.word	0xefffffff
 8002be8:	ffffcfff 	.word	0xffffcfff
 8002bec:	ffff3fff 	.word	0xffff3fff

08002bf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e04a      	b.n	8002c98 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	223d      	movs	r2, #61	@ 0x3d
 8002c06:	5c9b      	ldrb	r3, [r3, r2]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	223c      	movs	r2, #60	@ 0x3c
 8002c12:	2100      	movs	r1, #0
 8002c14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7fd fe59 	bl	80008d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	223d      	movs	r2, #61	@ 0x3d
 8002c22:	2102      	movs	r1, #2
 8002c24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	0019      	movs	r1, r3
 8002c30:	0010      	movs	r0, r2
 8002c32:	f000 fb3d 	bl	80032b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2248      	movs	r2, #72	@ 0x48
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	223e      	movs	r2, #62	@ 0x3e
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	223f      	movs	r2, #63	@ 0x3f
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2240      	movs	r2, #64	@ 0x40
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2241      	movs	r2, #65	@ 0x41
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2242      	movs	r2, #66	@ 0x42
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2243      	movs	r2, #67	@ 0x43
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2244      	movs	r2, #68	@ 0x44
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2245      	movs	r2, #69	@ 0x45
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2246      	movs	r2, #70	@ 0x46
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2247      	movs	r2, #71	@ 0x47
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	223d      	movs	r2, #61	@ 0x3d
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b002      	add	sp, #8
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0x22>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	223e      	movs	r2, #62	@ 0x3e
 8002cb4:	5c9b      	ldrb	r3, [r3, r2]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	4193      	sbcs	r3, r2
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e037      	b.n	8002d32 <HAL_TIM_PWM_Start+0x92>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d108      	bne.n	8002cda <HAL_TIM_PWM_Start+0x3a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	223f      	movs	r2, #63	@ 0x3f
 8002ccc:	5c9b      	ldrb	r3, [r3, r2]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	1e5a      	subs	r2, r3, #1
 8002cd4:	4193      	sbcs	r3, r2
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	e02b      	b.n	8002d32 <HAL_TIM_PWM_Start+0x92>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d108      	bne.n	8002cf2 <HAL_TIM_PWM_Start+0x52>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2240      	movs	r2, #64	@ 0x40
 8002ce4:	5c9b      	ldrb	r3, [r3, r2]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	4193      	sbcs	r3, r2
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	e01f      	b.n	8002d32 <HAL_TIM_PWM_Start+0x92>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d108      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x6a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2241      	movs	r2, #65	@ 0x41
 8002cfc:	5c9b      	ldrb	r3, [r3, r2]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	1e5a      	subs	r2, r3, #1
 8002d04:	4193      	sbcs	r3, r2
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	e013      	b.n	8002d32 <HAL_TIM_PWM_Start+0x92>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d108      	bne.n	8002d22 <HAL_TIM_PWM_Start+0x82>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2242      	movs	r2, #66	@ 0x42
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	1e5a      	subs	r2, r3, #1
 8002d1c:	4193      	sbcs	r3, r2
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e007      	b.n	8002d32 <HAL_TIM_PWM_Start+0x92>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2243      	movs	r2, #67	@ 0x43
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	1e5a      	subs	r2, r3, #1
 8002d2e:	4193      	sbcs	r3, r2
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e07b      	b.n	8002e32 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_PWM_Start+0xaa>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	223e      	movs	r2, #62	@ 0x3e
 8002d44:	2102      	movs	r1, #2
 8002d46:	5499      	strb	r1, [r3, r2]
 8002d48:	e023      	b.n	8002d92 <HAL_TIM_PWM_Start+0xf2>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_PWM_Start+0xba>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	223f      	movs	r2, #63	@ 0x3f
 8002d54:	2102      	movs	r1, #2
 8002d56:	5499      	strb	r1, [r3, r2]
 8002d58:	e01b      	b.n	8002d92 <HAL_TIM_PWM_Start+0xf2>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_PWM_Start+0xca>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2240      	movs	r2, #64	@ 0x40
 8002d64:	2102      	movs	r1, #2
 8002d66:	5499      	strb	r1, [r3, r2]
 8002d68:	e013      	b.n	8002d92 <HAL_TIM_PWM_Start+0xf2>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_PWM_Start+0xda>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2241      	movs	r2, #65	@ 0x41
 8002d74:	2102      	movs	r1, #2
 8002d76:	5499      	strb	r1, [r3, r2]
 8002d78:	e00b      	b.n	8002d92 <HAL_TIM_PWM_Start+0xf2>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d104      	bne.n	8002d8a <HAL_TIM_PWM_Start+0xea>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2242      	movs	r2, #66	@ 0x42
 8002d84:	2102      	movs	r1, #2
 8002d86:	5499      	strb	r1, [r3, r2]
 8002d88:	e003      	b.n	8002d92 <HAL_TIM_PWM_Start+0xf2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2243      	movs	r2, #67	@ 0x43
 8002d8e:	2102      	movs	r1, #2
 8002d90:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 fd9e 	bl	80038dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a25      	ldr	r2, [pc, #148]	@ (8002e3c <HAL_TIM_PWM_Start+0x19c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_TIM_PWM_Start+0x11e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a24      	ldr	r2, [pc, #144]	@ (8002e40 <HAL_TIM_PWM_Start+0x1a0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_TIM_PWM_Start+0x11e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a22      	ldr	r2, [pc, #136]	@ (8002e44 <HAL_TIM_PWM_Start+0x1a4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_TIM_PWM_Start+0x122>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_TIM_PWM_Start+0x124>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2180      	movs	r1, #128	@ 0x80
 8002dd4:	0209      	lsls	r1, r1, #8
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a17      	ldr	r2, [pc, #92]	@ (8002e3c <HAL_TIM_PWM_Start+0x19c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_TIM_PWM_Start+0x14e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a17      	ldr	r2, [pc, #92]	@ (8002e48 <HAL_TIM_PWM_Start+0x1a8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d116      	bne.n	8002e1c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a15      	ldr	r2, [pc, #84]	@ (8002e4c <HAL_TIM_PWM_Start+0x1ac>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b06      	cmp	r3, #6
 8002dfe:	d016      	beq.n	8002e2e <HAL_TIM_PWM_Start+0x18e>
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	2380      	movs	r3, #128	@ 0x80
 8002e04:	025b      	lsls	r3, r3, #9
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d011      	beq.n	8002e2e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1a:	e008      	b.n	8002e2e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2101      	movs	r1, #1
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e000      	b.n	8002e30 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b004      	add	sp, #16
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40014400 	.word	0x40014400
 8002e44:	40014800 	.word	0x40014800
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	00010007 	.word	0x00010007

08002e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d021      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2202      	movs	r2, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	d01d      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	4252      	negs	r2, r2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2203      	movs	r2, #3
 8002e90:	4013      	ands	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 f9f2 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e007      	b.n	8002eae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 f9e5 	bl	8003270 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 f9f1 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d022      	beq.n	8002f02 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d01e      	beq.n	8002f02 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2205      	movs	r2, #5
 8002eca:	4252      	negs	r2, r2
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	23c0      	movs	r3, #192	@ 0xc0
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	f000 f9cb 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8002eea:	e007      	b.n	8002efc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 f9be 	bl	8003270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f000 f9ca 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2208      	movs	r2, #8
 8002f06:	4013      	ands	r3, r2
 8002f08:	d021      	beq.n	8002f4e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d01d      	beq.n	8002f4e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2209      	movs	r2, #9
 8002f18:	4252      	negs	r2, r2
 8002f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 f9a5 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8002f36:	e007      	b.n	8002f48 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 f998 	bl	8003270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f9a4 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2210      	movs	r2, #16
 8002f52:	4013      	ands	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d01e      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2211      	movs	r2, #17
 8002f64:	4252      	negs	r2, r2
 8002f66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	23c0      	movs	r3, #192	@ 0xc0
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f000 f97e 	bl	8003280 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e007      	b.n	8002f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f971 	bl	8003270 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f97d 	bl	8003290 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d00c      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d008      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	4252      	negs	r2, r2
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f951 	bl	8003260 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2280      	movs	r2, #128	@ 0x80
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d104      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	019b      	lsls	r3, r3, #6
 8002fcc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fce:	d00b      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2280      	movs	r2, #128	@ 0x80
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8003058 <HAL_TIM_IRQHandler+0x208>)
 8002fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 fd08 	bl	80039f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d00b      	beq.n	800300a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d007      	beq.n	800300a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a17      	ldr	r2, [pc, #92]	@ (800305c <HAL_TIM_IRQHandler+0x20c>)
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 fcff 	bl	8003a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2240      	movs	r2, #64	@ 0x40
 800300e:	4013      	ands	r3, r2
 8003010:	d00c      	beq.n	800302c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2240      	movs	r2, #64	@ 0x40
 8003016:	4013      	ands	r3, r2
 8003018:	d008      	beq.n	800302c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2241      	movs	r2, #65	@ 0x41
 8003020:	4252      	negs	r2, r2
 8003022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f000 f93a 	bl	80032a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2220      	movs	r2, #32
 8003030:	4013      	ands	r3, r2
 8003032:	d00c      	beq.n	800304e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	4013      	ands	r3, r2
 800303a:	d008      	beq.n	800304e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2221      	movs	r2, #33	@ 0x21
 8003042:	4252      	negs	r2, r2
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	0018      	movs	r0, r3
 800304a:	f000 fccd 	bl	80039e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b004      	add	sp, #16
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	ffffdf7f 	.word	0xffffdf7f
 800305c:	fffffeff 	.word	0xfffffeff

08003060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800306c:	2317      	movs	r3, #23
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	223c      	movs	r2, #60	@ 0x3c
 8003078:	5c9b      	ldrb	r3, [r3, r2]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_TIM_PWM_ConfigChannel+0x22>
 800307e:	2302      	movs	r3, #2
 8003080:	e0e5      	b.n	800324e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	223c      	movs	r2, #60	@ 0x3c
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b14      	cmp	r3, #20
 800308e:	d900      	bls.n	8003092 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003090:	e0d1      	b.n	8003236 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	009a      	lsls	r2, r3, #2
 8003096:	4b70      	ldr	r3, [pc, #448]	@ (8003258 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003098:	18d3      	adds	r3, r2, r3
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	0011      	movs	r1, r2
 80030a6:	0018      	movs	r0, r3
 80030a8:	f000 f97c 	bl	80033a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2108      	movs	r1, #8
 80030b8:	430a      	orrs	r2, r1
 80030ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699a      	ldr	r2, [r3, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2104      	movs	r1, #4
 80030c8:	438a      	bics	r2, r1
 80030ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6999      	ldr	r1, [r3, #24]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	619a      	str	r2, [r3, #24]
      break;
 80030de:	e0af      	b.n	8003240 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	0011      	movs	r1, r2
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 f9db 	bl	80034a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2180      	movs	r1, #128	@ 0x80
 80030fa:	0109      	lsls	r1, r1, #4
 80030fc:	430a      	orrs	r2, r1
 80030fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4954      	ldr	r1, [pc, #336]	@ (800325c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800310c:	400a      	ands	r2, r1
 800310e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6999      	ldr	r1, [r3, #24]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	021a      	lsls	r2, r3, #8
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	619a      	str	r2, [r3, #24]
      break;
 8003124:	e08c      	b.n	8003240 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	0011      	movs	r1, r2
 800312e:	0018      	movs	r0, r3
 8003130:	f000 fa36 	bl	80035a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2108      	movs	r1, #8
 8003140:	430a      	orrs	r2, r1
 8003142:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2104      	movs	r1, #4
 8003150:	438a      	bics	r2, r1
 8003152:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69d9      	ldr	r1, [r3, #28]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	691a      	ldr	r2, [r3, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	61da      	str	r2, [r3, #28]
      break;
 8003166:	e06b      	b.n	8003240 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	0011      	movs	r1, r2
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fa97 	bl	80036a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	0109      	lsls	r1, r1, #4
 8003184:	430a      	orrs	r2, r1
 8003186:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4932      	ldr	r1, [pc, #200]	@ (800325c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003194:	400a      	ands	r2, r1
 8003196:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69d9      	ldr	r1, [r3, #28]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	021a      	lsls	r2, r3, #8
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	61da      	str	r2, [r3, #28]
      break;
 80031ac:	e048      	b.n	8003240 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	0011      	movs	r1, r2
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 fad8 	bl	800376c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2108      	movs	r1, #8
 80031c8:	430a      	orrs	r2, r1
 80031ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2104      	movs	r1, #4
 80031d8:	438a      	bics	r2, r1
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031ee:	e027      	b.n	8003240 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	0011      	movs	r1, r2
 80031f8:	0018      	movs	r0, r3
 80031fa:	f000 fb11 	bl	8003820 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2180      	movs	r1, #128	@ 0x80
 800320a:	0109      	lsls	r1, r1, #4
 800320c:	430a      	orrs	r2, r1
 800320e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4910      	ldr	r1, [pc, #64]	@ (800325c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800321c:	400a      	ands	r2, r1
 800321e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	021a      	lsls	r2, r3, #8
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003234:	e004      	b.n	8003240 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003236:	2317      	movs	r3, #23
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
      break;
 800323e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	223c      	movs	r2, #60	@ 0x3c
 8003244:	2100      	movs	r1, #0
 8003246:	5499      	strb	r1, [r3, r2]

  return status;
 8003248:	2317      	movs	r3, #23
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	781b      	ldrb	r3, [r3, #0]
}
 800324e:	0018      	movs	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	b006      	add	sp, #24
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	080068a0 	.word	0x080068a0
 800325c:	fffffbff 	.word	0xfffffbff

08003260 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003268:	46c0      	nop			@ (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003278:	46c0      	nop			@ (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003288:	46c0      	nop			@ (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003298:	46c0      	nop			@ (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032a8:	46c0      	nop			@ (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b002      	add	sp, #8
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a32      	ldr	r2, [pc, #200]	@ (800338c <TIM_Base_SetConfig+0xdc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0x20>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a31      	ldr	r2, [pc, #196]	@ (8003390 <TIM_Base_SetConfig+0xe0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2270      	movs	r2, #112	@ 0x70
 80032d4:	4393      	bics	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a29      	ldr	r2, [pc, #164]	@ (800338c <TIM_Base_SetConfig+0xdc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_Base_SetConfig+0x5a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a28      	ldr	r2, [pc, #160]	@ (8003390 <TIM_Base_SetConfig+0xe0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0x5a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a27      	ldr	r2, [pc, #156]	@ (8003394 <TIM_Base_SetConfig+0xe4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0x5a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a26      	ldr	r2, [pc, #152]	@ (8003398 <TIM_Base_SetConfig+0xe8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0x5a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a25      	ldr	r2, [pc, #148]	@ (800339c <TIM_Base_SetConfig+0xec>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a24      	ldr	r2, [pc, #144]	@ (80033a0 <TIM_Base_SetConfig+0xf0>)
 800330e:	4013      	ands	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2280      	movs	r2, #128	@ 0x80
 8003320:	4393      	bics	r3, r2
 8003322:	001a      	movs	r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a11      	ldr	r2, [pc, #68]	@ (800338c <TIM_Base_SetConfig+0xdc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <TIM_Base_SetConfig+0xaa>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a12      	ldr	r2, [pc, #72]	@ (8003398 <TIM_Base_SetConfig+0xe8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_Base_SetConfig+0xaa>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a11      	ldr	r2, [pc, #68]	@ (800339c <TIM_Base_SetConfig+0xec>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d103      	bne.n	8003362 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2201      	movs	r2, #1
 800336e:	4013      	ands	r3, r2
 8003370:	2b01      	cmp	r3, #1
 8003372:	d106      	bne.n	8003382 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2201      	movs	r2, #1
 800337a:	4393      	bics	r3, r2
 800337c:	001a      	movs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]
  }
}
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	46bd      	mov	sp, r7
 8003386:	b004      	add	sp, #16
 8003388:	bd80      	pop	{r7, pc}
 800338a:	46c0      	nop			@ (mov r8, r8)
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40002000 	.word	0x40002000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800
 80033a0:	fffffcff 	.word	0xfffffcff

080033a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	2201      	movs	r2, #1
 80033ba:	4393      	bics	r3, r2
 80033bc:	001a      	movs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a2e      	ldr	r2, [pc, #184]	@ (800348c <TIM_OC1_SetConfig+0xe8>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2203      	movs	r2, #3
 80033da:	4393      	bics	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2202      	movs	r2, #2
 80033ec:	4393      	bics	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a24      	ldr	r2, [pc, #144]	@ (8003490 <TIM_OC1_SetConfig+0xec>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d007      	beq.n	8003412 <TIM_OC1_SetConfig+0x6e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a23      	ldr	r2, [pc, #140]	@ (8003494 <TIM_OC1_SetConfig+0xf0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <TIM_OC1_SetConfig+0x6e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a22      	ldr	r2, [pc, #136]	@ (8003498 <TIM_OC1_SetConfig+0xf4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10c      	bne.n	800342c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2208      	movs	r2, #8
 8003416:	4393      	bics	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2204      	movs	r2, #4
 8003428:	4393      	bics	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a18      	ldr	r2, [pc, #96]	@ (8003490 <TIM_OC1_SetConfig+0xec>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d007      	beq.n	8003444 <TIM_OC1_SetConfig+0xa0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a17      	ldr	r2, [pc, #92]	@ (8003494 <TIM_OC1_SetConfig+0xf0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_OC1_SetConfig+0xa0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a16      	ldr	r2, [pc, #88]	@ (8003498 <TIM_OC1_SetConfig+0xf4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d111      	bne.n	8003468 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4a15      	ldr	r2, [pc, #84]	@ (800349c <TIM_OC1_SetConfig+0xf8>)
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4a14      	ldr	r2, [pc, #80]	@ (80034a0 <TIM_OC1_SetConfig+0xfc>)
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	621a      	str	r2, [r3, #32]
}
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	46bd      	mov	sp, r7
 8003486:	b006      	add	sp, #24
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	fffeff8f 	.word	0xfffeff8f
 8003490:	40012c00 	.word	0x40012c00
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800
 800349c:	fffffeff 	.word	0xfffffeff
 80034a0:	fffffdff 	.word	0xfffffdff

080034a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	2210      	movs	r2, #16
 80034ba:	4393      	bics	r3, r2
 80034bc:	001a      	movs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003584 <TIM_OC2_SetConfig+0xe0>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003588 <TIM_OC2_SetConfig+0xe4>)
 80034da:	4013      	ands	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	021b      	lsls	r3, r3, #8
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2220      	movs	r2, #32
 80034ee:	4393      	bics	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a22      	ldr	r2, [pc, #136]	@ (800358c <TIM_OC2_SetConfig+0xe8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10d      	bne.n	8003522 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2280      	movs	r2, #128	@ 0x80
 800350a:	4393      	bics	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2240      	movs	r2, #64	@ 0x40
 800351e:	4393      	bics	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a19      	ldr	r2, [pc, #100]	@ (800358c <TIM_OC2_SetConfig+0xe8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <TIM_OC2_SetConfig+0x96>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <TIM_OC2_SetConfig+0xec>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_OC2_SetConfig+0x96>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a17      	ldr	r2, [pc, #92]	@ (8003594 <TIM_OC2_SetConfig+0xf0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d113      	bne.n	8003562 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4a16      	ldr	r2, [pc, #88]	@ (8003598 <TIM_OC2_SetConfig+0xf4>)
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4a15      	ldr	r2, [pc, #84]	@ (800359c <TIM_OC2_SetConfig+0xf8>)
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	621a      	str	r2, [r3, #32]
}
 800357c:	46c0      	nop			@ (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b006      	add	sp, #24
 8003582:	bd80      	pop	{r7, pc}
 8003584:	feff8fff 	.word	0xfeff8fff
 8003588:	fffffcff 	.word	0xfffffcff
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40014400 	.word	0x40014400
 8003594:	40014800 	.word	0x40014800
 8003598:	fffffbff 	.word	0xfffffbff
 800359c:	fffff7ff 	.word	0xfffff7ff

080035a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4a31      	ldr	r2, [pc, #196]	@ (800367c <TIM_OC3_SetConfig+0xdc>)
 80035b6:	401a      	ands	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003680 <TIM_OC3_SetConfig+0xe0>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2203      	movs	r2, #3
 80035d4:	4393      	bics	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	4a27      	ldr	r2, [pc, #156]	@ (8003684 <TIM_OC3_SetConfig+0xe4>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a23      	ldr	r2, [pc, #140]	@ (8003688 <TIM_OC3_SetConfig+0xe8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d10d      	bne.n	800361a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	4a22      	ldr	r2, [pc, #136]	@ (800368c <TIM_OC3_SetConfig+0xec>)
 8003602:	4013      	ands	r3, r2
 8003604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	4a1e      	ldr	r2, [pc, #120]	@ (8003690 <TIM_OC3_SetConfig+0xf0>)
 8003616:	4013      	ands	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a1a      	ldr	r2, [pc, #104]	@ (8003688 <TIM_OC3_SetConfig+0xe8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <TIM_OC3_SetConfig+0x92>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a1b      	ldr	r2, [pc, #108]	@ (8003694 <TIM_OC3_SetConfig+0xf4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <TIM_OC3_SetConfig+0x92>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a1a      	ldr	r2, [pc, #104]	@ (8003698 <TIM_OC3_SetConfig+0xf8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d113      	bne.n	800365a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4a19      	ldr	r2, [pc, #100]	@ (800369c <TIM_OC3_SetConfig+0xfc>)
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4a18      	ldr	r2, [pc, #96]	@ (80036a0 <TIM_OC3_SetConfig+0x100>)
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	621a      	str	r2, [r3, #32]
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b006      	add	sp, #24
 800367a:	bd80      	pop	{r7, pc}
 800367c:	fffffeff 	.word	0xfffffeff
 8003680:	fffeff8f 	.word	0xfffeff8f
 8003684:	fffffdff 	.word	0xfffffdff
 8003688:	40012c00 	.word	0x40012c00
 800368c:	fffff7ff 	.word	0xfffff7ff
 8003690:	fffffbff 	.word	0xfffffbff
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800
 800369c:	ffffefff 	.word	0xffffefff
 80036a0:	ffffdfff 	.word	0xffffdfff

080036a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4a24      	ldr	r2, [pc, #144]	@ (800374c <TIM_OC4_SetConfig+0xa8>)
 80036ba:	401a      	ands	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a20      	ldr	r2, [pc, #128]	@ (8003750 <TIM_OC4_SetConfig+0xac>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003754 <TIM_OC4_SetConfig+0xb0>)
 80036d8:	4013      	ands	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003758 <TIM_OC4_SetConfig+0xb4>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	031b      	lsls	r3, r3, #12
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a17      	ldr	r2, [pc, #92]	@ (800375c <TIM_OC4_SetConfig+0xb8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d007      	beq.n	8003714 <TIM_OC4_SetConfig+0x70>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a16      	ldr	r2, [pc, #88]	@ (8003760 <TIM_OC4_SetConfig+0xbc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_OC4_SetConfig+0x70>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <TIM_OC4_SetConfig+0xc0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d109      	bne.n	8003728 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	4a14      	ldr	r2, [pc, #80]	@ (8003768 <TIM_OC4_SetConfig+0xc4>)
 8003718:	4013      	ands	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	019b      	lsls	r3, r3, #6
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	621a      	str	r2, [r3, #32]
}
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	ffffefff 	.word	0xffffefff
 8003750:	feff8fff 	.word	0xfeff8fff
 8003754:	fffffcff 	.word	0xfffffcff
 8003758:	ffffdfff 	.word	0xffffdfff
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800
 8003768:	ffffbfff 	.word	0xffffbfff

0800376c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	4a21      	ldr	r2, [pc, #132]	@ (8003808 <TIM_OC5_SetConfig+0x9c>)
 8003782:	401a      	ands	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <TIM_OC5_SetConfig+0xa0>)
 8003798:	4013      	ands	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4a19      	ldr	r2, [pc, #100]	@ (8003810 <TIM_OC5_SetConfig+0xa4>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	041b      	lsls	r3, r3, #16
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a15      	ldr	r2, [pc, #84]	@ (8003814 <TIM_OC5_SetConfig+0xa8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d007      	beq.n	80037d2 <TIM_OC5_SetConfig+0x66>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	@ (8003818 <TIM_OC5_SetConfig+0xac>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d003      	beq.n	80037d2 <TIM_OC5_SetConfig+0x66>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a13      	ldr	r2, [pc, #76]	@ (800381c <TIM_OC5_SetConfig+0xb0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d109      	bne.n	80037e6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003808 <TIM_OC5_SetConfig+0x9c>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	46c0      	nop			@ (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b006      	add	sp, #24
 8003806:	bd80      	pop	{r7, pc}
 8003808:	fffeffff 	.word	0xfffeffff
 800380c:	fffeff8f 	.word	0xfffeff8f
 8003810:	fffdffff 	.word	0xfffdffff
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800

08003820 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4a22      	ldr	r2, [pc, #136]	@ (80038c0 <TIM_OC6_SetConfig+0xa0>)
 8003836:	401a      	ands	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a1e      	ldr	r2, [pc, #120]	@ (80038c4 <TIM_OC6_SetConfig+0xa4>)
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4a1a      	ldr	r2, [pc, #104]	@ (80038c8 <TIM_OC6_SetConfig+0xa8>)
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	051b      	lsls	r3, r3, #20
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a16      	ldr	r2, [pc, #88]	@ (80038cc <TIM_OC6_SetConfig+0xac>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d007      	beq.n	8003888 <TIM_OC6_SetConfig+0x68>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a15      	ldr	r2, [pc, #84]	@ (80038d0 <TIM_OC6_SetConfig+0xb0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d003      	beq.n	8003888 <TIM_OC6_SetConfig+0x68>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a14      	ldr	r2, [pc, #80]	@ (80038d4 <TIM_OC6_SetConfig+0xb4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	4a13      	ldr	r2, [pc, #76]	@ (80038d8 <TIM_OC6_SetConfig+0xb8>)
 800388c:	4013      	ands	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	029b      	lsls	r3, r3, #10
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b006      	add	sp, #24
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	ffefffff 	.word	0xffefffff
 80038c4:	feff8fff 	.word	0xfeff8fff
 80038c8:	ffdfffff 	.word	0xffdfffff
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40014400 	.word	0x40014400
 80038d4:	40014800 	.word	0x40014800
 80038d8:	fffbffff 	.word	0xfffbffff

080038dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	221f      	movs	r2, #31
 80038ec:	4013      	ands	r3, r2
 80038ee:	2201      	movs	r2, #1
 80038f0:	409a      	lsls	r2, r3
 80038f2:	0013      	movs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	43d2      	mvns	r2, r2
 80038fe:	401a      	ands	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1a      	ldr	r2, [r3, #32]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	211f      	movs	r1, #31
 800390c:	400b      	ands	r3, r1
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4099      	lsls	r1, r3
 8003912:	000b      	movs	r3, r1
 8003914:	431a      	orrs	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b006      	add	sp, #24
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	223c      	movs	r2, #60	@ 0x3c
 8003932:	5c9b      	ldrb	r3, [r3, r2]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003938:	2302      	movs	r3, #2
 800393a:	e04a      	b.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	223c      	movs	r2, #60	@ 0x3c
 8003940:	2101      	movs	r1, #1
 8003942:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	223d      	movs	r2, #61	@ 0x3d
 8003948:	2102      	movs	r1, #2
 800394a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d108      	bne.n	8003978 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2270      	movs	r2, #112	@ 0x70
 800397c:	4393      	bics	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a11      	ldr	r2, [pc, #68]	@ (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a10      	ldr	r2, [pc, #64]	@ (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10c      	bne.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2280      	movs	r2, #128	@ 0x80
 80039aa:	4393      	bics	r3, r2
 80039ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	223d      	movs	r2, #61	@ 0x3d
 80039c4:	2101      	movs	r1, #1
 80039c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	223c      	movs	r2, #60	@ 0x3c
 80039cc:	2100      	movs	r1, #0
 80039ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	ff0fffff 	.word	0xff0fffff
 80039e4:	40000400 	.word	0x40000400

080039e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a00:	46c0      	nop			@ (mov r8, r8)
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a10:	46c0      	nop			@ (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e046      	b.n	8003ab8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2288      	movs	r2, #136	@ 0x88
 8003a2e:	589b      	ldr	r3, [r3, r2]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d107      	bne.n	8003a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2284      	movs	r2, #132	@ 0x84
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7fc ffa8 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2288      	movs	r2, #136	@ 0x88
 8003a48:	2124      	movs	r1, #36	@ 0x24
 8003a4a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2101      	movs	r1, #1
 8003a58:	438a      	bics	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 fdd4 	bl	8004614 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 fc66 	bl	8004340 <UART_SetConfig>
 8003a74:	0003      	movs	r3, r0
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e01c      	b.n	8003ab8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	490d      	ldr	r1, [pc, #52]	@ (8003ac0 <HAL_UART_Init+0xa8>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	212a      	movs	r1, #42	@ 0x2a
 8003a9a:	438a      	bics	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 fe63 	bl	800477c <UART_CheckIdleState>
 8003ab6:	0003      	movs	r3, r0
}
 8003ab8:	0018      	movs	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b002      	add	sp, #8
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	ffffb7ff 	.word	0xffffb7ff

08003ac4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	@ 0x28
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	1dbb      	adds	r3, r7, #6
 8003ad2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2288      	movs	r2, #136	@ 0x88
 8003ad8:	589b      	ldr	r3, [r3, r2]
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d000      	beq.n	8003ae0 <HAL_UART_Transmit+0x1c>
 8003ade:	e090      	b.n	8003c02 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_UART_Transmit+0x2a>
 8003ae6:	1dbb      	adds	r3, r7, #6
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e088      	b.n	8003c04 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	015b      	lsls	r3, r3, #5
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d109      	bne.n	8003b12 <HAL_UART_Transmit+0x4e>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d105      	bne.n	8003b12 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d001      	beq.n	8003b12 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e078      	b.n	8003c04 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2290      	movs	r2, #144	@ 0x90
 8003b16:	2100      	movs	r1, #0
 8003b18:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2288      	movs	r2, #136	@ 0x88
 8003b1e:	2121      	movs	r1, #33	@ 0x21
 8003b20:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b22:	f7fd f8b5 	bl	8000c90 <HAL_GetTick>
 8003b26:	0003      	movs	r3, r0
 8003b28:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1dba      	adds	r2, r7, #6
 8003b2e:	2154      	movs	r1, #84	@ 0x54
 8003b30:	8812      	ldrh	r2, [r2, #0]
 8003b32:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1dba      	adds	r2, r7, #6
 8003b38:	2156      	movs	r1, #86	@ 0x56
 8003b3a:	8812      	ldrh	r2, [r2, #0]
 8003b3c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	015b      	lsls	r3, r3, #5
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d108      	bne.n	8003b5c <HAL_UART_Transmit+0x98>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	e003      	b.n	8003b64 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b64:	e030      	b.n	8003bc8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	0013      	movs	r3, r2
 8003b70:	2200      	movs	r2, #0
 8003b72:	2180      	movs	r1, #128	@ 0x80
 8003b74:	f000 feac 	bl	80048d0 <UART_WaitOnFlagUntilTimeout>
 8003b78:	1e03      	subs	r3, r0, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2288      	movs	r2, #136	@ 0x88
 8003b80:	2120      	movs	r1, #32
 8003b82:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e03d      	b.n	8003c04 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10b      	bne.n	8003ba6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	001a      	movs	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	05d2      	lsls	r2, r2, #23
 8003b9a:	0dd2      	lsrs	r2, r2, #23
 8003b9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e007      	b.n	8003bb6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	781a      	ldrb	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2256      	movs	r2, #86	@ 0x56
 8003bba:	5a9b      	ldrh	r3, [r3, r2]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b299      	uxth	r1, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2256      	movs	r2, #86	@ 0x56
 8003bc6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2256      	movs	r2, #86	@ 0x56
 8003bcc:	5a9b      	ldrh	r3, [r3, r2]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1c8      	bne.n	8003b66 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	0013      	movs	r3, r2
 8003bde:	2200      	movs	r2, #0
 8003be0:	2140      	movs	r1, #64	@ 0x40
 8003be2:	f000 fe75 	bl	80048d0 <UART_WaitOnFlagUntilTimeout>
 8003be6:	1e03      	subs	r3, r0, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2288      	movs	r2, #136	@ 0x88
 8003bee:	2120      	movs	r1, #32
 8003bf0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e006      	b.n	8003c04 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2288      	movs	r2, #136	@ 0x88
 8003bfa:	2120      	movs	r1, #32
 8003bfc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	0018      	movs	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b008      	add	sp, #32
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	1dbb      	adds	r3, r7, #6
 8003c18:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	228c      	movs	r2, #140	@ 0x8c
 8003c1e:	589b      	ldr	r3, [r3, r2]
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d145      	bne.n	8003cb0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_UART_Receive_IT+0x26>
 8003c2a:	1dbb      	adds	r3, r7, #6
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e03d      	b.n	8003cb2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	2380      	movs	r3, #128	@ 0x80
 8003c3c:	015b      	lsls	r3, r3, #5
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d109      	bne.n	8003c56 <HAL_UART_Receive_IT+0x4a>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d001      	beq.n	8003c56 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e02d      	b.n	8003cb2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	2380      	movs	r3, #128	@ 0x80
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	4013      	ands	r3, r2
 8003c68:	d019      	beq.n	8003c9e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6e:	613b      	str	r3, [r7, #16]
  return(result);
 8003c70:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	2301      	movs	r3, #1
 8003c76:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2180      	movs	r1, #128	@ 0x80
 8003c8c:	04c9      	lsls	r1, r1, #19
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f383 8810 	msr	PRIMASK, r3
}
 8003c9c:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c9e:	1dbb      	adds	r3, r7, #6
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 fe82 	bl	80049b0 <UART_Start_Receive_IT>
 8003cac:	0003      	movs	r3, r0
 8003cae:	e000      	b.n	8003cb2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b008      	add	sp, #32
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cbc:	b5b0      	push	{r4, r5, r7, lr}
 8003cbe:	b0aa      	sub	sp, #168	@ 0xa8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	22a4      	movs	r2, #164	@ 0xa4
 8003ccc:	18b9      	adds	r1, r7, r2
 8003cce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	20a0      	movs	r0, #160	@ 0xa0
 8003cd8:	1839      	adds	r1, r7, r0
 8003cda:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	249c      	movs	r4, #156	@ 0x9c
 8003ce4:	1939      	adds	r1, r7, r4
 8003ce6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ce8:	0011      	movs	r1, r2
 8003cea:	18bb      	adds	r3, r7, r2
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4aa2      	ldr	r2, [pc, #648]	@ (8003f78 <HAL_UART_IRQHandler+0x2bc>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2298      	movs	r2, #152	@ 0x98
 8003cf4:	18bd      	adds	r5, r7, r2
 8003cf6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003cf8:	18bb      	adds	r3, r7, r2
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d11a      	bne.n	8003d36 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d00:	187b      	adds	r3, r7, r1
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2220      	movs	r2, #32
 8003d06:	4013      	ands	r3, r2
 8003d08:	d015      	beq.n	8003d36 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d0a:	183b      	adds	r3, r7, r0
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	4013      	ands	r3, r2
 8003d12:	d105      	bne.n	8003d20 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d14:	193b      	adds	r3, r7, r4
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	@ 0x80
 8003d1a:	055b      	lsls	r3, r3, #21
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d00a      	beq.n	8003d36 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d100      	bne.n	8003d2a <HAL_UART_IRQHandler+0x6e>
 8003d28:	e2dc      	b.n	80042e4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	0010      	movs	r0, r2
 8003d32:	4798      	blx	r3
      }
      return;
 8003d34:	e2d6      	b.n	80042e4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d36:	2398      	movs	r3, #152	@ 0x98
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d100      	bne.n	8003d42 <HAL_UART_IRQHandler+0x86>
 8003d40:	e122      	b.n	8003f88 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d42:	239c      	movs	r3, #156	@ 0x9c
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a8c      	ldr	r2, [pc, #560]	@ (8003f7c <HAL_UART_IRQHandler+0x2c0>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d106      	bne.n	8003d5c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d4e:	23a0      	movs	r3, #160	@ 0xa0
 8003d50:	18fb      	adds	r3, r7, r3
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a8a      	ldr	r2, [pc, #552]	@ (8003f80 <HAL_UART_IRQHandler+0x2c4>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	d100      	bne.n	8003d5c <HAL_UART_IRQHandler+0xa0>
 8003d5a:	e115      	b.n	8003f88 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d5c:	23a4      	movs	r3, #164	@ 0xa4
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2201      	movs	r2, #1
 8003d64:	4013      	ands	r3, r2
 8003d66:	d012      	beq.n	8003d8e <HAL_UART_IRQHandler+0xd2>
 8003d68:	23a0      	movs	r3, #160	@ 0xa0
 8003d6a:	18fb      	adds	r3, r7, r3
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	2380      	movs	r3, #128	@ 0x80
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4013      	ands	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2290      	movs	r2, #144	@ 0x90
 8003d82:	589b      	ldr	r3, [r3, r2]
 8003d84:	2201      	movs	r2, #1
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2190      	movs	r1, #144	@ 0x90
 8003d8c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d8e:	23a4      	movs	r3, #164	@ 0xa4
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2202      	movs	r2, #2
 8003d96:	4013      	ands	r3, r2
 8003d98:	d011      	beq.n	8003dbe <HAL_UART_IRQHandler+0x102>
 8003d9a:	239c      	movs	r3, #156	@ 0x9c
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2201      	movs	r2, #1
 8003da2:	4013      	ands	r3, r2
 8003da4:	d00b      	beq.n	8003dbe <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2202      	movs	r2, #2
 8003dac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2290      	movs	r2, #144	@ 0x90
 8003db2:	589b      	ldr	r3, [r3, r2]
 8003db4:	2204      	movs	r2, #4
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2190      	movs	r1, #144	@ 0x90
 8003dbc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dbe:	23a4      	movs	r3, #164	@ 0xa4
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d011      	beq.n	8003dee <HAL_UART_IRQHandler+0x132>
 8003dca:	239c      	movs	r3, #156	@ 0x9c
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	d00b      	beq.n	8003dee <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2204      	movs	r2, #4
 8003ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2290      	movs	r2, #144	@ 0x90
 8003de2:	589b      	ldr	r3, [r3, r2]
 8003de4:	2202      	movs	r2, #2
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2190      	movs	r1, #144	@ 0x90
 8003dec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003dee:	23a4      	movs	r3, #164	@ 0xa4
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2208      	movs	r2, #8
 8003df6:	4013      	ands	r3, r2
 8003df8:	d017      	beq.n	8003e2a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003dfa:	23a0      	movs	r3, #160	@ 0xa0
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2220      	movs	r2, #32
 8003e02:	4013      	ands	r3, r2
 8003e04:	d105      	bne.n	8003e12 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003e06:	239c      	movs	r3, #156	@ 0x9c
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a5b      	ldr	r2, [pc, #364]	@ (8003f7c <HAL_UART_IRQHandler+0x2c0>)
 8003e0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e10:	d00b      	beq.n	8003e2a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2208      	movs	r2, #8
 8003e18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2290      	movs	r2, #144	@ 0x90
 8003e1e:	589b      	ldr	r3, [r3, r2]
 8003e20:	2208      	movs	r2, #8
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2190      	movs	r1, #144	@ 0x90
 8003e28:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e2a:	23a4      	movs	r3, #164	@ 0xa4
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	2380      	movs	r3, #128	@ 0x80
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	4013      	ands	r3, r2
 8003e36:	d013      	beq.n	8003e60 <HAL_UART_IRQHandler+0x1a4>
 8003e38:	23a0      	movs	r3, #160	@ 0xa0
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	2380      	movs	r3, #128	@ 0x80
 8003e40:	04db      	lsls	r3, r3, #19
 8003e42:	4013      	ands	r3, r2
 8003e44:	d00c      	beq.n	8003e60 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2280      	movs	r2, #128	@ 0x80
 8003e4c:	0112      	lsls	r2, r2, #4
 8003e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2290      	movs	r2, #144	@ 0x90
 8003e54:	589b      	ldr	r3, [r3, r2]
 8003e56:	2220      	movs	r2, #32
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2190      	movs	r1, #144	@ 0x90
 8003e5e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2290      	movs	r2, #144	@ 0x90
 8003e64:	589b      	ldr	r3, [r3, r2]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d100      	bne.n	8003e6c <HAL_UART_IRQHandler+0x1b0>
 8003e6a:	e23d      	b.n	80042e8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e6c:	23a4      	movs	r3, #164	@ 0xa4
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2220      	movs	r2, #32
 8003e74:	4013      	ands	r3, r2
 8003e76:	d015      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e78:	23a0      	movs	r3, #160	@ 0xa0
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	4013      	ands	r3, r2
 8003e82:	d106      	bne.n	8003e92 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e84:	239c      	movs	r3, #156	@ 0x9c
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	2380      	movs	r3, #128	@ 0x80
 8003e8c:	055b      	lsls	r3, r3, #21
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d008      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	0010      	movs	r0, r2
 8003ea2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2290      	movs	r2, #144	@ 0x90
 8003ea8:	589b      	ldr	r3, [r3, r2]
 8003eaa:	2194      	movs	r1, #148	@ 0x94
 8003eac:	187a      	adds	r2, r7, r1
 8003eae:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b40      	cmp	r3, #64	@ 0x40
 8003ebc:	d004      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2228      	movs	r2, #40	@ 0x28
 8003ec4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ec6:	d04c      	beq.n	8003f62 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f000 fe94 	bl	8004bf8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2240      	movs	r2, #64	@ 0x40
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b40      	cmp	r3, #64	@ 0x40
 8003edc:	d13c      	bne.n	8003f58 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ede:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003ee4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	2090      	movs	r0, #144	@ 0x90
 8003ee8:	183a      	adds	r2, r7, r0
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	2301      	movs	r3, #1
 8003eee:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ef2:	f383 8810 	msr	PRIMASK, r3
}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2140      	movs	r1, #64	@ 0x40
 8003f04:	438a      	bics	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	183b      	adds	r3, r7, r0
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f10:	f383 8810 	msr	PRIMASK, r3
}
 8003f14:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2280      	movs	r2, #128	@ 0x80
 8003f1a:	589b      	ldr	r3, [r3, r2]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d016      	beq.n	8003f4e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2280      	movs	r2, #128	@ 0x80
 8003f24:	589b      	ldr	r3, [r3, r2]
 8003f26:	4a17      	ldr	r2, [pc, #92]	@ (8003f84 <HAL_UART_IRQHandler+0x2c8>)
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2280      	movs	r2, #128	@ 0x80
 8003f2e:	589b      	ldr	r3, [r3, r2]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7fd fe45 	bl	8001bc0 <HAL_DMA_Abort_IT>
 8003f36:	1e03      	subs	r3, r0, #0
 8003f38:	d01c      	beq.n	8003f74 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2280      	movs	r2, #128	@ 0x80
 8003f3e:	589b      	ldr	r3, [r3, r2]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	2180      	movs	r1, #128	@ 0x80
 8003f46:	5852      	ldr	r2, [r2, r1]
 8003f48:	0010      	movs	r0, r2
 8003f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	e012      	b.n	8003f74 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 f9e1 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f56:	e00d      	b.n	8003f74 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f000 f9dc 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e008      	b.n	8003f74 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f000 f9d7 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2290      	movs	r2, #144	@ 0x90
 8003f6e:	2100      	movs	r1, #0
 8003f70:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003f72:	e1b9      	b.n	80042e8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	46c0      	nop			@ (mov r8, r8)
    return;
 8003f76:	e1b7      	b.n	80042e8 <HAL_UART_IRQHandler+0x62c>
 8003f78:	0000080f 	.word	0x0000080f
 8003f7c:	10000001 	.word	0x10000001
 8003f80:	04000120 	.word	0x04000120
 8003f84:	08004cc5 	.word	0x08004cc5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d000      	beq.n	8003f92 <HAL_UART_IRQHandler+0x2d6>
 8003f90:	e13e      	b.n	8004210 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f92:	23a4      	movs	r3, #164	@ 0xa4
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d100      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x2e4>
 8003f9e:	e137      	b.n	8004210 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fa0:	23a0      	movs	r3, #160	@ 0xa0
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2210      	movs	r2, #16
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d100      	bne.n	8003fae <HAL_UART_IRQHandler+0x2f2>
 8003fac:	e130      	b.n	8004210 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2240      	movs	r2, #64	@ 0x40
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b40      	cmp	r3, #64	@ 0x40
 8003fc2:	d000      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x30a>
 8003fc4:	e0a4      	b.n	8004110 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2280      	movs	r2, #128	@ 0x80
 8003fca:	589b      	ldr	r3, [r3, r2]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	217e      	movs	r1, #126	@ 0x7e
 8003fd2:	187b      	adds	r3, r7, r1
 8003fd4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003fd6:	187b      	adds	r3, r7, r1
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d100      	bne.n	8003fe0 <HAL_UART_IRQHandler+0x324>
 8003fde:	e185      	b.n	80042ec <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	225c      	movs	r2, #92	@ 0x5c
 8003fe4:	5a9b      	ldrh	r3, [r3, r2]
 8003fe6:	187a      	adds	r2, r7, r1
 8003fe8:	8812      	ldrh	r2, [r2, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d300      	bcc.n	8003ff0 <HAL_UART_IRQHandler+0x334>
 8003fee:	e17d      	b.n	80042ec <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	187a      	adds	r2, r7, r1
 8003ff4:	215e      	movs	r1, #94	@ 0x5e
 8003ff6:	8812      	ldrh	r2, [r2, #0]
 8003ff8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2280      	movs	r2, #128	@ 0x80
 8003ffe:	589b      	ldr	r3, [r3, r2]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2220      	movs	r2, #32
 8004006:	4013      	ands	r3, r2
 8004008:	d170      	bne.n	80040ec <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400a:	f3ef 8310 	mrs	r3, PRIMASK
 800400e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004012:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004014:	2301      	movs	r3, #1
 8004016:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800401a:	f383 8810 	msr	PRIMASK, r3
}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	49b4      	ldr	r1, [pc, #720]	@ (80042fc <HAL_UART_IRQHandler+0x640>)
 800402c:	400a      	ands	r2, r1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004032:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800403c:	f3ef 8310 	mrs	r3, PRIMASK
 8004040:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004044:	677b      	str	r3, [r7, #116]	@ 0x74
 8004046:	2301      	movs	r3, #1
 8004048:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800404c:	f383 8810 	msr	PRIMASK, r3
}
 8004050:	46c0      	nop			@ (mov r8, r8)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2101      	movs	r1, #1
 800405e:	438a      	bics	r2, r1
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004064:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004068:	f383 8810 	msr	PRIMASK, r3
}
 800406c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406e:	f3ef 8310 	mrs	r3, PRIMASK
 8004072:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004076:	673b      	str	r3, [r7, #112]	@ 0x70
 8004078:	2301      	movs	r3, #1
 800407a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800407e:	f383 8810 	msr	PRIMASK, r3
}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2140      	movs	r1, #64	@ 0x40
 8004090:	438a      	bics	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004096:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800409a:	f383 8810 	msr	PRIMASK, r3
}
 800409e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	228c      	movs	r2, #140	@ 0x8c
 80040a4:	2120      	movs	r1, #32
 80040a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80040b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040b8:	2301      	movs	r3, #1
 80040ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040be:	f383 8810 	msr	PRIMASK, r3
}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2110      	movs	r1, #16
 80040d0:	438a      	bics	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2280      	movs	r2, #128	@ 0x80
 80040e4:	589b      	ldr	r3, [r3, r2]
 80040e6:	0018      	movs	r0, r3
 80040e8:	f7fd fd08 	bl	8001afc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	225c      	movs	r2, #92	@ 0x5c
 80040f6:	5a9a      	ldrh	r2, [r3, r2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	215e      	movs	r1, #94	@ 0x5e
 80040fc:	5a5b      	ldrh	r3, [r3, r1]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0011      	movs	r1, r2
 8004108:	0018      	movs	r0, r3
 800410a:	f000 f90d 	bl	8004328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800410e:	e0ed      	b.n	80042ec <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	225c      	movs	r2, #92	@ 0x5c
 8004114:	5a99      	ldrh	r1, [r3, r2]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	225e      	movs	r2, #94	@ 0x5e
 800411a:	5a9b      	ldrh	r3, [r3, r2]
 800411c:	b29a      	uxth	r2, r3
 800411e:	208e      	movs	r0, #142	@ 0x8e
 8004120:	183b      	adds	r3, r7, r0
 8004122:	1a8a      	subs	r2, r1, r2
 8004124:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	225e      	movs	r2, #94	@ 0x5e
 800412a:	5a9b      	ldrh	r3, [r3, r2]
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d100      	bne.n	8004134 <HAL_UART_IRQHandler+0x478>
 8004132:	e0dd      	b.n	80042f0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004134:	183b      	adds	r3, r7, r0
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d100      	bne.n	800413e <HAL_UART_IRQHandler+0x482>
 800413c:	e0d8      	b.n	80042f0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413e:	f3ef 8310 	mrs	r3, PRIMASK
 8004142:	60fb      	str	r3, [r7, #12]
  return(result);
 8004144:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004146:	2488      	movs	r4, #136	@ 0x88
 8004148:	193a      	adds	r2, r7, r4
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	2301      	movs	r3, #1
 800414e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f383 8810 	msr	PRIMASK, r3
}
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4967      	ldr	r1, [pc, #412]	@ (8004300 <HAL_UART_IRQHandler+0x644>)
 8004164:	400a      	ands	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	193b      	adds	r3, r7, r4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f383 8810 	msr	PRIMASK, r3
}
 8004174:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004176:	f3ef 8310 	mrs	r3, PRIMASK
 800417a:	61bb      	str	r3, [r7, #24]
  return(result);
 800417c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800417e:	2484      	movs	r4, #132	@ 0x84
 8004180:	193a      	adds	r2, r7, r4
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	2301      	movs	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f383 8810 	msr	PRIMASK, r3
}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	495a      	ldr	r1, [pc, #360]	@ (8004304 <HAL_UART_IRQHandler+0x648>)
 800419c:	400a      	ands	r2, r1
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	193b      	adds	r3, r7, r4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f383 8810 	msr	PRIMASK, r3
}
 80041ac:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	228c      	movs	r2, #140	@ 0x8c
 80041b2:	2120      	movs	r1, #32
 80041b4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ca:	2480      	movs	r4, #128	@ 0x80
 80041cc:	193a      	adds	r2, r7, r4
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	2301      	movs	r3, #1
 80041d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d6:	f383 8810 	msr	PRIMASK, r3
}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2110      	movs	r1, #16
 80041e8:	438a      	bics	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f4:	f383 8810 	msr	PRIMASK, r3
}
 80041f8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2202      	movs	r2, #2
 80041fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004200:	183b      	adds	r3, r7, r0
 8004202:	881a      	ldrh	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	0011      	movs	r1, r2
 8004208:	0018      	movs	r0, r3
 800420a:	f000 f88d 	bl	8004328 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800420e:	e06f      	b.n	80042f0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004210:	23a4      	movs	r3, #164	@ 0xa4
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	2380      	movs	r3, #128	@ 0x80
 8004218:	035b      	lsls	r3, r3, #13
 800421a:	4013      	ands	r3, r2
 800421c:	d010      	beq.n	8004240 <HAL_UART_IRQHandler+0x584>
 800421e:	239c      	movs	r3, #156	@ 0x9c
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	03db      	lsls	r3, r3, #15
 8004228:	4013      	ands	r3, r2
 800422a:	d009      	beq.n	8004240 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2280      	movs	r2, #128	@ 0x80
 8004232:	0352      	lsls	r2, r2, #13
 8004234:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0018      	movs	r0, r3
 800423a:	f001 fa7b 	bl	8005734 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800423e:	e05a      	b.n	80042f6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004240:	23a4      	movs	r3, #164	@ 0xa4
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2280      	movs	r2, #128	@ 0x80
 8004248:	4013      	ands	r3, r2
 800424a:	d016      	beq.n	800427a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800424c:	23a0      	movs	r3, #160	@ 0xa0
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2280      	movs	r2, #128	@ 0x80
 8004254:	4013      	ands	r3, r2
 8004256:	d106      	bne.n	8004266 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004258:	239c      	movs	r3, #156	@ 0x9c
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	2380      	movs	r3, #128	@ 0x80
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	4013      	ands	r3, r2
 8004264:	d009      	beq.n	800427a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800426a:	2b00      	cmp	r3, #0
 800426c:	d042      	beq.n	80042f4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	0010      	movs	r0, r2
 8004276:	4798      	blx	r3
    }
    return;
 8004278:	e03c      	b.n	80042f4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800427a:	23a4      	movs	r3, #164	@ 0xa4
 800427c:	18fb      	adds	r3, r7, r3
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2240      	movs	r2, #64	@ 0x40
 8004282:	4013      	ands	r3, r2
 8004284:	d00a      	beq.n	800429c <HAL_UART_IRQHandler+0x5e0>
 8004286:	23a0      	movs	r3, #160	@ 0xa0
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2240      	movs	r2, #64	@ 0x40
 800428e:	4013      	ands	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 fd2c 	bl	8004cf2 <UART_EndTransmit_IT>
    return;
 800429a:	e02c      	b.n	80042f6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800429c:	23a4      	movs	r3, #164	@ 0xa4
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	2380      	movs	r3, #128	@ 0x80
 80042a4:	041b      	lsls	r3, r3, #16
 80042a6:	4013      	ands	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <HAL_UART_IRQHandler+0x606>
 80042aa:	23a0      	movs	r3, #160	@ 0xa0
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	2380      	movs	r3, #128	@ 0x80
 80042b2:	05db      	lsls	r3, r3, #23
 80042b4:	4013      	ands	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	0018      	movs	r0, r3
 80042bc:	f001 fa4a 	bl	8005754 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042c0:	e019      	b.n	80042f6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042c2:	23a4      	movs	r3, #164	@ 0xa4
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	2380      	movs	r3, #128	@ 0x80
 80042ca:	045b      	lsls	r3, r3, #17
 80042cc:	4013      	ands	r3, r2
 80042ce:	d012      	beq.n	80042f6 <HAL_UART_IRQHandler+0x63a>
 80042d0:	23a0      	movs	r3, #160	@ 0xa0
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	da0d      	bge.n	80042f6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0018      	movs	r0, r3
 80042de:	f001 fa31 	bl	8005744 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042e2:	e008      	b.n	80042f6 <HAL_UART_IRQHandler+0x63a>
      return;
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	e006      	b.n	80042f6 <HAL_UART_IRQHandler+0x63a>
    return;
 80042e8:	46c0      	nop			@ (mov r8, r8)
 80042ea:	e004      	b.n	80042f6 <HAL_UART_IRQHandler+0x63a>
      return;
 80042ec:	46c0      	nop			@ (mov r8, r8)
 80042ee:	e002      	b.n	80042f6 <HAL_UART_IRQHandler+0x63a>
      return;
 80042f0:	46c0      	nop			@ (mov r8, r8)
 80042f2:	e000      	b.n	80042f6 <HAL_UART_IRQHandler+0x63a>
    return;
 80042f4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b02a      	add	sp, #168	@ 0xa8
 80042fa:	bdb0      	pop	{r4, r5, r7, pc}
 80042fc:	fffffeff 	.word	0xfffffeff
 8004300:	fffffedf 	.word	0xfffffedf
 8004304:	effffffe 	.word	0xeffffffe

08004308 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004310:	46c0      	nop			@ (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004320:	46c0      	nop			@ (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b002      	add	sp, #8
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	000a      	movs	r2, r1
 8004332:	1cbb      	adds	r3, r7, #2
 8004334:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	46bd      	mov	sp, r7
 800433a:	b002      	add	sp, #8
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004348:	231a      	movs	r3, #26
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	4313      	orrs	r3, r2
 8004366:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4aa1      	ldr	r2, [pc, #644]	@ (80045f4 <UART_SetConfig+0x2b4>)
 8004370:	4013      	ands	r3, r2
 8004372:	0019      	movs	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4a9c      	ldr	r2, [pc, #624]	@ (80045f8 <UART_SetConfig+0x2b8>)
 8004386:	4013      	ands	r3, r2
 8004388:	0019      	movs	r1, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a93      	ldr	r2, [pc, #588]	@ (80045fc <UART_SetConfig+0x2bc>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	0019      	movs	r1, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c2:	220f      	movs	r2, #15
 80043c4:	4393      	bics	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a89      	ldr	r2, [pc, #548]	@ (8004600 <UART_SetConfig+0x2c0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d127      	bne.n	800442e <UART_SetConfig+0xee>
 80043de:	4b89      	ldr	r3, [pc, #548]	@ (8004604 <UART_SetConfig+0x2c4>)
 80043e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e2:	2203      	movs	r2, #3
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d017      	beq.n	800441a <UART_SetConfig+0xda>
 80043ea:	d81b      	bhi.n	8004424 <UART_SetConfig+0xe4>
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d00a      	beq.n	8004406 <UART_SetConfig+0xc6>
 80043f0:	d818      	bhi.n	8004424 <UART_SetConfig+0xe4>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <UART_SetConfig+0xbc>
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d00a      	beq.n	8004410 <UART_SetConfig+0xd0>
 80043fa:	e013      	b.n	8004424 <UART_SetConfig+0xe4>
 80043fc:	231b      	movs	r3, #27
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	e021      	b.n	800444a <UART_SetConfig+0x10a>
 8004406:	231b      	movs	r3, #27
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	2202      	movs	r2, #2
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e01c      	b.n	800444a <UART_SetConfig+0x10a>
 8004410:	231b      	movs	r3, #27
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	2204      	movs	r2, #4
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	e017      	b.n	800444a <UART_SetConfig+0x10a>
 800441a:	231b      	movs	r3, #27
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	2208      	movs	r2, #8
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e012      	b.n	800444a <UART_SetConfig+0x10a>
 8004424:	231b      	movs	r3, #27
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	2210      	movs	r2, #16
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e00d      	b.n	800444a <UART_SetConfig+0x10a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a75      	ldr	r2, [pc, #468]	@ (8004608 <UART_SetConfig+0x2c8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d104      	bne.n	8004442 <UART_SetConfig+0x102>
 8004438:	231b      	movs	r3, #27
 800443a:	18fb      	adds	r3, r7, r3
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e003      	b.n	800444a <UART_SetConfig+0x10a>
 8004442:	231b      	movs	r3, #27
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	2210      	movs	r2, #16
 8004448:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	2380      	movs	r3, #128	@ 0x80
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	429a      	cmp	r2, r3
 8004454:	d000      	beq.n	8004458 <UART_SetConfig+0x118>
 8004456:	e065      	b.n	8004524 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8004458:	231b      	movs	r3, #27
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d015      	beq.n	800448e <UART_SetConfig+0x14e>
 8004462:	dc18      	bgt.n	8004496 <UART_SetConfig+0x156>
 8004464:	2b04      	cmp	r3, #4
 8004466:	d00d      	beq.n	8004484 <UART_SetConfig+0x144>
 8004468:	dc15      	bgt.n	8004496 <UART_SetConfig+0x156>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <UART_SetConfig+0x134>
 800446e:	2b02      	cmp	r3, #2
 8004470:	d005      	beq.n	800447e <UART_SetConfig+0x13e>
 8004472:	e010      	b.n	8004496 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004474:	f7fe fa80 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8004478:	0003      	movs	r3, r0
 800447a:	617b      	str	r3, [r7, #20]
        break;
 800447c:	e012      	b.n	80044a4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800447e:	4b63      	ldr	r3, [pc, #396]	@ (800460c <UART_SetConfig+0x2cc>)
 8004480:	617b      	str	r3, [r7, #20]
        break;
 8004482:	e00f      	b.n	80044a4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004484:	f7fe f9ec 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8004488:	0003      	movs	r3, r0
 800448a:	617b      	str	r3, [r7, #20]
        break;
 800448c:	e00a      	b.n	80044a4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448e:	2380      	movs	r3, #128	@ 0x80
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	617b      	str	r3, [r7, #20]
        break;
 8004494:	e006      	b.n	80044a4 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800449a:	231a      	movs	r3, #26
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	2201      	movs	r2, #1
 80044a0:	701a      	strb	r2, [r3, #0]
        break;
 80044a2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d100      	bne.n	80044ac <UART_SetConfig+0x16c>
 80044aa:	e08d      	b.n	80045c8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044b0:	4b57      	ldr	r3, [pc, #348]	@ (8004610 <UART_SetConfig+0x2d0>)
 80044b2:	0052      	lsls	r2, r2, #1
 80044b4:	5ad3      	ldrh	r3, [r2, r3]
 80044b6:	0019      	movs	r1, r3
 80044b8:	6978      	ldr	r0, [r7, #20]
 80044ba:	f7fb fe33 	bl	8000124 <__udivsi3>
 80044be:	0003      	movs	r3, r0
 80044c0:	005a      	lsls	r2, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	18d2      	adds	r2, r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	0019      	movs	r1, r3
 80044d0:	0010      	movs	r0, r2
 80044d2:	f7fb fe27 	bl	8000124 <__udivsi3>
 80044d6:	0003      	movs	r3, r0
 80044d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b0f      	cmp	r3, #15
 80044de:	d91c      	bls.n	800451a <UART_SetConfig+0x1da>
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	025b      	lsls	r3, r3, #9
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d217      	bcs.n	800451a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	200e      	movs	r0, #14
 80044f0:	183b      	adds	r3, r7, r0
 80044f2:	210f      	movs	r1, #15
 80044f4:	438a      	bics	r2, r1
 80044f6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2207      	movs	r2, #7
 8004500:	4013      	ands	r3, r2
 8004502:	b299      	uxth	r1, r3
 8004504:	183b      	adds	r3, r7, r0
 8004506:	183a      	adds	r2, r7, r0
 8004508:	8812      	ldrh	r2, [r2, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	183a      	adds	r2, r7, r0
 8004514:	8812      	ldrh	r2, [r2, #0]
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	e056      	b.n	80045c8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 800451a:	231a      	movs	r3, #26
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	2201      	movs	r2, #1
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e051      	b.n	80045c8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004524:	231b      	movs	r3, #27
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b08      	cmp	r3, #8
 800452c:	d015      	beq.n	800455a <UART_SetConfig+0x21a>
 800452e:	dc18      	bgt.n	8004562 <UART_SetConfig+0x222>
 8004530:	2b04      	cmp	r3, #4
 8004532:	d00d      	beq.n	8004550 <UART_SetConfig+0x210>
 8004534:	dc15      	bgt.n	8004562 <UART_SetConfig+0x222>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <UART_SetConfig+0x200>
 800453a:	2b02      	cmp	r3, #2
 800453c:	d005      	beq.n	800454a <UART_SetConfig+0x20a>
 800453e:	e010      	b.n	8004562 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004540:	f7fe fa1a 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 8004544:	0003      	movs	r3, r0
 8004546:	617b      	str	r3, [r7, #20]
        break;
 8004548:	e012      	b.n	8004570 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454a:	4b30      	ldr	r3, [pc, #192]	@ (800460c <UART_SetConfig+0x2cc>)
 800454c:	617b      	str	r3, [r7, #20]
        break;
 800454e:	e00f      	b.n	8004570 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004550:	f7fe f986 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8004554:	0003      	movs	r3, r0
 8004556:	617b      	str	r3, [r7, #20]
        break;
 8004558:	e00a      	b.n	8004570 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	617b      	str	r3, [r7, #20]
        break;
 8004560:	e006      	b.n	8004570 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004566:	231a      	movs	r3, #26
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]
        break;
 800456e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d028      	beq.n	80045c8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800457a:	4b25      	ldr	r3, [pc, #148]	@ (8004610 <UART_SetConfig+0x2d0>)
 800457c:	0052      	lsls	r2, r2, #1
 800457e:	5ad3      	ldrh	r3, [r2, r3]
 8004580:	0019      	movs	r1, r3
 8004582:	6978      	ldr	r0, [r7, #20]
 8004584:	f7fb fdce 	bl	8000124 <__udivsi3>
 8004588:	0003      	movs	r3, r0
 800458a:	001a      	movs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	18d2      	adds	r2, r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	0019      	movs	r1, r3
 800459a:	0010      	movs	r0, r2
 800459c:	f7fb fdc2 	bl	8000124 <__udivsi3>
 80045a0:	0003      	movs	r3, r0
 80045a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b0f      	cmp	r3, #15
 80045a8:	d90a      	bls.n	80045c0 <UART_SetConfig+0x280>
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	2380      	movs	r3, #128	@ 0x80
 80045ae:	025b      	lsls	r3, r3, #9
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d205      	bcs.n	80045c0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	e003      	b.n	80045c8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80045c0:	231a      	movs	r3, #26
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	2201      	movs	r2, #1
 80045c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	226a      	movs	r2, #106	@ 0x6a
 80045cc:	2101      	movs	r1, #1
 80045ce:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2268      	movs	r2, #104	@ 0x68
 80045d4:	2101      	movs	r1, #1
 80045d6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80045e4:	231a      	movs	r3, #26
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	781b      	ldrb	r3, [r3, #0]
}
 80045ea:	0018      	movs	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b008      	add	sp, #32
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	cfff69f3 	.word	0xcfff69f3
 80045f8:	ffffcfff 	.word	0xffffcfff
 80045fc:	11fff4ff 	.word	0x11fff4ff
 8004600:	40013800 	.word	0x40013800
 8004604:	40021000 	.word	0x40021000
 8004608:	40004400 	.word	0x40004400
 800460c:	00f42400 	.word	0x00f42400
 8004610:	080068f4 	.word	0x080068f4

08004614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004620:	2208      	movs	r2, #8
 8004622:	4013      	ands	r3, r2
 8004624:	d00b      	beq.n	800463e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4a4a      	ldr	r2, [pc, #296]	@ (8004758 <UART_AdvFeatureConfig+0x144>)
 800462e:	4013      	ands	r3, r2
 8004630:	0019      	movs	r1, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004642:	2201      	movs	r2, #1
 8004644:	4013      	ands	r3, r2
 8004646:	d00b      	beq.n	8004660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4a43      	ldr	r2, [pc, #268]	@ (800475c <UART_AdvFeatureConfig+0x148>)
 8004650:	4013      	ands	r3, r2
 8004652:	0019      	movs	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	2202      	movs	r2, #2
 8004666:	4013      	ands	r3, r2
 8004668:	d00b      	beq.n	8004682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4a3b      	ldr	r2, [pc, #236]	@ (8004760 <UART_AdvFeatureConfig+0x14c>)
 8004672:	4013      	ands	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004686:	2204      	movs	r2, #4
 8004688:	4013      	ands	r3, r2
 800468a:	d00b      	beq.n	80046a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4a34      	ldr	r2, [pc, #208]	@ (8004764 <UART_AdvFeatureConfig+0x150>)
 8004694:	4013      	ands	r3, r2
 8004696:	0019      	movs	r1, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	2210      	movs	r2, #16
 80046aa:	4013      	ands	r3, r2
 80046ac:	d00b      	beq.n	80046c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004768 <UART_AdvFeatureConfig+0x154>)
 80046b6:	4013      	ands	r3, r2
 80046b8:	0019      	movs	r1, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	2220      	movs	r2, #32
 80046cc:	4013      	ands	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4a25      	ldr	r2, [pc, #148]	@ (800476c <UART_AdvFeatureConfig+0x158>)
 80046d8:	4013      	ands	r3, r2
 80046da:	0019      	movs	r1, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ec:	2240      	movs	r2, #64	@ 0x40
 80046ee:	4013      	ands	r3, r2
 80046f0:	d01d      	beq.n	800472e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004770 <UART_AdvFeatureConfig+0x15c>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	0019      	movs	r1, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800470e:	2380      	movs	r3, #128	@ 0x80
 8004710:	035b      	lsls	r3, r3, #13
 8004712:	429a      	cmp	r2, r3
 8004714:	d10b      	bne.n	800472e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	4a15      	ldr	r2, [pc, #84]	@ (8004774 <UART_AdvFeatureConfig+0x160>)
 800471e:	4013      	ands	r3, r2
 8004720:	0019      	movs	r1, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	2280      	movs	r2, #128	@ 0x80
 8004734:	4013      	ands	r3, r2
 8004736:	d00b      	beq.n	8004750 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4a0e      	ldr	r2, [pc, #56]	@ (8004778 <UART_AdvFeatureConfig+0x164>)
 8004740:	4013      	ands	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
  }
}
 8004750:	46c0      	nop			@ (mov r8, r8)
 8004752:	46bd      	mov	sp, r7
 8004754:	b002      	add	sp, #8
 8004756:	bd80      	pop	{r7, pc}
 8004758:	ffff7fff 	.word	0xffff7fff
 800475c:	fffdffff 	.word	0xfffdffff
 8004760:	fffeffff 	.word	0xfffeffff
 8004764:	fffbffff 	.word	0xfffbffff
 8004768:	ffffefff 	.word	0xffffefff
 800476c:	ffffdfff 	.word	0xffffdfff
 8004770:	ffefffff 	.word	0xffefffff
 8004774:	ff9fffff 	.word	0xff9fffff
 8004778:	fff7ffff 	.word	0xfff7ffff

0800477c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b092      	sub	sp, #72	@ 0x48
 8004780:	af02      	add	r7, sp, #8
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2290      	movs	r2, #144	@ 0x90
 8004788:	2100      	movs	r1, #0
 800478a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800478c:	f7fc fa80 	bl	8000c90 <HAL_GetTick>
 8004790:	0003      	movs	r3, r0
 8004792:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2208      	movs	r2, #8
 800479c:	4013      	ands	r3, r2
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d12d      	bne.n	80047fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a4:	2280      	movs	r2, #128	@ 0x80
 80047a6:	0391      	lsls	r1, r2, #14
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4a47      	ldr	r2, [pc, #284]	@ (80048c8 <UART_CheckIdleState+0x14c>)
 80047ac:	9200      	str	r2, [sp, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f000 f88e 	bl	80048d0 <UART_WaitOnFlagUntilTimeout>
 80047b4:	1e03      	subs	r3, r0, #0
 80047b6:	d022      	beq.n	80047fe <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b8:	f3ef 8310 	mrs	r3, PRIMASK
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80047c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047c2:	2301      	movs	r3, #1
 80047c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c8:	f383 8810 	msr	PRIMASK, r3
}
 80047cc:	46c0      	nop			@ (mov r8, r8)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2180      	movs	r1, #128	@ 0x80
 80047da:	438a      	bics	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e4:	f383 8810 	msr	PRIMASK, r3
}
 80047e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2288      	movs	r2, #136	@ 0x88
 80047ee:	2120      	movs	r1, #32
 80047f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2284      	movs	r2, #132	@ 0x84
 80047f6:	2100      	movs	r1, #0
 80047f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e060      	b.n	80048c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2204      	movs	r2, #4
 8004806:	4013      	ands	r3, r2
 8004808:	2b04      	cmp	r3, #4
 800480a:	d146      	bne.n	800489a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800480c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800480e:	2280      	movs	r2, #128	@ 0x80
 8004810:	03d1      	lsls	r1, r2, #15
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4a2c      	ldr	r2, [pc, #176]	@ (80048c8 <UART_CheckIdleState+0x14c>)
 8004816:	9200      	str	r2, [sp, #0]
 8004818:	2200      	movs	r2, #0
 800481a:	f000 f859 	bl	80048d0 <UART_WaitOnFlagUntilTimeout>
 800481e:	1e03      	subs	r3, r0, #0
 8004820:	d03b      	beq.n	800489a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004822:	f3ef 8310 	mrs	r3, PRIMASK
 8004826:	60fb      	str	r3, [r7, #12]
  return(result);
 8004828:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800482a:	637b      	str	r3, [r7, #52]	@ 0x34
 800482c:	2301      	movs	r3, #1
 800482e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f383 8810 	msr	PRIMASK, r3
}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4922      	ldr	r1, [pc, #136]	@ (80048cc <UART_CheckIdleState+0x150>)
 8004844:	400a      	ands	r2, r1
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f383 8810 	msr	PRIMASK, r3
}
 8004852:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004854:	f3ef 8310 	mrs	r3, PRIMASK
 8004858:	61bb      	str	r3, [r7, #24]
  return(result);
 800485a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	633b      	str	r3, [r7, #48]	@ 0x30
 800485e:	2301      	movs	r3, #1
 8004860:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f383 8810 	msr	PRIMASK, r3
}
 8004868:	46c0      	nop			@ (mov r8, r8)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	438a      	bics	r2, r1
 8004878:	609a      	str	r2, [r3, #8]
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f383 8810 	msr	PRIMASK, r3
}
 8004884:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	228c      	movs	r2, #140	@ 0x8c
 800488a:	2120      	movs	r1, #32
 800488c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2284      	movs	r2, #132	@ 0x84
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e012      	b.n	80048c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2288      	movs	r2, #136	@ 0x88
 800489e:	2120      	movs	r1, #32
 80048a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	228c      	movs	r2, #140	@ 0x8c
 80048a6:	2120      	movs	r1, #32
 80048a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2284      	movs	r2, #132	@ 0x84
 80048ba:	2100      	movs	r1, #0
 80048bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	0018      	movs	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b010      	add	sp, #64	@ 0x40
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	01ffffff 	.word	0x01ffffff
 80048cc:	fffffedf 	.word	0xfffffedf

080048d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	1dfb      	adds	r3, r7, #7
 80048de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e0:	e051      	b.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	3301      	adds	r3, #1
 80048e6:	d04e      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e8:	f7fc f9d2 	bl	8000c90 <HAL_GetTick>
 80048ec:	0002      	movs	r2, r0
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e051      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2204      	movs	r2, #4
 800490a:	4013      	ands	r3, r2
 800490c:	d03b      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb6>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b80      	cmp	r3, #128	@ 0x80
 8004912:	d038      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b40      	cmp	r3, #64	@ 0x40
 8004918:	d035      	beq.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	2208      	movs	r2, #8
 8004922:	4013      	ands	r3, r2
 8004924:	2b08      	cmp	r3, #8
 8004926:	d111      	bne.n	800494c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2208      	movs	r2, #8
 800492e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	0018      	movs	r0, r3
 8004934:	f000 f960 	bl	8004bf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2290      	movs	r2, #144	@ 0x90
 800493c:	2108      	movs	r1, #8
 800493e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2284      	movs	r2, #132	@ 0x84
 8004944:	2100      	movs	r1, #0
 8004946:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e02c      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69da      	ldr	r2, [r3, #28]
 8004952:	2380      	movs	r3, #128	@ 0x80
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	401a      	ands	r2, r3
 8004958:	2380      	movs	r3, #128	@ 0x80
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	429a      	cmp	r2, r3
 800495e:	d112      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2280      	movs	r2, #128	@ 0x80
 8004966:	0112      	lsls	r2, r2, #4
 8004968:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 f943 	bl	8004bf8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2290      	movs	r2, #144	@ 0x90
 8004976:	2120      	movs	r1, #32
 8004978:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2284      	movs	r2, #132	@ 0x84
 800497e:	2100      	movs	r1, #0
 8004980:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e00f      	b.n	80049a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	4013      	ands	r3, r2
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	425a      	negs	r2, r3
 8004996:	4153      	adcs	r3, r2
 8004998:	b2db      	uxtb	r3, r3
 800499a:	001a      	movs	r2, r3
 800499c:	1dfb      	adds	r3, r7, #7
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d09e      	beq.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b004      	add	sp, #16
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b098      	sub	sp, #96	@ 0x60
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	1dbb      	adds	r3, r7, #6
 80049bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1dba      	adds	r2, r7, #6
 80049c8:	215c      	movs	r1, #92	@ 0x5c
 80049ca:	8812      	ldrh	r2, [r2, #0]
 80049cc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1dba      	adds	r2, r7, #6
 80049d2:	215e      	movs	r1, #94	@ 0x5e
 80049d4:	8812      	ldrh	r2, [r2, #0]
 80049d6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	2380      	movs	r3, #128	@ 0x80
 80049e4:	015b      	lsls	r3, r3, #5
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d10d      	bne.n	8004a06 <UART_Start_Receive_IT+0x56>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d104      	bne.n	80049fc <UART_Start_Receive_IT+0x4c>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2260      	movs	r2, #96	@ 0x60
 80049f6:	497b      	ldr	r1, [pc, #492]	@ (8004be4 <UART_Start_Receive_IT+0x234>)
 80049f8:	5299      	strh	r1, [r3, r2]
 80049fa:	e02e      	b.n	8004a5a <UART_Start_Receive_IT+0xaa>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2260      	movs	r2, #96	@ 0x60
 8004a00:	21ff      	movs	r1, #255	@ 0xff
 8004a02:	5299      	strh	r1, [r3, r2]
 8004a04:	e029      	b.n	8004a5a <UART_Start_Receive_IT+0xaa>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <UART_Start_Receive_IT+0x7a>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <UART_Start_Receive_IT+0x70>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2260      	movs	r2, #96	@ 0x60
 8004a1a:	21ff      	movs	r1, #255	@ 0xff
 8004a1c:	5299      	strh	r1, [r3, r2]
 8004a1e:	e01c      	b.n	8004a5a <UART_Start_Receive_IT+0xaa>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2260      	movs	r2, #96	@ 0x60
 8004a24:	217f      	movs	r1, #127	@ 0x7f
 8004a26:	5299      	strh	r1, [r3, r2]
 8004a28:	e017      	b.n	8004a5a <UART_Start_Receive_IT+0xaa>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	2380      	movs	r3, #128	@ 0x80
 8004a30:	055b      	lsls	r3, r3, #21
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d10d      	bne.n	8004a52 <UART_Start_Receive_IT+0xa2>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d104      	bne.n	8004a48 <UART_Start_Receive_IT+0x98>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2260      	movs	r2, #96	@ 0x60
 8004a42:	217f      	movs	r1, #127	@ 0x7f
 8004a44:	5299      	strh	r1, [r3, r2]
 8004a46:	e008      	b.n	8004a5a <UART_Start_Receive_IT+0xaa>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2260      	movs	r2, #96	@ 0x60
 8004a4c:	213f      	movs	r1, #63	@ 0x3f
 8004a4e:	5299      	strh	r1, [r3, r2]
 8004a50:	e003      	b.n	8004a5a <UART_Start_Receive_IT+0xaa>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2260      	movs	r2, #96	@ 0x60
 8004a56:	2100      	movs	r1, #0
 8004a58:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2290      	movs	r2, #144	@ 0x90
 8004a5e:	2100      	movs	r1, #0
 8004a60:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	228c      	movs	r2, #140	@ 0x8c
 8004a66:	2122      	movs	r1, #34	@ 0x22
 8004a68:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a74:	2301      	movs	r3, #1
 8004a76:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7a:	f383 8810 	msr	PRIMASK, r3
}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
 8004a90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a92:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a96:	f383 8810 	msr	PRIMASK, r3
}
 8004a9a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	059b      	lsls	r3, r3, #22
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d150      	bne.n	8004b4a <UART_Start_Receive_IT+0x19a>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2268      	movs	r2, #104	@ 0x68
 8004aac:	5a9b      	ldrh	r3, [r3, r2]
 8004aae:	1dba      	adds	r2, r7, #6
 8004ab0:	8812      	ldrh	r2, [r2, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d349      	bcc.n	8004b4a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	2380      	movs	r3, #128	@ 0x80
 8004abc:	015b      	lsls	r3, r3, #5
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d107      	bne.n	8004ad2 <UART_Start_Receive_IT+0x122>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a46      	ldr	r2, [pc, #280]	@ (8004be8 <UART_Start_Receive_IT+0x238>)
 8004ace:	675a      	str	r2, [r3, #116]	@ 0x74
 8004ad0:	e002      	b.n	8004ad8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a45      	ldr	r2, [pc, #276]	@ (8004bec <UART_Start_Receive_IT+0x23c>)
 8004ad6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d019      	beq.n	8004b14 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aea:	2301      	movs	r3, #1
 8004aec:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af0:	f383 8810 	msr	PRIMASK, r3
}
 8004af4:	46c0      	nop			@ (mov r8, r8)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2180      	movs	r1, #128	@ 0x80
 8004b02:	0049      	lsls	r1, r1, #1
 8004b04:	430a      	orrs	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b0e:	f383 8810 	msr	PRIMASK, r3
}
 8004b12:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b14:	f3ef 8310 	mrs	r3, PRIMASK
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b1e:	2301      	movs	r3, #1
 8004b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b24:	f383 8810 	msr	PRIMASK, r3
}
 8004b28:	46c0      	nop			@ (mov r8, r8)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2180      	movs	r1, #128	@ 0x80
 8004b36:	0549      	lsls	r1, r1, #21
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
 8004b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	f383 8810 	msr	PRIMASK, r3
}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	e047      	b.n	8004bda <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	015b      	lsls	r3, r3, #5
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d107      	bne.n	8004b66 <UART_Start_Receive_IT+0x1b6>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4a23      	ldr	r2, [pc, #140]	@ (8004bf0 <UART_Start_Receive_IT+0x240>)
 8004b62:	675a      	str	r2, [r3, #116]	@ 0x74
 8004b64:	e002      	b.n	8004b6c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a22      	ldr	r2, [pc, #136]	@ (8004bf4 <UART_Start_Receive_IT+0x244>)
 8004b6a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d019      	beq.n	8004ba8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b74:	f3ef 8310 	mrs	r3, PRIMASK
 8004b78:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b7a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b7e:	2301      	movs	r3, #1
 8004b80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			@ (mov r8, r8)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2190      	movs	r1, #144	@ 0x90
 8004b96:	0049      	lsls	r1, r1, #1
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	e018      	b.n	8004bda <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bac:	613b      	str	r3, [r7, #16]
  return(result);
 8004bae:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f383 8810 	msr	PRIMASK, r3
}
 8004bbc:	46c0      	nop			@ (mov r8, r8)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2120      	movs	r1, #32
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f383 8810 	msr	PRIMASK, r3
}
 8004bd8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	0018      	movs	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b018      	add	sp, #96	@ 0x60
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	000001ff 	.word	0x000001ff
 8004be8:	080053ed 	.word	0x080053ed
 8004bec:	080050bd 	.word	0x080050bd
 8004bf0:	08004f05 	.word	0x08004f05
 8004bf4:	08004d4d 	.word	0x08004d4d

08004bf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08e      	sub	sp, #56	@ 0x38
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c00:	f3ef 8310 	mrs	r3, PRIMASK
 8004c04:	617b      	str	r3, [r7, #20]
  return(result);
 8004c06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f383 8810 	msr	PRIMASK, r3
}
 8004c14:	46c0      	nop			@ (mov r8, r8)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4926      	ldr	r1, [pc, #152]	@ (8004cbc <UART_EndRxTransfer+0xc4>)
 8004c22:	400a      	ands	r2, r1
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c32:	f3ef 8310 	mrs	r3, PRIMASK
 8004c36:	623b      	str	r3, [r7, #32]
  return(result);
 8004c38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	f383 8810 	msr	PRIMASK, r3
}
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	491b      	ldr	r1, [pc, #108]	@ (8004cc0 <UART_EndRxTransfer+0xc8>)
 8004c54:	400a      	ands	r2, r1
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5e:	f383 8810 	msr	PRIMASK, r3
}
 8004c62:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d118      	bne.n	8004c9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c70:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c76:	2301      	movs	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f383 8810 	msr	PRIMASK, r3
}
 8004c80:	46c0      	nop			@ (mov r8, r8)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2110      	movs	r1, #16
 8004c8e:	438a      	bics	r2, r1
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f383 8810 	msr	PRIMASK, r3
}
 8004c9c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	228c      	movs	r2, #140	@ 0x8c
 8004ca2:	2120      	movs	r1, #32
 8004ca4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b00e      	add	sp, #56	@ 0x38
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	fffffedf 	.word	0xfffffedf
 8004cc0:	effffffe 	.word	0xeffffffe

08004cc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	225e      	movs	r2, #94	@ 0x5e
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2256      	movs	r2, #86	@ 0x56
 8004cde:	2100      	movs	r1, #0
 8004ce0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f7ff fb17 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b004      	add	sp, #16
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004cfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d00:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	2301      	movs	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f383 8810 	msr	PRIMASK, r3
}
 8004d0e:	46c0      	nop			@ (mov r8, r8)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2140      	movs	r1, #64	@ 0x40
 8004d1c:	438a      	bics	r2, r1
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f383 8810 	msr	PRIMASK, r3
}
 8004d2a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2288      	movs	r2, #136	@ 0x88
 8004d30:	2120      	movs	r1, #32
 8004d32:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7ff fae3 	bl	8004308 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d42:	46c0      	nop			@ (mov r8, r8)
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b006      	add	sp, #24
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b094      	sub	sp, #80	@ 0x50
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d54:	204e      	movs	r0, #78	@ 0x4e
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	2160      	movs	r1, #96	@ 0x60
 8004d5c:	5a52      	ldrh	r2, [r2, r1]
 8004d5e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	228c      	movs	r2, #140	@ 0x8c
 8004d64:	589b      	ldr	r3, [r3, r2]
 8004d66:	2b22      	cmp	r3, #34	@ 0x22
 8004d68:	d000      	beq.n	8004d6c <UART_RxISR_8BIT+0x20>
 8004d6a:	e0ba      	b.n	8004ee2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d72:	214c      	movs	r1, #76	@ 0x4c
 8004d74:	187b      	adds	r3, r7, r1
 8004d76:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	183b      	adds	r3, r7, r0
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b2d9      	uxtb	r1, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d88:	400a      	ands	r2, r1
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	225e      	movs	r2, #94	@ 0x5e
 8004d9c:	5a9b      	ldrh	r3, [r3, r2]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b299      	uxth	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	225e      	movs	r2, #94	@ 0x5e
 8004da8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	225e      	movs	r2, #94	@ 0x5e
 8004dae:	5a9b      	ldrh	r3, [r3, r2]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d000      	beq.n	8004db8 <UART_RxISR_8BIT+0x6c>
 8004db6:	e09c      	b.n	8004ef2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	f383 8810 	msr	PRIMASK, r3
}
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4948      	ldr	r1, [pc, #288]	@ (8004efc <UART_RxISR_8BIT+0x1b0>)
 8004dda:	400a      	ands	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de4:	f383 8810 	msr	PRIMASK, r3
}
 8004de8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dea:	f3ef 8310 	mrs	r3, PRIMASK
 8004dee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004df4:	2301      	movs	r3, #1
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dfa:	f383 8810 	msr	PRIMASK, r3
}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	438a      	bics	r2, r1
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e16:	f383 8810 	msr	PRIMASK, r3
}
 8004e1a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	228c      	movs	r2, #140	@ 0x8c
 8004e20:	2120      	movs	r1, #32
 8004e22:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	2380      	movs	r3, #128	@ 0x80
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d018      	beq.n	8004e70 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e42:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e44:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e46:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f383 8810 	msr	PRIMASK, r3
}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4928      	ldr	r1, [pc, #160]	@ (8004f00 <UART_RxISR_8BIT+0x1b4>)
 8004e60:	400a      	ands	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	f383 8810 	msr	PRIMASK, r3
}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d12f      	bne.n	8004ed8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e82:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e84:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e88:	2301      	movs	r3, #1
 8004e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f383 8810 	msr	PRIMASK, r3
}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2110      	movs	r1, #16
 8004ea0:	438a      	bics	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f383 8810 	msr	PRIMASK, r3
}
 8004eae:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	2210      	movs	r2, #16
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b10      	cmp	r3, #16
 8004ebc:	d103      	bne.n	8004ec6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2210      	movs	r2, #16
 8004ec4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	225c      	movs	r2, #92	@ 0x5c
 8004eca:	5a9a      	ldrh	r2, [r3, r2]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	0011      	movs	r1, r2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7ff fa29 	bl	8004328 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ed6:	e00c      	b.n	8004ef2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	0018      	movs	r0, r3
 8004edc:	f000 fdee 	bl	8005abc <HAL_UART_RxCpltCallback>
}
 8004ee0:	e007      	b.n	8004ef2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2108      	movs	r1, #8
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	619a      	str	r2, [r3, #24]
}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b014      	add	sp, #80	@ 0x50
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	fffffedf 	.word	0xfffffedf
 8004f00:	fbffffff 	.word	0xfbffffff

08004f04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b094      	sub	sp, #80	@ 0x50
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f0c:	204e      	movs	r0, #78	@ 0x4e
 8004f0e:	183b      	adds	r3, r7, r0
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	2160      	movs	r1, #96	@ 0x60
 8004f14:	5a52      	ldrh	r2, [r2, r1]
 8004f16:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	228c      	movs	r2, #140	@ 0x8c
 8004f1c:	589b      	ldr	r3, [r3, r2]
 8004f1e:	2b22      	cmp	r3, #34	@ 0x22
 8004f20:	d000      	beq.n	8004f24 <UART_RxISR_16BIT+0x20>
 8004f22:	e0ba      	b.n	800509a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f2a:	214c      	movs	r1, #76	@ 0x4c
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f34:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f36:	187b      	adds	r3, r7, r1
 8004f38:	183a      	adds	r2, r7, r0
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	8812      	ldrh	r2, [r2, #0]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4a:	1c9a      	adds	r2, r3, #2
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	225e      	movs	r2, #94	@ 0x5e
 8004f54:	5a9b      	ldrh	r3, [r3, r2]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b299      	uxth	r1, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	225e      	movs	r2, #94	@ 0x5e
 8004f60:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	225e      	movs	r2, #94	@ 0x5e
 8004f66:	5a9b      	ldrh	r3, [r3, r2]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d000      	beq.n	8004f70 <UART_RxISR_16BIT+0x6c>
 8004f6e:	e09c      	b.n	80050aa <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f70:	f3ef 8310 	mrs	r3, PRIMASK
 8004f74:	623b      	str	r3, [r7, #32]
  return(result);
 8004f76:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	f383 8810 	msr	PRIMASK, r3
}
 8004f84:	46c0      	nop			@ (mov r8, r8)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4948      	ldr	r1, [pc, #288]	@ (80050b4 <UART_RxISR_16BIT+0x1b0>)
 8004f92:	400a      	ands	r2, r1
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	f383 8810 	msr	PRIMASK, r3
}
 8004fa0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fac:	2301      	movs	r3, #1
 8004fae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	f383 8810 	msr	PRIMASK, r3
}
 8004fb6:	46c0      	nop			@ (mov r8, r8)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	438a      	bics	r2, r1
 8004fc6:	609a      	str	r2, [r3, #8]
 8004fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fce:	f383 8810 	msr	PRIMASK, r3
}
 8004fd2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	228c      	movs	r2, #140	@ 0x8c
 8004fd8:	2120      	movs	r1, #32
 8004fda:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	2380      	movs	r3, #128	@ 0x80
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d018      	beq.n	8005028 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8004ffa:	617b      	str	r3, [r7, #20]
  return(result);
 8004ffc:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005000:	2301      	movs	r3, #1
 8005002:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	f383 8810 	msr	PRIMASK, r3
}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4928      	ldr	r1, [pc, #160]	@ (80050b8 <UART_RxISR_16BIT+0x1b4>)
 8005018:	400a      	ands	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f383 8810 	msr	PRIMASK, r3
}
 8005026:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800502c:	2b01      	cmp	r3, #1
 800502e:	d12f      	bne.n	8005090 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005036:	f3ef 8310 	mrs	r3, PRIMASK
 800503a:	60bb      	str	r3, [r7, #8]
  return(result);
 800503c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005040:	2301      	movs	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f383 8810 	msr	PRIMASK, r3
}
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2110      	movs	r1, #16
 8005058:	438a      	bics	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f383 8810 	msr	PRIMASK, r3
}
 8005066:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	2210      	movs	r2, #16
 8005070:	4013      	ands	r3, r2
 8005072:	2b10      	cmp	r3, #16
 8005074:	d103      	bne.n	800507e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2210      	movs	r2, #16
 800507c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	225c      	movs	r2, #92	@ 0x5c
 8005082:	5a9a      	ldrh	r2, [r3, r2]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	0011      	movs	r1, r2
 8005088:	0018      	movs	r0, r3
 800508a:	f7ff f94d 	bl	8004328 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800508e:	e00c      	b.n	80050aa <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	0018      	movs	r0, r3
 8005094:	f000 fd12 	bl	8005abc <HAL_UART_RxCpltCallback>
}
 8005098:	e007      	b.n	80050aa <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2108      	movs	r1, #8
 80050a6:	430a      	orrs	r2, r1
 80050a8:	619a      	str	r2, [r3, #24]
}
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b014      	add	sp, #80	@ 0x50
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	46c0      	nop			@ (mov r8, r8)
 80050b4:	fffffedf 	.word	0xfffffedf
 80050b8:	fbffffff 	.word	0xfbffffff

080050bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b0a0      	sub	sp, #128	@ 0x80
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80050c4:	237a      	movs	r3, #122	@ 0x7a
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	2160      	movs	r1, #96	@ 0x60
 80050cc:	5a52      	ldrh	r2, [r2, r1]
 80050ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	228c      	movs	r2, #140	@ 0x8c
 80050ec:	589b      	ldr	r3, [r3, r2]
 80050ee:	2b22      	cmp	r3, #34	@ 0x22
 80050f0:	d000      	beq.n	80050f4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80050f2:	e165      	b.n	80053c0 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80050f4:	236e      	movs	r3, #110	@ 0x6e
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	2168      	movs	r1, #104	@ 0x68
 80050fc:	5a52      	ldrh	r2, [r2, r1]
 80050fe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005100:	e10c      	b.n	800531c <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005108:	216c      	movs	r1, #108	@ 0x6c
 800510a:	187b      	adds	r3, r7, r1
 800510c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800510e:	187b      	adds	r3, r7, r1
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	237a      	movs	r3, #122	@ 0x7a
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b2d9      	uxtb	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005120:	400a      	ands	r2, r1
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	225e      	movs	r2, #94	@ 0x5e
 8005134:	5a9b      	ldrh	r3, [r3, r2]
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b299      	uxth	r1, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	225e      	movs	r2, #94	@ 0x5e
 8005140:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800514a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800514c:	2207      	movs	r2, #7
 800514e:	4013      	ands	r3, r2
 8005150:	d049      	beq.n	80051e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005152:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005154:	2201      	movs	r2, #1
 8005156:	4013      	ands	r3, r2
 8005158:	d010      	beq.n	800517c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800515a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	4013      	ands	r3, r2
 8005162:	d00b      	beq.n	800517c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2201      	movs	r2, #1
 800516a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2290      	movs	r2, #144	@ 0x90
 8005170:	589b      	ldr	r3, [r3, r2]
 8005172:	2201      	movs	r2, #1
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2190      	movs	r1, #144	@ 0x90
 800517a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800517c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800517e:	2202      	movs	r2, #2
 8005180:	4013      	ands	r3, r2
 8005182:	d00f      	beq.n	80051a4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005184:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005186:	2201      	movs	r2, #1
 8005188:	4013      	ands	r3, r2
 800518a:	d00b      	beq.n	80051a4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2202      	movs	r2, #2
 8005192:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2290      	movs	r2, #144	@ 0x90
 8005198:	589b      	ldr	r3, [r3, r2]
 800519a:	2204      	movs	r2, #4
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2190      	movs	r1, #144	@ 0x90
 80051a2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051a6:	2204      	movs	r2, #4
 80051a8:	4013      	ands	r3, r2
 80051aa:	d00f      	beq.n	80051cc <UART_RxISR_8BIT_FIFOEN+0x110>
 80051ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051ae:	2201      	movs	r2, #1
 80051b0:	4013      	ands	r3, r2
 80051b2:	d00b      	beq.n	80051cc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2204      	movs	r2, #4
 80051ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2290      	movs	r2, #144	@ 0x90
 80051c0:	589b      	ldr	r3, [r3, r2]
 80051c2:	2202      	movs	r2, #2
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2190      	movs	r1, #144	@ 0x90
 80051ca:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2290      	movs	r2, #144	@ 0x90
 80051d0:	589b      	ldr	r3, [r3, r2]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	0018      	movs	r0, r3
 80051da:	f7ff f89d 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2290      	movs	r2, #144	@ 0x90
 80051e2:	2100      	movs	r1, #0
 80051e4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	225e      	movs	r2, #94	@ 0x5e
 80051ea:	5a9b      	ldrh	r3, [r3, r2]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d000      	beq.n	80051f4 <UART_RxISR_8BIT_FIFOEN+0x138>
 80051f2:	e093      	b.n	800531c <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f4:	f3ef 8310 	mrs	r3, PRIMASK
 80051f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80051fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051fe:	2301      	movs	r3, #1
 8005200:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005204:	f383 8810 	msr	PRIMASK, r3
}
 8005208:	46c0      	nop			@ (mov r8, r8)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4970      	ldr	r1, [pc, #448]	@ (80053d8 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 8005216:	400a      	ands	r2, r1
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800521c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005220:	f383 8810 	msr	PRIMASK, r3
}
 8005224:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005226:	f3ef 8310 	mrs	r3, PRIMASK
 800522a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800522c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800522e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005230:	2301      	movs	r3, #1
 8005232:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005236:	f383 8810 	msr	PRIMASK, r3
}
 800523a:	46c0      	nop			@ (mov r8, r8)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4965      	ldr	r1, [pc, #404]	@ (80053dc <UART_RxISR_8BIT_FIFOEN+0x320>)
 8005248:	400a      	ands	r2, r1
 800524a:	609a      	str	r2, [r3, #8]
 800524c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800524e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005252:	f383 8810 	msr	PRIMASK, r3
}
 8005256:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	228c      	movs	r2, #140	@ 0x8c
 800525c:	2120      	movs	r1, #32
 800525e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	2380      	movs	r3, #128	@ 0x80
 8005274:	041b      	lsls	r3, r3, #16
 8005276:	4013      	ands	r3, r2
 8005278:	d018      	beq.n	80052ac <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527a:	f3ef 8310 	mrs	r3, PRIMASK
 800527e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005282:	663b      	str	r3, [r7, #96]	@ 0x60
 8005284:	2301      	movs	r3, #1
 8005286:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	f383 8810 	msr	PRIMASK, r3
}
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4951      	ldr	r1, [pc, #324]	@ (80053e0 <UART_RxISR_8BIT_FIFOEN+0x324>)
 800529c:	400a      	ands	r2, r1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a6:	f383 8810 	msr	PRIMASK, r3
}
 80052aa:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d12f      	bne.n	8005314 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ba:	f3ef 8310 	mrs	r3, PRIMASK
 80052be:	623b      	str	r3, [r7, #32]
  return(result);
 80052c0:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052c4:	2301      	movs	r3, #1
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	f383 8810 	msr	PRIMASK, r3
}
 80052ce:	46c0      	nop			@ (mov r8, r8)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2110      	movs	r1, #16
 80052dc:	438a      	bics	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	f383 8810 	msr	PRIMASK, r3
}
 80052ea:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	2210      	movs	r2, #16
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d103      	bne.n	8005302 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2210      	movs	r2, #16
 8005300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	225c      	movs	r2, #92	@ 0x5c
 8005306:	5a9a      	ldrh	r2, [r3, r2]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	0011      	movs	r1, r2
 800530c:	0018      	movs	r0, r3
 800530e:	f7ff f80b 	bl	8004328 <HAL_UARTEx_RxEventCallback>
 8005312:	e003      	b.n	800531c <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	0018      	movs	r0, r3
 8005318:	f000 fbd0 	bl	8005abc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800531c:	236e      	movs	r3, #110	@ 0x6e
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <UART_RxISR_8BIT_FIFOEN+0x274>
 8005326:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005328:	2220      	movs	r2, #32
 800532a:	4013      	ands	r3, r2
 800532c:	d000      	beq.n	8005330 <UART_RxISR_8BIT_FIFOEN+0x274>
 800532e:	e6e8      	b.n	8005102 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005330:	205a      	movs	r0, #90	@ 0x5a
 8005332:	183b      	adds	r3, r7, r0
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	215e      	movs	r1, #94	@ 0x5e
 8005338:	5a52      	ldrh	r2, [r2, r1]
 800533a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800533c:	0001      	movs	r1, r0
 800533e:	187b      	adds	r3, r7, r1
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d044      	beq.n	80053d0 <UART_RxISR_8BIT_FIFOEN+0x314>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2268      	movs	r2, #104	@ 0x68
 800534a:	5a9b      	ldrh	r3, [r3, r2]
 800534c:	187a      	adds	r2, r7, r1
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d23d      	bcs.n	80053d0 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005354:	f3ef 8310 	mrs	r3, PRIMASK
 8005358:	60bb      	str	r3, [r7, #8]
  return(result);
 800535a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800535c:	657b      	str	r3, [r7, #84]	@ 0x54
 800535e:	2301      	movs	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f383 8810 	msr	PRIMASK, r3
}
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	491b      	ldr	r1, [pc, #108]	@ (80053e4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005376:	400a      	ands	r2, r1
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f383 8810 	msr	PRIMASK, r3
}
 8005384:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a17      	ldr	r2, [pc, #92]	@ (80053e8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800538a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538c:	f3ef 8310 	mrs	r3, PRIMASK
 8005390:	617b      	str	r3, [r7, #20]
  return(result);
 8005392:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005394:	653b      	str	r3, [r7, #80]	@ 0x50
 8005396:	2301      	movs	r3, #1
 8005398:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f383 8810 	msr	PRIMASK, r3
}
 80053a0:	46c0      	nop			@ (mov r8, r8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2120      	movs	r1, #32
 80053ae:	430a      	orrs	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f383 8810 	msr	PRIMASK, r3
}
 80053bc:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053be:	e007      	b.n	80053d0 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2108      	movs	r1, #8
 80053cc:	430a      	orrs	r2, r1
 80053ce:	619a      	str	r2, [r3, #24]
}
 80053d0:	46c0      	nop			@ (mov r8, r8)
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b020      	add	sp, #128	@ 0x80
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	fffffeff 	.word	0xfffffeff
 80053dc:	effffffe 	.word	0xeffffffe
 80053e0:	fbffffff 	.word	0xfbffffff
 80053e4:	efffffff 	.word	0xefffffff
 80053e8:	08004d4d 	.word	0x08004d4d

080053ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b0a2      	sub	sp, #136	@ 0x88
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80053f4:	2382      	movs	r3, #130	@ 0x82
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	2160      	movs	r1, #96	@ 0x60
 80053fc:	5a52      	ldrh	r2, [r2, r1]
 80053fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	2284      	movs	r2, #132	@ 0x84
 8005408:	18ba      	adds	r2, r7, r2
 800540a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	228c      	movs	r2, #140	@ 0x8c
 8005420:	589b      	ldr	r3, [r3, r2]
 8005422:	2b22      	cmp	r3, #34	@ 0x22
 8005424:	d000      	beq.n	8005428 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005426:	e16f      	b.n	8005708 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005428:	2376      	movs	r3, #118	@ 0x76
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	2168      	movs	r1, #104	@ 0x68
 8005430:	5a52      	ldrh	r2, [r2, r1]
 8005432:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005434:	e114      	b.n	8005660 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800543c:	2174      	movs	r1, #116	@ 0x74
 800543e:	187b      	adds	r3, r7, r1
 8005440:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005446:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005448:	187b      	adds	r3, r7, r1
 800544a:	2282      	movs	r2, #130	@ 0x82
 800544c:	18ba      	adds	r2, r7, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	4013      	ands	r3, r2
 8005454:	b29a      	uxth	r2, r3
 8005456:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005458:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800545e:	1c9a      	adds	r2, r3, #2
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	225e      	movs	r2, #94	@ 0x5e
 8005468:	5a9b      	ldrh	r3, [r3, r2]
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b299      	uxth	r1, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	225e      	movs	r2, #94	@ 0x5e
 8005474:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	2184      	movs	r1, #132	@ 0x84
 800547e:	187a      	adds	r2, r7, r1
 8005480:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005482:	187b      	adds	r3, r7, r1
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2207      	movs	r2, #7
 8005488:	4013      	ands	r3, r2
 800548a:	d04e      	beq.n	800552a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800548c:	187b      	adds	r3, r7, r1
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2201      	movs	r2, #1
 8005492:	4013      	ands	r3, r2
 8005494:	d010      	beq.n	80054b8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005496:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005498:	2380      	movs	r3, #128	@ 0x80
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	4013      	ands	r3, r2
 800549e:	d00b      	beq.n	80054b8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2201      	movs	r2, #1
 80054a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2290      	movs	r2, #144	@ 0x90
 80054ac:	589b      	ldr	r3, [r3, r2]
 80054ae:	2201      	movs	r2, #1
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2190      	movs	r1, #144	@ 0x90
 80054b6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b8:	2384      	movs	r3, #132	@ 0x84
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2202      	movs	r2, #2
 80054c0:	4013      	ands	r3, r2
 80054c2:	d00f      	beq.n	80054e4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80054c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054c6:	2201      	movs	r2, #1
 80054c8:	4013      	ands	r3, r2
 80054ca:	d00b      	beq.n	80054e4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2202      	movs	r2, #2
 80054d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2290      	movs	r2, #144	@ 0x90
 80054d8:	589b      	ldr	r3, [r3, r2]
 80054da:	2204      	movs	r2, #4
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2190      	movs	r1, #144	@ 0x90
 80054e2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054e4:	2384      	movs	r3, #132	@ 0x84
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2204      	movs	r2, #4
 80054ec:	4013      	ands	r3, r2
 80054ee:	d00f      	beq.n	8005510 <UART_RxISR_16BIT_FIFOEN+0x124>
 80054f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054f2:	2201      	movs	r2, #1
 80054f4:	4013      	ands	r3, r2
 80054f6:	d00b      	beq.n	8005510 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2204      	movs	r2, #4
 80054fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2290      	movs	r2, #144	@ 0x90
 8005504:	589b      	ldr	r3, [r3, r2]
 8005506:	2202      	movs	r2, #2
 8005508:	431a      	orrs	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2190      	movs	r1, #144	@ 0x90
 800550e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2290      	movs	r2, #144	@ 0x90
 8005514:	589b      	ldr	r3, [r3, r2]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	0018      	movs	r0, r3
 800551e:	f7fe fefb 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2290      	movs	r2, #144	@ 0x90
 8005526:	2100      	movs	r1, #0
 8005528:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	225e      	movs	r2, #94	@ 0x5e
 800552e:	5a9b      	ldrh	r3, [r3, r2]
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d000      	beq.n	8005538 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005536:	e093      	b.n	8005660 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005538:	f3ef 8310 	mrs	r3, PRIMASK
 800553c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800553e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005540:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005542:	2301      	movs	r3, #1
 8005544:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005548:	f383 8810 	msr	PRIMASK, r3
}
 800554c:	46c0      	nop			@ (mov r8, r8)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4971      	ldr	r1, [pc, #452]	@ (8005720 <UART_RxISR_16BIT_FIFOEN+0x334>)
 800555a:	400a      	ands	r2, r1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005560:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005564:	f383 8810 	msr	PRIMASK, r3
}
 8005568:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800556a:	f3ef 8310 	mrs	r3, PRIMASK
 800556e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005572:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005574:	2301      	movs	r3, #1
 8005576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800557a:	f383 8810 	msr	PRIMASK, r3
}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4966      	ldr	r1, [pc, #408]	@ (8005724 <UART_RxISR_16BIT_FIFOEN+0x338>)
 800558c:	400a      	ands	r2, r1
 800558e:	609a      	str	r2, [r3, #8]
 8005590:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005592:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005596:	f383 8810 	msr	PRIMASK, r3
}
 800559a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	228c      	movs	r2, #140	@ 0x8c
 80055a0:	2120      	movs	r1, #32
 80055a2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	2380      	movs	r3, #128	@ 0x80
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	4013      	ands	r3, r2
 80055bc:	d018      	beq.n	80055f0 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055be:	f3ef 8310 	mrs	r3, PRIMASK
 80055c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80055c8:	2301      	movs	r3, #1
 80055ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ce:	f383 8810 	msr	PRIMASK, r3
}
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4952      	ldr	r1, [pc, #328]	@ (8005728 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 80055e0:	400a      	ands	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	f383 8810 	msr	PRIMASK, r3
}
 80055ee:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d12f      	bne.n	8005658 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005606:	663b      	str	r3, [r7, #96]	@ 0x60
 8005608:	2301      	movs	r3, #1
 800560a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	f383 8810 	msr	PRIMASK, r3
}
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2110      	movs	r1, #16
 8005620:	438a      	bics	r2, r1
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800562a:	f383 8810 	msr	PRIMASK, r3
}
 800562e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	2210      	movs	r2, #16
 8005638:	4013      	ands	r3, r2
 800563a:	2b10      	cmp	r3, #16
 800563c:	d103      	bne.n	8005646 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2210      	movs	r2, #16
 8005644:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	225c      	movs	r2, #92	@ 0x5c
 800564a:	5a9a      	ldrh	r2, [r3, r2]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	0011      	movs	r1, r2
 8005650:	0018      	movs	r0, r3
 8005652:	f7fe fe69 	bl	8004328 <HAL_UARTEx_RxEventCallback>
 8005656:	e003      	b.n	8005660 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	0018      	movs	r0, r3
 800565c:	f000 fa2e 	bl	8005abc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005660:	2376      	movs	r3, #118	@ 0x76
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d006      	beq.n	8005678 <UART_RxISR_16BIT_FIFOEN+0x28c>
 800566a:	2384      	movs	r3, #132	@ 0x84
 800566c:	18fb      	adds	r3, r7, r3
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2220      	movs	r2, #32
 8005672:	4013      	ands	r3, r2
 8005674:	d000      	beq.n	8005678 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8005676:	e6de      	b.n	8005436 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005678:	205e      	movs	r0, #94	@ 0x5e
 800567a:	183b      	adds	r3, r7, r0
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	215e      	movs	r1, #94	@ 0x5e
 8005680:	5a52      	ldrh	r2, [r2, r1]
 8005682:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005684:	0001      	movs	r1, r0
 8005686:	187b      	adds	r3, r7, r1
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d044      	beq.n	8005718 <UART_RxISR_16BIT_FIFOEN+0x32c>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2268      	movs	r2, #104	@ 0x68
 8005692:	5a9b      	ldrh	r3, [r3, r2]
 8005694:	187a      	adds	r2, r7, r1
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d23d      	bcs.n	8005718 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569c:	f3ef 8310 	mrs	r3, PRIMASK
 80056a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80056a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056a6:	2301      	movs	r3, #1
 80056a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f383 8810 	msr	PRIMASK, r3
}
 80056b0:	46c0      	nop			@ (mov r8, r8)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	491b      	ldr	r1, [pc, #108]	@ (800572c <UART_RxISR_16BIT_FIFOEN+0x340>)
 80056be:	400a      	ands	r2, r1
 80056c0:	609a      	str	r2, [r3, #8]
 80056c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f383 8810 	msr	PRIMASK, r3
}
 80056cc:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a17      	ldr	r2, [pc, #92]	@ (8005730 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80056d2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d4:	f3ef 8310 	mrs	r3, PRIMASK
 80056d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80056da:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80056de:	2301      	movs	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	f383 8810 	msr	PRIMASK, r3
}
 80056e8:	46c0      	nop			@ (mov r8, r8)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2120      	movs	r1, #32
 80056f6:	430a      	orrs	r2, r1
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	f383 8810 	msr	PRIMASK, r3
}
 8005704:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005706:	e007      	b.n	8005718 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699a      	ldr	r2, [r3, #24]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2108      	movs	r1, #8
 8005714:	430a      	orrs	r2, r1
 8005716:	619a      	str	r2, [r3, #24]
}
 8005718:	46c0      	nop			@ (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	b022      	add	sp, #136	@ 0x88
 800571e:	bd80      	pop	{r7, pc}
 8005720:	fffffeff 	.word	0xfffffeff
 8005724:	effffffe 	.word	0xeffffffe
 8005728:	fbffffff 	.word	0xfbffffff
 800572c:	efffffff 	.word	0xefffffff
 8005730:	08004f05 	.word	0x08004f05

08005734 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800573c:	46c0      	nop			@ (mov r8, r8)
 800573e:	46bd      	mov	sp, r7
 8005740:	b002      	add	sp, #8
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800574c:	46c0      	nop			@ (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	b002      	add	sp, #8
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800575c:	46c0      	nop			@ (mov r8, r8)
 800575e:	46bd      	mov	sp, r7
 8005760:	b002      	add	sp, #8
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2284      	movs	r2, #132	@ 0x84
 8005770:	5c9b      	ldrb	r3, [r3, r2]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_UARTEx_DisableFifoMode+0x16>
 8005776:	2302      	movs	r3, #2
 8005778:	e027      	b.n	80057ca <HAL_UARTEx_DisableFifoMode+0x66>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2284      	movs	r2, #132	@ 0x84
 800577e:	2101      	movs	r1, #1
 8005780:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2288      	movs	r2, #136	@ 0x88
 8005786:	2124      	movs	r1, #36	@ 0x24
 8005788:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2101      	movs	r1, #1
 800579e:	438a      	bics	r2, r1
 80057a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a0b      	ldr	r2, [pc, #44]	@ (80057d4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2288      	movs	r2, #136	@ 0x88
 80057bc:	2120      	movs	r1, #32
 80057be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2284      	movs	r2, #132	@ 0x84
 80057c4:	2100      	movs	r1, #0
 80057c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	0018      	movs	r0, r3
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b004      	add	sp, #16
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	46c0      	nop			@ (mov r8, r8)
 80057d4:	dfffffff 	.word	0xdfffffff

080057d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2284      	movs	r2, #132	@ 0x84
 80057e6:	5c9b      	ldrb	r3, [r3, r2]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e02e      	b.n	800584e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2284      	movs	r2, #132	@ 0x84
 80057f4:	2101      	movs	r1, #1
 80057f6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2288      	movs	r2, #136	@ 0x88
 80057fc:	2124      	movs	r1, #36	@ 0x24
 80057fe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2101      	movs	r1, #1
 8005814:	438a      	bics	r2, r1
 8005816:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	08d9      	lsrs	r1, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	0018      	movs	r0, r3
 8005830:	f000 f854 	bl	80058dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2288      	movs	r2, #136	@ 0x88
 8005840:	2120      	movs	r1, #32
 8005842:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2284      	movs	r2, #132	@ 0x84
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	0018      	movs	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	b004      	add	sp, #16
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2284      	movs	r2, #132	@ 0x84
 8005866:	5c9b      	ldrb	r3, [r3, r2]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800586c:	2302      	movs	r3, #2
 800586e:	e02f      	b.n	80058d0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2284      	movs	r2, #132	@ 0x84
 8005874:	2101      	movs	r1, #1
 8005876:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2288      	movs	r2, #136	@ 0x88
 800587c:	2124      	movs	r1, #36	@ 0x24
 800587e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2101      	movs	r1, #1
 8005894:	438a      	bics	r2, r1
 8005896:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	4a0e      	ldr	r2, [pc, #56]	@ (80058d8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	0019      	movs	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	0018      	movs	r0, r3
 80058b2:	f000 f813 	bl	80058dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2288      	movs	r2, #136	@ 0x88
 80058c2:	2120      	movs	r1, #32
 80058c4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2284      	movs	r2, #132	@ 0x84
 80058ca:	2100      	movs	r1, #0
 80058cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	0018      	movs	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b004      	add	sp, #16
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	f1ffffff 	.word	0xf1ffffff

080058dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d108      	bne.n	80058fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	226a      	movs	r2, #106	@ 0x6a
 80058f0:	2101      	movs	r1, #1
 80058f2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2268      	movs	r2, #104	@ 0x68
 80058f8:	2101      	movs	r1, #1
 80058fa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80058fc:	e043      	b.n	8005986 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80058fe:	260f      	movs	r6, #15
 8005900:	19bb      	adds	r3, r7, r6
 8005902:	2208      	movs	r2, #8
 8005904:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005906:	200e      	movs	r0, #14
 8005908:	183b      	adds	r3, r7, r0
 800590a:	2208      	movs	r2, #8
 800590c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	0e5b      	lsrs	r3, r3, #25
 8005916:	b2da      	uxtb	r2, r3
 8005918:	240d      	movs	r4, #13
 800591a:	193b      	adds	r3, r7, r4
 800591c:	2107      	movs	r1, #7
 800591e:	400a      	ands	r2, r1
 8005920:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	0f5b      	lsrs	r3, r3, #29
 800592a:	b2da      	uxtb	r2, r3
 800592c:	250c      	movs	r5, #12
 800592e:	197b      	adds	r3, r7, r5
 8005930:	2107      	movs	r1, #7
 8005932:	400a      	ands	r2, r1
 8005934:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005936:	183b      	adds	r3, r7, r0
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	197a      	adds	r2, r7, r5
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	4914      	ldr	r1, [pc, #80]	@ (8005990 <UARTEx_SetNbDataToProcess+0xb4>)
 8005940:	5c8a      	ldrb	r2, [r1, r2]
 8005942:	435a      	muls	r2, r3
 8005944:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005946:	197b      	adds	r3, r7, r5
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	4a12      	ldr	r2, [pc, #72]	@ (8005994 <UARTEx_SetNbDataToProcess+0xb8>)
 800594c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800594e:	0019      	movs	r1, r3
 8005950:	f7fa fc72 	bl	8000238 <__divsi3>
 8005954:	0003      	movs	r3, r0
 8005956:	b299      	uxth	r1, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	226a      	movs	r2, #106	@ 0x6a
 800595c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800595e:	19bb      	adds	r3, r7, r6
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	193a      	adds	r2, r7, r4
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	490a      	ldr	r1, [pc, #40]	@ (8005990 <UARTEx_SetNbDataToProcess+0xb4>)
 8005968:	5c8a      	ldrb	r2, [r1, r2]
 800596a:	435a      	muls	r2, r3
 800596c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800596e:	193b      	adds	r3, r7, r4
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	4a08      	ldr	r2, [pc, #32]	@ (8005994 <UARTEx_SetNbDataToProcess+0xb8>)
 8005974:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005976:	0019      	movs	r1, r3
 8005978:	f7fa fc5e 	bl	8000238 <__divsi3>
 800597c:	0003      	movs	r3, r0
 800597e:	b299      	uxth	r1, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2268      	movs	r2, #104	@ 0x68
 8005984:	5299      	strh	r1, [r3, r2]
}
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	46bd      	mov	sp, r7
 800598a:	b005      	add	sp, #20
 800598c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	0800690c 	.word	0x0800690c
 8005994:	08006914 	.word	0x08006914

08005998 <UART_CMD_Process>:
 * Ao receber `\r`, compara o comando com a tabela e executa a função correspondente.
 *
 * @param byte Byte recebido via UART.
 */
void UART_CMD_Process(uint8_t byte)
{
 8005998:	b590      	push	{r4, r7, lr}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	0002      	movs	r2, r0
 80059a0:	1dfb      	adds	r3, r7, #7
 80059a2:	701a      	strb	r2, [r3, #0]
    extern UART_HandleTypeDef huart1;

    if (byte == '\r') {
 80059a4:	1dfb      	adds	r3, r7, #7
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b0d      	cmp	r3, #13
 80059aa:	d150      	bne.n	8005a4e <UART_CMD_Process+0xb6>
        uart_cmd_buf[uart_cmd_index] = '\0';
 80059ac:	4b31      	ldr	r3, [pc, #196]	@ (8005a74 <UART_CMD_Process+0xdc>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	001a      	movs	r2, r3
 80059b2:	4b31      	ldr	r3, [pc, #196]	@ (8005a78 <UART_CMD_Process+0xe0>)
 80059b4:	2100      	movs	r1, #0
 80059b6:	5499      	strb	r1, [r3, r2]

        uint8_t matched = 0;
 80059b8:	230f      	movs	r3, #15
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < sizeof(cmd_table) / sizeof(UART_Command); i++) {
 80059c0:	230e      	movs	r3, #14
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
 80059c8:	e01f      	b.n	8005a0a <UART_CMD_Process+0x72>
            if (strcasecmp(uart_cmd_buf, cmd_table[i].cmd) == 0) {
 80059ca:	240e      	movs	r4, #14
 80059cc:	193b      	adds	r3, r7, r4
 80059ce:	781a      	ldrb	r2, [r3, #0]
 80059d0:	4b2a      	ldr	r3, [pc, #168]	@ (8005a7c <UART_CMD_Process+0xe4>)
 80059d2:	00d2      	lsls	r2, r2, #3
 80059d4:	58d2      	ldr	r2, [r2, r3]
 80059d6:	4b28      	ldr	r3, [pc, #160]	@ (8005a78 <UART_CMD_Process+0xe0>)
 80059d8:	0011      	movs	r1, r2
 80059da:	0018      	movs	r0, r3
 80059dc:	f000 f9f2 	bl	8005dc4 <strcasecmp>
 80059e0:	1e03      	subs	r3, r0, #0
 80059e2:	d10c      	bne.n	80059fe <UART_CMD_Process+0x66>
                cmd_table[i].handler();
 80059e4:	193b      	adds	r3, r7, r4
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	4a24      	ldr	r2, [pc, #144]	@ (8005a7c <UART_CMD_Process+0xe4>)
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	18d3      	adds	r3, r2, r3
 80059ee:	3304      	adds	r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4798      	blx	r3
                matched = 1;
 80059f4:	230f      	movs	r3, #15
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	2201      	movs	r2, #1
 80059fa:	701a      	strb	r2, [r3, #0]
                break;
 80059fc:	e00a      	b.n	8005a14 <UART_CMD_Process+0x7c>
        for (uint8_t i = 0; i < sizeof(cmd_table) / sizeof(UART_Command); i++) {
 80059fe:	210e      	movs	r1, #14
 8005a00:	187b      	adds	r3, r7, r1
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	187b      	adds	r3, r7, r1
 8005a06:	3201      	adds	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
 8005a0a:	230e      	movs	r3, #14
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d9da      	bls.n	80059ca <UART_CMD_Process+0x32>
            }
        }

        if (!matched) {
 8005a14:	230f      	movs	r3, #15
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10d      	bne.n	8005a3a <UART_CMD_Process+0xa2>
            const char *msg = "Comando inválido. Digite 'HELP'\r\n";
 8005a1e:	4b18      	ldr	r3, [pc, #96]	@ (8005a80 <UART_CMD_Process+0xe8>)
 8005a20:	60bb      	str	r3, [r7, #8]
            HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f7fa fb6b 	bl	8000100 <strlen>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	2301      	movs	r3, #1
 8005a30:	425b      	negs	r3, r3
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	4813      	ldr	r0, [pc, #76]	@ (8005a84 <UART_CMD_Process+0xec>)
 8005a36:	f7fe f845 	bl	8003ac4 <HAL_UART_Transmit>
        }

        uart_cmd_index = 0;
 8005a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005a74 <UART_CMD_Process+0xdc>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]
        memset(uart_cmd_buf, 0, sizeof(uart_cmd_buf));
 8005a40:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <UART_CMD_Process+0xe0>)
 8005a42:	2220      	movs	r2, #32
 8005a44:	2100      	movs	r1, #0
 8005a46:	0018      	movs	r0, r3
 8005a48:	f000 f9b4 	bl	8005db4 <memset>
    } else {
        if (uart_cmd_index < UART_CMD_BUF_LEN - 1) {
            uart_cmd_buf[uart_cmd_index++] = byte;
        }
    }
}
 8005a4c:	e00e      	b.n	8005a6c <UART_CMD_Process+0xd4>
        if (uart_cmd_index < UART_CMD_BUF_LEN - 1) {
 8005a4e:	4b09      	ldr	r3, [pc, #36]	@ (8005a74 <UART_CMD_Process+0xdc>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b1e      	cmp	r3, #30
 8005a54:	d80a      	bhi.n	8005a6c <UART_CMD_Process+0xd4>
            uart_cmd_buf[uart_cmd_index++] = byte;
 8005a56:	4b07      	ldr	r3, [pc, #28]	@ (8005a74 <UART_CMD_Process+0xdc>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	b2d1      	uxtb	r1, r2
 8005a5e:	4a05      	ldr	r2, [pc, #20]	@ (8005a74 <UART_CMD_Process+0xdc>)
 8005a60:	7011      	strb	r1, [r2, #0]
 8005a62:	0019      	movs	r1, r3
 8005a64:	4b04      	ldr	r3, [pc, #16]	@ (8005a78 <UART_CMD_Process+0xe0>)
 8005a66:	1dfa      	adds	r2, r7, #7
 8005a68:	7812      	ldrb	r2, [r2, #0]
 8005a6a:	545a      	strb	r2, [r3, r1]
}
 8005a6c:	46c0      	nop			@ (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b005      	add	sp, #20
 8005a72:	bd90      	pop	{r4, r7, pc}
 8005a74:	2000020c 	.word	0x2000020c
 8005a78:	200001ec 	.word	0x200001ec
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	0800672c 	.word	0x0800672c
 8005a84:	20000150 	.word	0x20000150

08005a88 <help_cmd>:

/**
 * @brief Imprime lista de comandos disponíveis via UART.
 */
static void help_cmd(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
    extern UART_HandleTypeDef huart1;

    const char *help_str =
 8005a8e:	4b09      	ldr	r3, [pc, #36]	@ (8005ab4 <help_cmd+0x2c>)
 8005a90:	607b      	str	r3, [r7, #4]
        "  REV  - Ré\r\n"
        "  STOP - Para\r\n"
        "  HELP - Ajuda\r\n";


    HAL_UART_Transmit(&huart1, (uint8_t*)help_str, strlen(help_str), HAL_MAX_DELAY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7fa fb33 	bl	8000100 <strlen>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	425b      	negs	r3, r3
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4804      	ldr	r0, [pc, #16]	@ (8005ab8 <help_cmd+0x30>)
 8005aa6:	f7fe f80d 	bl	8003ac4 <HAL_UART_Transmit>
}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	46bd      	mov	sp, r7
 8005aae:	b002      	add	sp, #8
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	46c0      	nop			@ (mov r8, r8)
 8005ab4:	08006750 	.word	0x08006750
 8005ab8:	20000150 	.word	0x20000150

08005abc <HAL_UART_RxCpltCallback>:
  * próximos comandos.
  *
  * @param huart Ponteiro para a estrutura de controle da UART que gerou a interrupção.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a08      	ldr	r2, [pc, #32]	@ (8005aec <HAL_UART_RxCpltCallback+0x30>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d10a      	bne.n	8005ae4 <HAL_UART_RxCpltCallback+0x28>
        UART_CMD_Process(uart_rx_byte);
 8005ace:	4b08      	ldr	r3, [pc, #32]	@ (8005af0 <HAL_UART_RxCpltCallback+0x34>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f7ff ff60 	bl	8005998 <UART_CMD_Process>
        HAL_UART_Receive_IT(&huart1, &uart_rx_byte, 1);
 8005ad8:	4905      	ldr	r1, [pc, #20]	@ (8005af0 <HAL_UART_RxCpltCallback+0x34>)
 8005ada:	4b06      	ldr	r3, [pc, #24]	@ (8005af4 <HAL_UART_RxCpltCallback+0x38>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f7fe f894 	bl	8003c0c <HAL_UART_Receive_IT>
    }
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b002      	add	sp, #8
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40013800 	.word	0x40013800
 8005af0:	2000020d 	.word	0x2000020d
 8005af4:	20000150 	.word	0x20000150

08005af8 <read_voltage>:
#include "voltage_reader.h"

extern ADC_HandleTypeDef hadc1;
extern UART_HandleTypeDef huart1;

void read_voltage() {
 8005af8:	b590      	push	{r4, r7, lr}
 8005afa:	b097      	sub	sp, #92	@ 0x5c
 8005afc:	af02      	add	r7, sp, #8
    HAL_ADC_PollForConversion(&hadc1, 100);
 8005afe:	4b1f      	ldr	r3, [pc, #124]	@ (8005b7c <read_voltage+0x84>)
 8005b00:	2164      	movs	r1, #100	@ 0x64
 8005b02:	0018      	movs	r0, r3
 8005b04:	f7fb fc1e 	bl	8001344 <HAL_ADC_PollForConversion>
    uint32_t readValue = HAL_ADC_GetValue(&hadc1);
 8005b08:	4b1c      	ldr	r3, [pc, #112]	@ (8005b7c <read_voltage+0x84>)
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f7fb fcae 	bl	800146c <HAL_ADC_GetValue>
 8005b10:	0003      	movs	r3, r0
 8005b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
    uint32_t voltage_mV = (readValue * 3300) / 4095;
 8005b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b16:	4a1a      	ldr	r2, [pc, #104]	@ (8005b80 <read_voltage+0x88>)
 8005b18:	4353      	muls	r3, r2
 8005b1a:	491a      	ldr	r1, [pc, #104]	@ (8005b84 <read_voltage+0x8c>)
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f7fa fb01 	bl	8000124 <__udivsi3>
 8005b22:	0003      	movs	r3, r0
 8005b24:	64bb      	str	r3, [r7, #72]	@ 0x48

    char tx_buf[64];
    int len = snprintf(tx_buf, sizeof(tx_buf),
 8005b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b28:	22fa      	movs	r2, #250	@ 0xfa
 8005b2a:	0091      	lsls	r1, r2, #2
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f7fa faf9 	bl	8000124 <__udivsi3>
 8005b32:	0003      	movs	r3, r0
 8005b34:	001c      	movs	r4, r3
        "ADC: %4lu | Tensão: %lu.%02lu V\r\n",
        readValue,
        voltage_mV / 1000,
        (voltage_mV % 1000) / 10);
 8005b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b38:	22fa      	movs	r2, #250	@ 0xfa
 8005b3a:	0091      	lsls	r1, r2, #2
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7fa fb77 	bl	8000230 <__aeabi_uidivmod>
 8005b42:	000b      	movs	r3, r1
    int len = snprintf(tx_buf, sizeof(tx_buf),
 8005b44:	210a      	movs	r1, #10
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7fa faec 	bl	8000124 <__udivsi3>
 8005b4c:	0003      	movs	r3, r0
 8005b4e:	0019      	movs	r1, r3
 8005b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b52:	4a0d      	ldr	r2, [pc, #52]	@ (8005b88 <read_voltage+0x90>)
 8005b54:	1d38      	adds	r0, r7, #4
 8005b56:	9101      	str	r1, [sp, #4]
 8005b58:	9400      	str	r4, [sp, #0]
 8005b5a:	2140      	movs	r1, #64	@ 0x40
 8005b5c:	f000 f8f4 	bl	8005d48 <sniprintf>
 8005b60:	0003      	movs	r3, r0
 8005b62:	647b      	str	r3, [r7, #68]	@ 0x44

    HAL_UART_Transmit(&huart1, (uint8_t*)tx_buf, len, HAL_MAX_DELAY);
 8005b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	2301      	movs	r3, #1
 8005b6a:	425b      	negs	r3, r3
 8005b6c:	1d39      	adds	r1, r7, #4
 8005b6e:	4807      	ldr	r0, [pc, #28]	@ (8005b8c <read_voltage+0x94>)
 8005b70:	f7fd ffa8 	bl	8003ac4 <HAL_UART_Transmit>
}
 8005b74:	46c0      	nop			@ (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b015      	add	sp, #84	@ 0x54
 8005b7a:	bd90      	pop	{r4, r7, pc}
 8005b7c:	200000a0 	.word	0x200000a0
 8005b80:	00000ce4 	.word	0x00000ce4
 8005b84:	00000fff 	.word	0x00000fff
 8005b88:	080067c8 	.word	0x080067c8
 8005b8c:	20000150 	.word	0x20000150

08005b90 <start_pwm_fwd>:
 * @note   Apenas inicia se nenhum outro ciclo estiver em andamento.
 * @retval Nenhum
 */

void start_pwm_fwd(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
    if (pwm_active) return;
 8005b94:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <start_pwm_fwd+0x30>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10d      	bne.n	8005bba <start_pwm_fwd+0x2a>
    pwm_dir = 1;
 8005b9e:	4b09      	ldr	r3, [pc, #36]	@ (8005bc4 <start_pwm_fwd+0x34>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]
    pwm_active = 1;
 8005ba4:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <start_pwm_fwd+0x30>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)"Iniciando FWD...\r\n", 18, HAL_MAX_DELAY);
 8005baa:	2301      	movs	r3, #1
 8005bac:	425b      	negs	r3, r3
 8005bae:	4906      	ldr	r1, [pc, #24]	@ (8005bc8 <start_pwm_fwd+0x38>)
 8005bb0:	4806      	ldr	r0, [pc, #24]	@ (8005bcc <start_pwm_fwd+0x3c>)
 8005bb2:	2212      	movs	r2, #18
 8005bb4:	f7fd ff86 	bl	8003ac4 <HAL_UART_Transmit>
 8005bb8:	e000      	b.n	8005bbc <start_pwm_fwd+0x2c>
    if (pwm_active) return;
 8005bba:	46c0      	nop			@ (mov r8, r8)
}
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	2000020f 	.word	0x2000020f
 8005bc4:	2000020e 	.word	0x2000020e
 8005bc8:	080067ec 	.word	0x080067ec
 8005bcc:	20000150 	.word	0x20000150

08005bd0 <start_pwm_rev>:
 * @note   Apenas inicia se nenhum outro ciclo estiver em andamento.
 * @retval Nenhum
 */

void start_pwm_rev(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
    if (pwm_active) return;
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <start_pwm_rev+0x30>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10d      	bne.n	8005bfa <start_pwm_rev+0x2a>
    pwm_dir = 2;
 8005bde:	4b09      	ldr	r3, [pc, #36]	@ (8005c04 <start_pwm_rev+0x34>)
 8005be0:	2202      	movs	r2, #2
 8005be2:	701a      	strb	r2, [r3, #0]
    pwm_active = 1;
 8005be4:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <start_pwm_rev+0x30>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*)"Iniciando REV...\r\n", 18, HAL_MAX_DELAY);
 8005bea:	2301      	movs	r3, #1
 8005bec:	425b      	negs	r3, r3
 8005bee:	4906      	ldr	r1, [pc, #24]	@ (8005c08 <start_pwm_rev+0x38>)
 8005bf0:	4806      	ldr	r0, [pc, #24]	@ (8005c0c <start_pwm_rev+0x3c>)
 8005bf2:	2212      	movs	r2, #18
 8005bf4:	f7fd ff66 	bl	8003ac4 <HAL_UART_Transmit>
 8005bf8:	e000      	b.n	8005bfc <start_pwm_rev+0x2c>
    if (pwm_active) return;
 8005bfa:	46c0      	nop			@ (mov r8, r8)
}
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	2000020f 	.word	0x2000020f
 8005c04:	2000020e 	.word	0x2000020e
 8005c08:	08006800 	.word	0x08006800
 8005c0c:	20000150 	.word	0x20000150

08005c10 <stop_pwm>:
 * @brief  Para o PWM e zera o duty cycle.
 * @retval Nenhum
 */

void stop_pwm(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
    pwm_active = 0;
 8005c14:	4b09      	ldr	r3, [pc, #36]	@ (8005c3c <stop_pwm+0x2c>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	701a      	strb	r2, [r3, #0]
    pwm_dir = 0;
 8005c1a:	4b09      	ldr	r3, [pc, #36]	@ (8005c40 <stop_pwm+0x30>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8005c20:	4b08      	ldr	r3, [pc, #32]	@ (8005c44 <stop_pwm+0x34>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2200      	movs	r2, #0
 8005c26:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_UART_Transmit(&huart1, (uint8_t*)"Motor parado.\r\n", 16, HAL_MAX_DELAY);
 8005c28:	2301      	movs	r3, #1
 8005c2a:	425b      	negs	r3, r3
 8005c2c:	4906      	ldr	r1, [pc, #24]	@ (8005c48 <stop_pwm+0x38>)
 8005c2e:	4807      	ldr	r0, [pc, #28]	@ (8005c4c <stop_pwm+0x3c>)
 8005c30:	2210      	movs	r2, #16
 8005c32:	f7fd ff47 	bl	8003ac4 <HAL_UART_Transmit>
}
 8005c36:	46c0      	nop			@ (mov r8, r8)
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	2000020f 	.word	0x2000020f
 8005c40:	2000020e 	.word	0x2000020e
 8005c44:	20000104 	.word	0x20000104
 8005c48:	08006814 	.word	0x08006814
 8005c4c:	20000150 	.word	0x20000150

08005c50 <pwm_ramp_task>:
 * @note   Direção e pinos de controle devem estar configurados antes da chamada.
 * @retval Nenhum
 */

void pwm_ramp_task(void)
{
 8005c50:	b590      	push	{r4, r7, lr}
 8005c52:	b08b      	sub	sp, #44	@ 0x2c
 8005c54:	af00      	add	r7, sp, #0
    if (!pwm_active) return;
 8005c56:	4b33      	ldr	r3, [pc, #204]	@ (8005d24 <pwm_ramp_task+0xd4>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d05c      	beq.n	8005d1a <pwm_ramp_task+0xca>

    // Ajusta direção de sentido...
    if (pwm_dir == 1) {
 8005c60:	4b31      	ldr	r3, [pc, #196]	@ (8005d28 <pwm_ramp_task+0xd8>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d10e      	bne.n	8005c88 <pwm_ramp_task+0x38>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8005c6a:	4b30      	ldr	r3, [pc, #192]	@ (8005d2c <pwm_ramp_task+0xdc>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	2101      	movs	r1, #1
 8005c70:	0018      	movs	r0, r3
 8005c72:	f7fc f973 	bl	8001f5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8005c76:	2380      	movs	r3, #128	@ 0x80
 8005c78:	0119      	lsls	r1, r3, #4
 8005c7a:	23a0      	movs	r3, #160	@ 0xa0
 8005c7c:	05db      	lsls	r3, r3, #23
 8005c7e:	2200      	movs	r2, #0
 8005c80:	0018      	movs	r0, r3
 8005c82:	f7fc f96b 	bl	8001f5c <HAL_GPIO_WritePin>
 8005c86:	e00d      	b.n	8005ca4 <pwm_ramp_task+0x54>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8005c88:	4b28      	ldr	r3, [pc, #160]	@ (8005d2c <pwm_ramp_task+0xdc>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f7fc f964 	bl	8001f5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005c94:	2380      	movs	r3, #128	@ 0x80
 8005c96:	0119      	lsls	r1, r3, #4
 8005c98:	23a0      	movs	r3, #160	@ 0xa0
 8005c9a:	05db      	lsls	r3, r3, #23
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f7fc f95c 	bl	8001f5c <HAL_GPIO_WritePin>
    }

    for (uint16_t i = 0; i <= PWM_MAX ; i++) {
 8005ca4:	2326      	movs	r3, #38	@ 0x26
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	2200      	movs	r2, #0
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	e00e      	b.n	8005ccc <pwm_ramp_task+0x7c>
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);
 8005cae:	4b20      	ldr	r3, [pc, #128]	@ (8005d30 <pwm_ramp_task+0xe0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2426      	movs	r4, #38	@ 0x26
 8005cb4:	193a      	adds	r2, r7, r4
 8005cb6:	8812      	ldrh	r2, [r2, #0]
 8005cb8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_Delay(1);
 8005cba:	2001      	movs	r0, #1
 8005cbc:	f7fa fff2 	bl	8000ca4 <HAL_Delay>
    for (uint16_t i = 0; i <= PWM_MAX ; i++) {
 8005cc0:	0021      	movs	r1, r4
 8005cc2:	187b      	adds	r3, r7, r1
 8005cc4:	881a      	ldrh	r2, [r3, #0]
 8005cc6:	187b      	adds	r3, r7, r1
 8005cc8:	3201      	adds	r2, #1
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	2326      	movs	r3, #38	@ 0x26
 8005cce:	18fb      	adds	r3, r7, r3
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	4a18      	ldr	r2, [pc, #96]	@ (8005d34 <pwm_ramp_task+0xe4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d9ea      	bls.n	8005cae <pwm_ramp_task+0x5e>
        }
    // **Garanta 100% de duty a partir daqui:**
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM_MAX);
 8005cd8:	4b15      	ldr	r3, [pc, #84]	@ (8005d30 <pwm_ramp_task+0xe0>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a15      	ldr	r2, [pc, #84]	@ (8005d34 <pwm_ramp_task+0xe4>)
 8005cde:	635a      	str	r2, [r3, #52]	@ 0x34

    char msg[32];
    snprintf(msg, sizeof(msg), "%s concluído.\r\n",
             (pwm_dir == 1) ? "FWD" : "REV");
 8005ce0:	4b11      	ldr	r3, [pc, #68]	@ (8005d28 <pwm_ramp_task+0xd8>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	b2db      	uxtb	r3, r3
    snprintf(msg, sizeof(msg), "%s concluído.\r\n",
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <pwm_ramp_task+0x9e>
 8005cea:	4b13      	ldr	r3, [pc, #76]	@ (8005d38 <pwm_ramp_task+0xe8>)
 8005cec:	e000      	b.n	8005cf0 <pwm_ramp_task+0xa0>
 8005cee:	4b13      	ldr	r3, [pc, #76]	@ (8005d3c <pwm_ramp_task+0xec>)
 8005cf0:	4a13      	ldr	r2, [pc, #76]	@ (8005d40 <pwm_ramp_task+0xf0>)
 8005cf2:	1d38      	adds	r0, r7, #4
 8005cf4:	2120      	movs	r1, #32
 8005cf6:	f000 f827 	bl	8005d48 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7fa f9ff 	bl	8000100 <strlen>
 8005d02:	0003      	movs	r3, r0
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	2301      	movs	r3, #1
 8005d08:	425b      	negs	r3, r3
 8005d0a:	1d39      	adds	r1, r7, #4
 8005d0c:	480d      	ldr	r0, [pc, #52]	@ (8005d44 <pwm_ramp_task+0xf4>)
 8005d0e:	f7fd fed9 	bl	8003ac4 <HAL_UART_Transmit>

    pwm_active = 0;
 8005d12:	4b04      	ldr	r3, [pc, #16]	@ (8005d24 <pwm_ramp_task+0xd4>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
 8005d18:	e000      	b.n	8005d1c <pwm_ramp_task+0xcc>
    if (!pwm_active) return;
 8005d1a:	46c0      	nop			@ (mov r8, r8)
}
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b00b      	add	sp, #44	@ 0x2c
 8005d20:	bd90      	pop	{r4, r7, pc}
 8005d22:	46c0      	nop			@ (mov r8, r8)
 8005d24:	2000020f 	.word	0x2000020f
 8005d28:	2000020e 	.word	0x2000020e
 8005d2c:	50000400 	.word	0x50000400
 8005d30:	20000104 	.word	0x20000104
 8005d34:	00000271 	.word	0x00000271
 8005d38:	08006824 	.word	0x08006824
 8005d3c:	08006828 	.word	0x08006828
 8005d40:	0800682c 	.word	0x0800682c
 8005d44:	20000150 	.word	0x20000150

08005d48 <sniprintf>:
 8005d48:	b40c      	push	{r2, r3}
 8005d4a:	b530      	push	{r4, r5, lr}
 8005d4c:	4b18      	ldr	r3, [pc, #96]	@ (8005db0 <sniprintf+0x68>)
 8005d4e:	000c      	movs	r4, r1
 8005d50:	681d      	ldr	r5, [r3, #0]
 8005d52:	b09d      	sub	sp, #116	@ 0x74
 8005d54:	2900      	cmp	r1, #0
 8005d56:	da08      	bge.n	8005d6a <sniprintf+0x22>
 8005d58:	238b      	movs	r3, #139	@ 0x8b
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	602b      	str	r3, [r5, #0]
 8005d5e:	4240      	negs	r0, r0
 8005d60:	b01d      	add	sp, #116	@ 0x74
 8005d62:	bc30      	pop	{r4, r5}
 8005d64:	bc08      	pop	{r3}
 8005d66:	b002      	add	sp, #8
 8005d68:	4718      	bx	r3
 8005d6a:	2382      	movs	r3, #130	@ 0x82
 8005d6c:	466a      	mov	r2, sp
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	8293      	strh	r3, [r2, #20]
 8005d72:	2300      	movs	r3, #0
 8005d74:	9002      	str	r0, [sp, #8]
 8005d76:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005d78:	9006      	str	r0, [sp, #24]
 8005d7a:	4299      	cmp	r1, r3
 8005d7c:	d000      	beq.n	8005d80 <sniprintf+0x38>
 8005d7e:	1e4b      	subs	r3, r1, #1
 8005d80:	9304      	str	r3, [sp, #16]
 8005d82:	9307      	str	r3, [sp, #28]
 8005d84:	2301      	movs	r3, #1
 8005d86:	466a      	mov	r2, sp
 8005d88:	425b      	negs	r3, r3
 8005d8a:	82d3      	strh	r3, [r2, #22]
 8005d8c:	0028      	movs	r0, r5
 8005d8e:	ab21      	add	r3, sp, #132	@ 0x84
 8005d90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d92:	a902      	add	r1, sp, #8
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	f000 f9b9 	bl	800610c <_svfiprintf_r>
 8005d9a:	1c43      	adds	r3, r0, #1
 8005d9c:	da01      	bge.n	8005da2 <sniprintf+0x5a>
 8005d9e:	238b      	movs	r3, #139	@ 0x8b
 8005da0:	602b      	str	r3, [r5, #0]
 8005da2:	2c00      	cmp	r4, #0
 8005da4:	d0dc      	beq.n	8005d60 <sniprintf+0x18>
 8005da6:	2200      	movs	r2, #0
 8005da8:	9b02      	ldr	r3, [sp, #8]
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e7d8      	b.n	8005d60 <sniprintf+0x18>
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	20000034 	.word	0x20000034

08005db4 <memset>:
 8005db4:	0003      	movs	r3, r0
 8005db6:	1882      	adds	r2, r0, r2
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d100      	bne.n	8005dbe <memset+0xa>
 8005dbc:	4770      	bx	lr
 8005dbe:	7019      	strb	r1, [r3, #0]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	e7f9      	b.n	8005db8 <memset+0x4>

08005dc4 <strcasecmp>:
 8005dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	0004      	movs	r4, r0
 8005dca:	2703      	movs	r7, #3
 8005dcc:	4e0a      	ldr	r6, [pc, #40]	@ (8005df8 <strcasecmp+0x34>)
 8005dce:	5ca3      	ldrb	r3, [r4, r2]
 8005dd0:	5cf0      	ldrb	r0, [r6, r3]
 8005dd2:	4038      	ands	r0, r7
 8005dd4:	2801      	cmp	r0, #1
 8005dd6:	d100      	bne.n	8005dda <strcasecmp+0x16>
 8005dd8:	3320      	adds	r3, #32
 8005dda:	5c88      	ldrb	r0, [r1, r2]
 8005ddc:	5c35      	ldrb	r5, [r6, r0]
 8005dde:	403d      	ands	r5, r7
 8005de0:	2d01      	cmp	r5, #1
 8005de2:	d100      	bne.n	8005de6 <strcasecmp+0x22>
 8005de4:	3020      	adds	r0, #32
 8005de6:	1a1d      	subs	r5, r3, r0
 8005de8:	4283      	cmp	r3, r0
 8005dea:	d103      	bne.n	8005df4 <strcasecmp+0x30>
 8005dec:	3201      	adds	r2, #1
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d1ed      	bne.n	8005dce <strcasecmp+0xa>
 8005df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df4:	0028      	movs	r0, r5
 8005df6:	e7fc      	b.n	8005df2 <strcasecmp+0x2e>
 8005df8:	0800691d 	.word	0x0800691d

08005dfc <__errno>:
 8005dfc:	4b01      	ldr	r3, [pc, #4]	@ (8005e04 <__errno+0x8>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	4770      	bx	lr
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	20000034 	.word	0x20000034

08005e08 <__libc_init_array>:
 8005e08:	b570      	push	{r4, r5, r6, lr}
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	4c0c      	ldr	r4, [pc, #48]	@ (8005e40 <__libc_init_array+0x38>)
 8005e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8005e44 <__libc_init_array+0x3c>)
 8005e10:	1b64      	subs	r4, r4, r5
 8005e12:	10a4      	asrs	r4, r4, #2
 8005e14:	42a6      	cmp	r6, r4
 8005e16:	d109      	bne.n	8005e2c <__libc_init_array+0x24>
 8005e18:	2600      	movs	r6, #0
 8005e1a:	f000 fc61 	bl	80066e0 <_init>
 8005e1e:	4c0a      	ldr	r4, [pc, #40]	@ (8005e48 <__libc_init_array+0x40>)
 8005e20:	4d0a      	ldr	r5, [pc, #40]	@ (8005e4c <__libc_init_array+0x44>)
 8005e22:	1b64      	subs	r4, r4, r5
 8005e24:	10a4      	asrs	r4, r4, #2
 8005e26:	42a6      	cmp	r6, r4
 8005e28:	d105      	bne.n	8005e36 <__libc_init_array+0x2e>
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	00b3      	lsls	r3, r6, #2
 8005e2e:	58eb      	ldr	r3, [r5, r3]
 8005e30:	4798      	blx	r3
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7ee      	b.n	8005e14 <__libc_init_array+0xc>
 8005e36:	00b3      	lsls	r3, r6, #2
 8005e38:	58eb      	ldr	r3, [r5, r3]
 8005e3a:	4798      	blx	r3
 8005e3c:	3601      	adds	r6, #1
 8005e3e:	e7f2      	b.n	8005e26 <__libc_init_array+0x1e>
 8005e40:	08006a50 	.word	0x08006a50
 8005e44:	08006a50 	.word	0x08006a50
 8005e48:	08006a54 	.word	0x08006a54
 8005e4c:	08006a50 	.word	0x08006a50

08005e50 <__retarget_lock_acquire_recursive>:
 8005e50:	4770      	bx	lr

08005e52 <__retarget_lock_release_recursive>:
 8005e52:	4770      	bx	lr

08005e54 <_free_r>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	0005      	movs	r5, r0
 8005e58:	1e0c      	subs	r4, r1, #0
 8005e5a:	d010      	beq.n	8005e7e <_free_r+0x2a>
 8005e5c:	3c04      	subs	r4, #4
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	da00      	bge.n	8005e66 <_free_r+0x12>
 8005e64:	18e4      	adds	r4, r4, r3
 8005e66:	0028      	movs	r0, r5
 8005e68:	f000 f8e0 	bl	800602c <__malloc_lock>
 8005e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee4 <_free_r+0x90>)
 8005e6e:	6813      	ldr	r3, [r2, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <_free_r+0x2c>
 8005e74:	6063      	str	r3, [r4, #4]
 8005e76:	6014      	str	r4, [r2, #0]
 8005e78:	0028      	movs	r0, r5
 8005e7a:	f000 f8df 	bl	800603c <__malloc_unlock>
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	d908      	bls.n	8005e96 <_free_r+0x42>
 8005e84:	6820      	ldr	r0, [r4, #0]
 8005e86:	1821      	adds	r1, r4, r0
 8005e88:	428b      	cmp	r3, r1
 8005e8a:	d1f3      	bne.n	8005e74 <_free_r+0x20>
 8005e8c:	6819      	ldr	r1, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	1809      	adds	r1, r1, r0
 8005e92:	6021      	str	r1, [r4, #0]
 8005e94:	e7ee      	b.n	8005e74 <_free_r+0x20>
 8005e96:	001a      	movs	r2, r3
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <_free_r+0x4e>
 8005e9e:	42a3      	cmp	r3, r4
 8005ea0:	d9f9      	bls.n	8005e96 <_free_r+0x42>
 8005ea2:	6811      	ldr	r1, [r2, #0]
 8005ea4:	1850      	adds	r0, r2, r1
 8005ea6:	42a0      	cmp	r0, r4
 8005ea8:	d10b      	bne.n	8005ec2 <_free_r+0x6e>
 8005eaa:	6820      	ldr	r0, [r4, #0]
 8005eac:	1809      	adds	r1, r1, r0
 8005eae:	1850      	adds	r0, r2, r1
 8005eb0:	6011      	str	r1, [r2, #0]
 8005eb2:	4283      	cmp	r3, r0
 8005eb4:	d1e0      	bne.n	8005e78 <_free_r+0x24>
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	1841      	adds	r1, r0, r1
 8005ebc:	6011      	str	r1, [r2, #0]
 8005ebe:	6053      	str	r3, [r2, #4]
 8005ec0:	e7da      	b.n	8005e78 <_free_r+0x24>
 8005ec2:	42a0      	cmp	r0, r4
 8005ec4:	d902      	bls.n	8005ecc <_free_r+0x78>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	e7d5      	b.n	8005e78 <_free_r+0x24>
 8005ecc:	6820      	ldr	r0, [r4, #0]
 8005ece:	1821      	adds	r1, r4, r0
 8005ed0:	428b      	cmp	r3, r1
 8005ed2:	d103      	bne.n	8005edc <_free_r+0x88>
 8005ed4:	6819      	ldr	r1, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	1809      	adds	r1, r1, r0
 8005eda:	6021      	str	r1, [r4, #0]
 8005edc:	6063      	str	r3, [r4, #4]
 8005ede:	6054      	str	r4, [r2, #4]
 8005ee0:	e7ca      	b.n	8005e78 <_free_r+0x24>
 8005ee2:	46c0      	nop			@ (mov r8, r8)
 8005ee4:	20000354 	.word	0x20000354

08005ee8 <sbrk_aligned>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	4e0f      	ldr	r6, [pc, #60]	@ (8005f28 <sbrk_aligned+0x40>)
 8005eec:	000d      	movs	r5, r1
 8005eee:	6831      	ldr	r1, [r6, #0]
 8005ef0:	0004      	movs	r4, r0
 8005ef2:	2900      	cmp	r1, #0
 8005ef4:	d102      	bne.n	8005efc <sbrk_aligned+0x14>
 8005ef6:	f000 fb95 	bl	8006624 <_sbrk_r>
 8005efa:	6030      	str	r0, [r6, #0]
 8005efc:	0029      	movs	r1, r5
 8005efe:	0020      	movs	r0, r4
 8005f00:	f000 fb90 	bl	8006624 <_sbrk_r>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d103      	bne.n	8005f10 <sbrk_aligned+0x28>
 8005f08:	2501      	movs	r5, #1
 8005f0a:	426d      	negs	r5, r5
 8005f0c:	0028      	movs	r0, r5
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	2303      	movs	r3, #3
 8005f12:	1cc5      	adds	r5, r0, #3
 8005f14:	439d      	bics	r5, r3
 8005f16:	42a8      	cmp	r0, r5
 8005f18:	d0f8      	beq.n	8005f0c <sbrk_aligned+0x24>
 8005f1a:	1a29      	subs	r1, r5, r0
 8005f1c:	0020      	movs	r0, r4
 8005f1e:	f000 fb81 	bl	8006624 <_sbrk_r>
 8005f22:	3001      	adds	r0, #1
 8005f24:	d1f2      	bne.n	8005f0c <sbrk_aligned+0x24>
 8005f26:	e7ef      	b.n	8005f08 <sbrk_aligned+0x20>
 8005f28:	20000350 	.word	0x20000350

08005f2c <_malloc_r>:
 8005f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f2e:	2203      	movs	r2, #3
 8005f30:	1ccb      	adds	r3, r1, #3
 8005f32:	4393      	bics	r3, r2
 8005f34:	3308      	adds	r3, #8
 8005f36:	0005      	movs	r5, r0
 8005f38:	001f      	movs	r7, r3
 8005f3a:	2b0c      	cmp	r3, #12
 8005f3c:	d234      	bcs.n	8005fa8 <_malloc_r+0x7c>
 8005f3e:	270c      	movs	r7, #12
 8005f40:	42b9      	cmp	r1, r7
 8005f42:	d833      	bhi.n	8005fac <_malloc_r+0x80>
 8005f44:	0028      	movs	r0, r5
 8005f46:	f000 f871 	bl	800602c <__malloc_lock>
 8005f4a:	4e37      	ldr	r6, [pc, #220]	@ (8006028 <_malloc_r+0xfc>)
 8005f4c:	6833      	ldr	r3, [r6, #0]
 8005f4e:	001c      	movs	r4, r3
 8005f50:	2c00      	cmp	r4, #0
 8005f52:	d12f      	bne.n	8005fb4 <_malloc_r+0x88>
 8005f54:	0039      	movs	r1, r7
 8005f56:	0028      	movs	r0, r5
 8005f58:	f7ff ffc6 	bl	8005ee8 <sbrk_aligned>
 8005f5c:	0004      	movs	r4, r0
 8005f5e:	1c43      	adds	r3, r0, #1
 8005f60:	d15f      	bne.n	8006022 <_malloc_r+0xf6>
 8005f62:	6834      	ldr	r4, [r6, #0]
 8005f64:	9400      	str	r4, [sp, #0]
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d14a      	bne.n	8006002 <_malloc_r+0xd6>
 8005f6c:	2c00      	cmp	r4, #0
 8005f6e:	d052      	beq.n	8006016 <_malloc_r+0xea>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	0028      	movs	r0, r5
 8005f74:	18e3      	adds	r3, r4, r3
 8005f76:	9900      	ldr	r1, [sp, #0]
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	f000 fb53 	bl	8006624 <_sbrk_r>
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	4283      	cmp	r3, r0
 8005f82:	d148      	bne.n	8006016 <_malloc_r+0xea>
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	0028      	movs	r0, r5
 8005f88:	1aff      	subs	r7, r7, r3
 8005f8a:	0039      	movs	r1, r7
 8005f8c:	f7ff ffac 	bl	8005ee8 <sbrk_aligned>
 8005f90:	3001      	adds	r0, #1
 8005f92:	d040      	beq.n	8006016 <_malloc_r+0xea>
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	19db      	adds	r3, r3, r7
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	6833      	ldr	r3, [r6, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	d133      	bne.n	800600a <_malloc_r+0xde>
 8005fa2:	9b00      	ldr	r3, [sp, #0]
 8005fa4:	6033      	str	r3, [r6, #0]
 8005fa6:	e019      	b.n	8005fdc <_malloc_r+0xb0>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dac9      	bge.n	8005f40 <_malloc_r+0x14>
 8005fac:	230c      	movs	r3, #12
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fb4:	6821      	ldr	r1, [r4, #0]
 8005fb6:	1bc9      	subs	r1, r1, r7
 8005fb8:	d420      	bmi.n	8005ffc <_malloc_r+0xd0>
 8005fba:	290b      	cmp	r1, #11
 8005fbc:	d90a      	bls.n	8005fd4 <_malloc_r+0xa8>
 8005fbe:	19e2      	adds	r2, r4, r7
 8005fc0:	6027      	str	r7, [r4, #0]
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	d104      	bne.n	8005fd0 <_malloc_r+0xa4>
 8005fc6:	6032      	str	r2, [r6, #0]
 8005fc8:	6863      	ldr	r3, [r4, #4]
 8005fca:	6011      	str	r1, [r2, #0]
 8005fcc:	6053      	str	r3, [r2, #4]
 8005fce:	e005      	b.n	8005fdc <_malloc_r+0xb0>
 8005fd0:	605a      	str	r2, [r3, #4]
 8005fd2:	e7f9      	b.n	8005fc8 <_malloc_r+0x9c>
 8005fd4:	6862      	ldr	r2, [r4, #4]
 8005fd6:	42a3      	cmp	r3, r4
 8005fd8:	d10e      	bne.n	8005ff8 <_malloc_r+0xcc>
 8005fda:	6032      	str	r2, [r6, #0]
 8005fdc:	0028      	movs	r0, r5
 8005fde:	f000 f82d 	bl	800603c <__malloc_unlock>
 8005fe2:	0020      	movs	r0, r4
 8005fe4:	2207      	movs	r2, #7
 8005fe6:	300b      	adds	r0, #11
 8005fe8:	1d23      	adds	r3, r4, #4
 8005fea:	4390      	bics	r0, r2
 8005fec:	1ac2      	subs	r2, r0, r3
 8005fee:	4298      	cmp	r0, r3
 8005ff0:	d0df      	beq.n	8005fb2 <_malloc_r+0x86>
 8005ff2:	1a1b      	subs	r3, r3, r0
 8005ff4:	50a3      	str	r3, [r4, r2]
 8005ff6:	e7dc      	b.n	8005fb2 <_malloc_r+0x86>
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	e7ef      	b.n	8005fdc <_malloc_r+0xb0>
 8005ffc:	0023      	movs	r3, r4
 8005ffe:	6864      	ldr	r4, [r4, #4]
 8006000:	e7a6      	b.n	8005f50 <_malloc_r+0x24>
 8006002:	9c00      	ldr	r4, [sp, #0]
 8006004:	6863      	ldr	r3, [r4, #4]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	e7ad      	b.n	8005f66 <_malloc_r+0x3a>
 800600a:	001a      	movs	r2, r3
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	42a3      	cmp	r3, r4
 8006010:	d1fb      	bne.n	800600a <_malloc_r+0xde>
 8006012:	2300      	movs	r3, #0
 8006014:	e7da      	b.n	8005fcc <_malloc_r+0xa0>
 8006016:	230c      	movs	r3, #12
 8006018:	0028      	movs	r0, r5
 800601a:	602b      	str	r3, [r5, #0]
 800601c:	f000 f80e 	bl	800603c <__malloc_unlock>
 8006020:	e7c6      	b.n	8005fb0 <_malloc_r+0x84>
 8006022:	6007      	str	r7, [r0, #0]
 8006024:	e7da      	b.n	8005fdc <_malloc_r+0xb0>
 8006026:	46c0      	nop			@ (mov r8, r8)
 8006028:	20000354 	.word	0x20000354

0800602c <__malloc_lock>:
 800602c:	b510      	push	{r4, lr}
 800602e:	4802      	ldr	r0, [pc, #8]	@ (8006038 <__malloc_lock+0xc>)
 8006030:	f7ff ff0e 	bl	8005e50 <__retarget_lock_acquire_recursive>
 8006034:	bd10      	pop	{r4, pc}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	2000034c 	.word	0x2000034c

0800603c <__malloc_unlock>:
 800603c:	b510      	push	{r4, lr}
 800603e:	4802      	ldr	r0, [pc, #8]	@ (8006048 <__malloc_unlock+0xc>)
 8006040:	f7ff ff07 	bl	8005e52 <__retarget_lock_release_recursive>
 8006044:	bd10      	pop	{r4, pc}
 8006046:	46c0      	nop			@ (mov r8, r8)
 8006048:	2000034c 	.word	0x2000034c

0800604c <__ssputs_r>:
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604e:	688e      	ldr	r6, [r1, #8]
 8006050:	b085      	sub	sp, #20
 8006052:	001f      	movs	r7, r3
 8006054:	000c      	movs	r4, r1
 8006056:	680b      	ldr	r3, [r1, #0]
 8006058:	9002      	str	r0, [sp, #8]
 800605a:	9203      	str	r2, [sp, #12]
 800605c:	42be      	cmp	r6, r7
 800605e:	d830      	bhi.n	80060c2 <__ssputs_r+0x76>
 8006060:	210c      	movs	r1, #12
 8006062:	5e62      	ldrsh	r2, [r4, r1]
 8006064:	2190      	movs	r1, #144	@ 0x90
 8006066:	00c9      	lsls	r1, r1, #3
 8006068:	420a      	tst	r2, r1
 800606a:	d028      	beq.n	80060be <__ssputs_r+0x72>
 800606c:	2003      	movs	r0, #3
 800606e:	6921      	ldr	r1, [r4, #16]
 8006070:	1a5b      	subs	r3, r3, r1
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	6963      	ldr	r3, [r4, #20]
 8006076:	4343      	muls	r3, r0
 8006078:	9801      	ldr	r0, [sp, #4]
 800607a:	0fdd      	lsrs	r5, r3, #31
 800607c:	18ed      	adds	r5, r5, r3
 800607e:	1c7b      	adds	r3, r7, #1
 8006080:	181b      	adds	r3, r3, r0
 8006082:	106d      	asrs	r5, r5, #1
 8006084:	42ab      	cmp	r3, r5
 8006086:	d900      	bls.n	800608a <__ssputs_r+0x3e>
 8006088:	001d      	movs	r5, r3
 800608a:	0552      	lsls	r2, r2, #21
 800608c:	d528      	bpl.n	80060e0 <__ssputs_r+0x94>
 800608e:	0029      	movs	r1, r5
 8006090:	9802      	ldr	r0, [sp, #8]
 8006092:	f7ff ff4b 	bl	8005f2c <_malloc_r>
 8006096:	1e06      	subs	r6, r0, #0
 8006098:	d02c      	beq.n	80060f4 <__ssputs_r+0xa8>
 800609a:	9a01      	ldr	r2, [sp, #4]
 800609c:	6921      	ldr	r1, [r4, #16]
 800609e:	f000 fade 	bl	800665e <memcpy>
 80060a2:	89a2      	ldrh	r2, [r4, #12]
 80060a4:	4b18      	ldr	r3, [pc, #96]	@ (8006108 <__ssputs_r+0xbc>)
 80060a6:	401a      	ands	r2, r3
 80060a8:	2380      	movs	r3, #128	@ 0x80
 80060aa:	4313      	orrs	r3, r2
 80060ac:	81a3      	strh	r3, [r4, #12]
 80060ae:	9b01      	ldr	r3, [sp, #4]
 80060b0:	6126      	str	r6, [r4, #16]
 80060b2:	18f6      	adds	r6, r6, r3
 80060b4:	6026      	str	r6, [r4, #0]
 80060b6:	003e      	movs	r6, r7
 80060b8:	6165      	str	r5, [r4, #20]
 80060ba:	1aed      	subs	r5, r5, r3
 80060bc:	60a5      	str	r5, [r4, #8]
 80060be:	42be      	cmp	r6, r7
 80060c0:	d900      	bls.n	80060c4 <__ssputs_r+0x78>
 80060c2:	003e      	movs	r6, r7
 80060c4:	0032      	movs	r2, r6
 80060c6:	9903      	ldr	r1, [sp, #12]
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	f000 fa99 	bl	8006600 <memmove>
 80060ce:	2000      	movs	r0, #0
 80060d0:	68a3      	ldr	r3, [r4, #8]
 80060d2:	1b9b      	subs	r3, r3, r6
 80060d4:	60a3      	str	r3, [r4, #8]
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	199b      	adds	r3, r3, r6
 80060da:	6023      	str	r3, [r4, #0]
 80060dc:	b005      	add	sp, #20
 80060de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e0:	002a      	movs	r2, r5
 80060e2:	9802      	ldr	r0, [sp, #8]
 80060e4:	f000 fac4 	bl	8006670 <_realloc_r>
 80060e8:	1e06      	subs	r6, r0, #0
 80060ea:	d1e0      	bne.n	80060ae <__ssputs_r+0x62>
 80060ec:	6921      	ldr	r1, [r4, #16]
 80060ee:	9802      	ldr	r0, [sp, #8]
 80060f0:	f7ff feb0 	bl	8005e54 <_free_r>
 80060f4:	230c      	movs	r3, #12
 80060f6:	2001      	movs	r0, #1
 80060f8:	9a02      	ldr	r2, [sp, #8]
 80060fa:	4240      	negs	r0, r0
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	89a2      	ldrh	r2, [r4, #12]
 8006100:	3334      	adds	r3, #52	@ 0x34
 8006102:	4313      	orrs	r3, r2
 8006104:	81a3      	strh	r3, [r4, #12]
 8006106:	e7e9      	b.n	80060dc <__ssputs_r+0x90>
 8006108:	fffffb7f 	.word	0xfffffb7f

0800610c <_svfiprintf_r>:
 800610c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610e:	b0a1      	sub	sp, #132	@ 0x84
 8006110:	9003      	str	r0, [sp, #12]
 8006112:	001d      	movs	r5, r3
 8006114:	898b      	ldrh	r3, [r1, #12]
 8006116:	000f      	movs	r7, r1
 8006118:	0016      	movs	r6, r2
 800611a:	061b      	lsls	r3, r3, #24
 800611c:	d511      	bpl.n	8006142 <_svfiprintf_r+0x36>
 800611e:	690b      	ldr	r3, [r1, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10e      	bne.n	8006142 <_svfiprintf_r+0x36>
 8006124:	2140      	movs	r1, #64	@ 0x40
 8006126:	f7ff ff01 	bl	8005f2c <_malloc_r>
 800612a:	6038      	str	r0, [r7, #0]
 800612c:	6138      	str	r0, [r7, #16]
 800612e:	2800      	cmp	r0, #0
 8006130:	d105      	bne.n	800613e <_svfiprintf_r+0x32>
 8006132:	230c      	movs	r3, #12
 8006134:	9a03      	ldr	r2, [sp, #12]
 8006136:	6013      	str	r3, [r2, #0]
 8006138:	2001      	movs	r0, #1
 800613a:	4240      	negs	r0, r0
 800613c:	e0cf      	b.n	80062de <_svfiprintf_r+0x1d2>
 800613e:	2340      	movs	r3, #64	@ 0x40
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	2300      	movs	r3, #0
 8006144:	ac08      	add	r4, sp, #32
 8006146:	6163      	str	r3, [r4, #20]
 8006148:	3320      	adds	r3, #32
 800614a:	7663      	strb	r3, [r4, #25]
 800614c:	3310      	adds	r3, #16
 800614e:	76a3      	strb	r3, [r4, #26]
 8006150:	9507      	str	r5, [sp, #28]
 8006152:	0035      	movs	r5, r6
 8006154:	782b      	ldrb	r3, [r5, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <_svfiprintf_r+0x52>
 800615a:	2b25      	cmp	r3, #37	@ 0x25
 800615c:	d148      	bne.n	80061f0 <_svfiprintf_r+0xe4>
 800615e:	1bab      	subs	r3, r5, r6
 8006160:	9305      	str	r3, [sp, #20]
 8006162:	42b5      	cmp	r5, r6
 8006164:	d00b      	beq.n	800617e <_svfiprintf_r+0x72>
 8006166:	0032      	movs	r2, r6
 8006168:	0039      	movs	r1, r7
 800616a:	9803      	ldr	r0, [sp, #12]
 800616c:	f7ff ff6e 	bl	800604c <__ssputs_r>
 8006170:	3001      	adds	r0, #1
 8006172:	d100      	bne.n	8006176 <_svfiprintf_r+0x6a>
 8006174:	e0ae      	b.n	80062d4 <_svfiprintf_r+0x1c8>
 8006176:	6963      	ldr	r3, [r4, #20]
 8006178:	9a05      	ldr	r2, [sp, #20]
 800617a:	189b      	adds	r3, r3, r2
 800617c:	6163      	str	r3, [r4, #20]
 800617e:	782b      	ldrb	r3, [r5, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d100      	bne.n	8006186 <_svfiprintf_r+0x7a>
 8006184:	e0a6      	b.n	80062d4 <_svfiprintf_r+0x1c8>
 8006186:	2201      	movs	r2, #1
 8006188:	2300      	movs	r3, #0
 800618a:	4252      	negs	r2, r2
 800618c:	6062      	str	r2, [r4, #4]
 800618e:	a904      	add	r1, sp, #16
 8006190:	3254      	adds	r2, #84	@ 0x54
 8006192:	1852      	adds	r2, r2, r1
 8006194:	1c6e      	adds	r6, r5, #1
 8006196:	6023      	str	r3, [r4, #0]
 8006198:	60e3      	str	r3, [r4, #12]
 800619a:	60a3      	str	r3, [r4, #8]
 800619c:	7013      	strb	r3, [r2, #0]
 800619e:	65a3      	str	r3, [r4, #88]	@ 0x58
 80061a0:	4b54      	ldr	r3, [pc, #336]	@ (80062f4 <_svfiprintf_r+0x1e8>)
 80061a2:	2205      	movs	r2, #5
 80061a4:	0018      	movs	r0, r3
 80061a6:	7831      	ldrb	r1, [r6, #0]
 80061a8:	9305      	str	r3, [sp, #20]
 80061aa:	f000 fa4d 	bl	8006648 <memchr>
 80061ae:	1c75      	adds	r5, r6, #1
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d11f      	bne.n	80061f4 <_svfiprintf_r+0xe8>
 80061b4:	6822      	ldr	r2, [r4, #0]
 80061b6:	06d3      	lsls	r3, r2, #27
 80061b8:	d504      	bpl.n	80061c4 <_svfiprintf_r+0xb8>
 80061ba:	2353      	movs	r3, #83	@ 0x53
 80061bc:	a904      	add	r1, sp, #16
 80061be:	185b      	adds	r3, r3, r1
 80061c0:	2120      	movs	r1, #32
 80061c2:	7019      	strb	r1, [r3, #0]
 80061c4:	0713      	lsls	r3, r2, #28
 80061c6:	d504      	bpl.n	80061d2 <_svfiprintf_r+0xc6>
 80061c8:	2353      	movs	r3, #83	@ 0x53
 80061ca:	a904      	add	r1, sp, #16
 80061cc:	185b      	adds	r3, r3, r1
 80061ce:	212b      	movs	r1, #43	@ 0x2b
 80061d0:	7019      	strb	r1, [r3, #0]
 80061d2:	7833      	ldrb	r3, [r6, #0]
 80061d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80061d6:	d016      	beq.n	8006206 <_svfiprintf_r+0xfa>
 80061d8:	0035      	movs	r5, r6
 80061da:	2100      	movs	r1, #0
 80061dc:	200a      	movs	r0, #10
 80061de:	68e3      	ldr	r3, [r4, #12]
 80061e0:	782a      	ldrb	r2, [r5, #0]
 80061e2:	1c6e      	adds	r6, r5, #1
 80061e4:	3a30      	subs	r2, #48	@ 0x30
 80061e6:	2a09      	cmp	r2, #9
 80061e8:	d950      	bls.n	800628c <_svfiprintf_r+0x180>
 80061ea:	2900      	cmp	r1, #0
 80061ec:	d111      	bne.n	8006212 <_svfiprintf_r+0x106>
 80061ee:	e017      	b.n	8006220 <_svfiprintf_r+0x114>
 80061f0:	3501      	adds	r5, #1
 80061f2:	e7af      	b.n	8006154 <_svfiprintf_r+0x48>
 80061f4:	9b05      	ldr	r3, [sp, #20]
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	1ac0      	subs	r0, r0, r3
 80061fa:	2301      	movs	r3, #1
 80061fc:	4083      	lsls	r3, r0
 80061fe:	4313      	orrs	r3, r2
 8006200:	002e      	movs	r6, r5
 8006202:	6023      	str	r3, [r4, #0]
 8006204:	e7cc      	b.n	80061a0 <_svfiprintf_r+0x94>
 8006206:	9b07      	ldr	r3, [sp, #28]
 8006208:	1d19      	adds	r1, r3, #4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	9107      	str	r1, [sp, #28]
 800620e:	2b00      	cmp	r3, #0
 8006210:	db01      	blt.n	8006216 <_svfiprintf_r+0x10a>
 8006212:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006214:	e004      	b.n	8006220 <_svfiprintf_r+0x114>
 8006216:	425b      	negs	r3, r3
 8006218:	60e3      	str	r3, [r4, #12]
 800621a:	2302      	movs	r3, #2
 800621c:	4313      	orrs	r3, r2
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	782b      	ldrb	r3, [r5, #0]
 8006222:	2b2e      	cmp	r3, #46	@ 0x2e
 8006224:	d10c      	bne.n	8006240 <_svfiprintf_r+0x134>
 8006226:	786b      	ldrb	r3, [r5, #1]
 8006228:	2b2a      	cmp	r3, #42	@ 0x2a
 800622a:	d134      	bne.n	8006296 <_svfiprintf_r+0x18a>
 800622c:	9b07      	ldr	r3, [sp, #28]
 800622e:	3502      	adds	r5, #2
 8006230:	1d1a      	adds	r2, r3, #4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	9207      	str	r2, [sp, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	da01      	bge.n	800623e <_svfiprintf_r+0x132>
 800623a:	2301      	movs	r3, #1
 800623c:	425b      	negs	r3, r3
 800623e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006240:	4e2d      	ldr	r6, [pc, #180]	@ (80062f8 <_svfiprintf_r+0x1ec>)
 8006242:	2203      	movs	r2, #3
 8006244:	0030      	movs	r0, r6
 8006246:	7829      	ldrb	r1, [r5, #0]
 8006248:	f000 f9fe 	bl	8006648 <memchr>
 800624c:	2800      	cmp	r0, #0
 800624e:	d006      	beq.n	800625e <_svfiprintf_r+0x152>
 8006250:	2340      	movs	r3, #64	@ 0x40
 8006252:	1b80      	subs	r0, r0, r6
 8006254:	4083      	lsls	r3, r0
 8006256:	6822      	ldr	r2, [r4, #0]
 8006258:	3501      	adds	r5, #1
 800625a:	4313      	orrs	r3, r2
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	7829      	ldrb	r1, [r5, #0]
 8006260:	2206      	movs	r2, #6
 8006262:	4826      	ldr	r0, [pc, #152]	@ (80062fc <_svfiprintf_r+0x1f0>)
 8006264:	1c6e      	adds	r6, r5, #1
 8006266:	7621      	strb	r1, [r4, #24]
 8006268:	f000 f9ee 	bl	8006648 <memchr>
 800626c:	2800      	cmp	r0, #0
 800626e:	d038      	beq.n	80062e2 <_svfiprintf_r+0x1d6>
 8006270:	4b23      	ldr	r3, [pc, #140]	@ (8006300 <_svfiprintf_r+0x1f4>)
 8006272:	2b00      	cmp	r3, #0
 8006274:	d122      	bne.n	80062bc <_svfiprintf_r+0x1b0>
 8006276:	2207      	movs	r2, #7
 8006278:	9b07      	ldr	r3, [sp, #28]
 800627a:	3307      	adds	r3, #7
 800627c:	4393      	bics	r3, r2
 800627e:	3308      	adds	r3, #8
 8006280:	9307      	str	r3, [sp, #28]
 8006282:	6963      	ldr	r3, [r4, #20]
 8006284:	9a04      	ldr	r2, [sp, #16]
 8006286:	189b      	adds	r3, r3, r2
 8006288:	6163      	str	r3, [r4, #20]
 800628a:	e762      	b.n	8006152 <_svfiprintf_r+0x46>
 800628c:	4343      	muls	r3, r0
 800628e:	0035      	movs	r5, r6
 8006290:	2101      	movs	r1, #1
 8006292:	189b      	adds	r3, r3, r2
 8006294:	e7a4      	b.n	80061e0 <_svfiprintf_r+0xd4>
 8006296:	2300      	movs	r3, #0
 8006298:	200a      	movs	r0, #10
 800629a:	0019      	movs	r1, r3
 800629c:	3501      	adds	r5, #1
 800629e:	6063      	str	r3, [r4, #4]
 80062a0:	782a      	ldrb	r2, [r5, #0]
 80062a2:	1c6e      	adds	r6, r5, #1
 80062a4:	3a30      	subs	r2, #48	@ 0x30
 80062a6:	2a09      	cmp	r2, #9
 80062a8:	d903      	bls.n	80062b2 <_svfiprintf_r+0x1a6>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0c8      	beq.n	8006240 <_svfiprintf_r+0x134>
 80062ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80062b0:	e7c6      	b.n	8006240 <_svfiprintf_r+0x134>
 80062b2:	4341      	muls	r1, r0
 80062b4:	0035      	movs	r5, r6
 80062b6:	2301      	movs	r3, #1
 80062b8:	1889      	adds	r1, r1, r2
 80062ba:	e7f1      	b.n	80062a0 <_svfiprintf_r+0x194>
 80062bc:	aa07      	add	r2, sp, #28
 80062be:	9200      	str	r2, [sp, #0]
 80062c0:	0021      	movs	r1, r4
 80062c2:	003a      	movs	r2, r7
 80062c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006304 <_svfiprintf_r+0x1f8>)
 80062c6:	9803      	ldr	r0, [sp, #12]
 80062c8:	e000      	b.n	80062cc <_svfiprintf_r+0x1c0>
 80062ca:	bf00      	nop
 80062cc:	9004      	str	r0, [sp, #16]
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	3301      	adds	r3, #1
 80062d2:	d1d6      	bne.n	8006282 <_svfiprintf_r+0x176>
 80062d4:	89bb      	ldrh	r3, [r7, #12]
 80062d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80062d8:	065b      	lsls	r3, r3, #25
 80062da:	d500      	bpl.n	80062de <_svfiprintf_r+0x1d2>
 80062dc:	e72c      	b.n	8006138 <_svfiprintf_r+0x2c>
 80062de:	b021      	add	sp, #132	@ 0x84
 80062e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e2:	aa07      	add	r2, sp, #28
 80062e4:	9200      	str	r2, [sp, #0]
 80062e6:	0021      	movs	r1, r4
 80062e8:	003a      	movs	r2, r7
 80062ea:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <_svfiprintf_r+0x1f8>)
 80062ec:	9803      	ldr	r0, [sp, #12]
 80062ee:	f000 f87b 	bl	80063e8 <_printf_i>
 80062f2:	e7eb      	b.n	80062cc <_svfiprintf_r+0x1c0>
 80062f4:	08006a1d 	.word	0x08006a1d
 80062f8:	08006a23 	.word	0x08006a23
 80062fc:	08006a27 	.word	0x08006a27
 8006300:	00000000 	.word	0x00000000
 8006304:	0800604d 	.word	0x0800604d

08006308 <_printf_common>:
 8006308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800630a:	0016      	movs	r6, r2
 800630c:	9301      	str	r3, [sp, #4]
 800630e:	688a      	ldr	r2, [r1, #8]
 8006310:	690b      	ldr	r3, [r1, #16]
 8006312:	000c      	movs	r4, r1
 8006314:	9000      	str	r0, [sp, #0]
 8006316:	4293      	cmp	r3, r2
 8006318:	da00      	bge.n	800631c <_printf_common+0x14>
 800631a:	0013      	movs	r3, r2
 800631c:	0022      	movs	r2, r4
 800631e:	6033      	str	r3, [r6, #0]
 8006320:	3243      	adds	r2, #67	@ 0x43
 8006322:	7812      	ldrb	r2, [r2, #0]
 8006324:	2a00      	cmp	r2, #0
 8006326:	d001      	beq.n	800632c <_printf_common+0x24>
 8006328:	3301      	adds	r3, #1
 800632a:	6033      	str	r3, [r6, #0]
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	069b      	lsls	r3, r3, #26
 8006330:	d502      	bpl.n	8006338 <_printf_common+0x30>
 8006332:	6833      	ldr	r3, [r6, #0]
 8006334:	3302      	adds	r3, #2
 8006336:	6033      	str	r3, [r6, #0]
 8006338:	6822      	ldr	r2, [r4, #0]
 800633a:	2306      	movs	r3, #6
 800633c:	0015      	movs	r5, r2
 800633e:	401d      	ands	r5, r3
 8006340:	421a      	tst	r2, r3
 8006342:	d027      	beq.n	8006394 <_printf_common+0x8c>
 8006344:	0023      	movs	r3, r4
 8006346:	3343      	adds	r3, #67	@ 0x43
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	1e5a      	subs	r2, r3, #1
 800634c:	4193      	sbcs	r3, r2
 800634e:	6822      	ldr	r2, [r4, #0]
 8006350:	0692      	lsls	r2, r2, #26
 8006352:	d430      	bmi.n	80063b6 <_printf_common+0xae>
 8006354:	0022      	movs	r2, r4
 8006356:	9901      	ldr	r1, [sp, #4]
 8006358:	9800      	ldr	r0, [sp, #0]
 800635a:	9d08      	ldr	r5, [sp, #32]
 800635c:	3243      	adds	r2, #67	@ 0x43
 800635e:	47a8      	blx	r5
 8006360:	3001      	adds	r0, #1
 8006362:	d025      	beq.n	80063b0 <_printf_common+0xa8>
 8006364:	2206      	movs	r2, #6
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	2500      	movs	r5, #0
 800636a:	4013      	ands	r3, r2
 800636c:	2b04      	cmp	r3, #4
 800636e:	d105      	bne.n	800637c <_printf_common+0x74>
 8006370:	6833      	ldr	r3, [r6, #0]
 8006372:	68e5      	ldr	r5, [r4, #12]
 8006374:	1aed      	subs	r5, r5, r3
 8006376:	43eb      	mvns	r3, r5
 8006378:	17db      	asrs	r3, r3, #31
 800637a:	401d      	ands	r5, r3
 800637c:	68a3      	ldr	r3, [r4, #8]
 800637e:	6922      	ldr	r2, [r4, #16]
 8006380:	4293      	cmp	r3, r2
 8006382:	dd01      	ble.n	8006388 <_printf_common+0x80>
 8006384:	1a9b      	subs	r3, r3, r2
 8006386:	18ed      	adds	r5, r5, r3
 8006388:	2600      	movs	r6, #0
 800638a:	42b5      	cmp	r5, r6
 800638c:	d120      	bne.n	80063d0 <_printf_common+0xc8>
 800638e:	2000      	movs	r0, #0
 8006390:	e010      	b.n	80063b4 <_printf_common+0xac>
 8006392:	3501      	adds	r5, #1
 8006394:	68e3      	ldr	r3, [r4, #12]
 8006396:	6832      	ldr	r2, [r6, #0]
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	42ab      	cmp	r3, r5
 800639c:	ddd2      	ble.n	8006344 <_printf_common+0x3c>
 800639e:	0022      	movs	r2, r4
 80063a0:	2301      	movs	r3, #1
 80063a2:	9901      	ldr	r1, [sp, #4]
 80063a4:	9800      	ldr	r0, [sp, #0]
 80063a6:	9f08      	ldr	r7, [sp, #32]
 80063a8:	3219      	adds	r2, #25
 80063aa:	47b8      	blx	r7
 80063ac:	3001      	adds	r0, #1
 80063ae:	d1f0      	bne.n	8006392 <_printf_common+0x8a>
 80063b0:	2001      	movs	r0, #1
 80063b2:	4240      	negs	r0, r0
 80063b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80063b6:	2030      	movs	r0, #48	@ 0x30
 80063b8:	18e1      	adds	r1, r4, r3
 80063ba:	3143      	adds	r1, #67	@ 0x43
 80063bc:	7008      	strb	r0, [r1, #0]
 80063be:	0021      	movs	r1, r4
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	3145      	adds	r1, #69	@ 0x45
 80063c4:	7809      	ldrb	r1, [r1, #0]
 80063c6:	18a2      	adds	r2, r4, r2
 80063c8:	3243      	adds	r2, #67	@ 0x43
 80063ca:	3302      	adds	r3, #2
 80063cc:	7011      	strb	r1, [r2, #0]
 80063ce:	e7c1      	b.n	8006354 <_printf_common+0x4c>
 80063d0:	0022      	movs	r2, r4
 80063d2:	2301      	movs	r3, #1
 80063d4:	9901      	ldr	r1, [sp, #4]
 80063d6:	9800      	ldr	r0, [sp, #0]
 80063d8:	9f08      	ldr	r7, [sp, #32]
 80063da:	321a      	adds	r2, #26
 80063dc:	47b8      	blx	r7
 80063de:	3001      	adds	r0, #1
 80063e0:	d0e6      	beq.n	80063b0 <_printf_common+0xa8>
 80063e2:	3601      	adds	r6, #1
 80063e4:	e7d1      	b.n	800638a <_printf_common+0x82>
	...

080063e8 <_printf_i>:
 80063e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ea:	b08b      	sub	sp, #44	@ 0x2c
 80063ec:	9206      	str	r2, [sp, #24]
 80063ee:	000a      	movs	r2, r1
 80063f0:	3243      	adds	r2, #67	@ 0x43
 80063f2:	9307      	str	r3, [sp, #28]
 80063f4:	9005      	str	r0, [sp, #20]
 80063f6:	9203      	str	r2, [sp, #12]
 80063f8:	7e0a      	ldrb	r2, [r1, #24]
 80063fa:	000c      	movs	r4, r1
 80063fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80063fe:	2a78      	cmp	r2, #120	@ 0x78
 8006400:	d809      	bhi.n	8006416 <_printf_i+0x2e>
 8006402:	2a62      	cmp	r2, #98	@ 0x62
 8006404:	d80b      	bhi.n	800641e <_printf_i+0x36>
 8006406:	2a00      	cmp	r2, #0
 8006408:	d100      	bne.n	800640c <_printf_i+0x24>
 800640a:	e0ba      	b.n	8006582 <_printf_i+0x19a>
 800640c:	497a      	ldr	r1, [pc, #488]	@ (80065f8 <_printf_i+0x210>)
 800640e:	9104      	str	r1, [sp, #16]
 8006410:	2a58      	cmp	r2, #88	@ 0x58
 8006412:	d100      	bne.n	8006416 <_printf_i+0x2e>
 8006414:	e08e      	b.n	8006534 <_printf_i+0x14c>
 8006416:	0025      	movs	r5, r4
 8006418:	3542      	adds	r5, #66	@ 0x42
 800641a:	702a      	strb	r2, [r5, #0]
 800641c:	e022      	b.n	8006464 <_printf_i+0x7c>
 800641e:	0010      	movs	r0, r2
 8006420:	3863      	subs	r0, #99	@ 0x63
 8006422:	2815      	cmp	r0, #21
 8006424:	d8f7      	bhi.n	8006416 <_printf_i+0x2e>
 8006426:	f7f9 fe73 	bl	8000110 <__gnu_thumb1_case_shi>
 800642a:	0016      	.short	0x0016
 800642c:	fff6001f 	.word	0xfff6001f
 8006430:	fff6fff6 	.word	0xfff6fff6
 8006434:	001ffff6 	.word	0x001ffff6
 8006438:	fff6fff6 	.word	0xfff6fff6
 800643c:	fff6fff6 	.word	0xfff6fff6
 8006440:	0036009f 	.word	0x0036009f
 8006444:	fff6007e 	.word	0xfff6007e
 8006448:	00b0fff6 	.word	0x00b0fff6
 800644c:	0036fff6 	.word	0x0036fff6
 8006450:	fff6fff6 	.word	0xfff6fff6
 8006454:	0082      	.short	0x0082
 8006456:	0025      	movs	r5, r4
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	3542      	adds	r5, #66	@ 0x42
 800645c:	1d11      	adds	r1, r2, #4
 800645e:	6019      	str	r1, [r3, #0]
 8006460:	6813      	ldr	r3, [r2, #0]
 8006462:	702b      	strb	r3, [r5, #0]
 8006464:	2301      	movs	r3, #1
 8006466:	e09e      	b.n	80065a6 <_printf_i+0x1be>
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	6809      	ldr	r1, [r1, #0]
 800646c:	1d02      	adds	r2, r0, #4
 800646e:	060d      	lsls	r5, r1, #24
 8006470:	d50b      	bpl.n	800648a <_printf_i+0xa2>
 8006472:	6806      	ldr	r6, [r0, #0]
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	2e00      	cmp	r6, #0
 8006478:	da03      	bge.n	8006482 <_printf_i+0x9a>
 800647a:	232d      	movs	r3, #45	@ 0x2d
 800647c:	9a03      	ldr	r2, [sp, #12]
 800647e:	4276      	negs	r6, r6
 8006480:	7013      	strb	r3, [r2, #0]
 8006482:	4b5d      	ldr	r3, [pc, #372]	@ (80065f8 <_printf_i+0x210>)
 8006484:	270a      	movs	r7, #10
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	e018      	b.n	80064bc <_printf_i+0xd4>
 800648a:	6806      	ldr	r6, [r0, #0]
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	0649      	lsls	r1, r1, #25
 8006490:	d5f1      	bpl.n	8006476 <_printf_i+0x8e>
 8006492:	b236      	sxth	r6, r6
 8006494:	e7ef      	b.n	8006476 <_printf_i+0x8e>
 8006496:	6808      	ldr	r0, [r1, #0]
 8006498:	6819      	ldr	r1, [r3, #0]
 800649a:	c940      	ldmia	r1!, {r6}
 800649c:	0605      	lsls	r5, r0, #24
 800649e:	d402      	bmi.n	80064a6 <_printf_i+0xbe>
 80064a0:	0640      	lsls	r0, r0, #25
 80064a2:	d500      	bpl.n	80064a6 <_printf_i+0xbe>
 80064a4:	b2b6      	uxth	r6, r6
 80064a6:	6019      	str	r1, [r3, #0]
 80064a8:	4b53      	ldr	r3, [pc, #332]	@ (80065f8 <_printf_i+0x210>)
 80064aa:	270a      	movs	r7, #10
 80064ac:	9304      	str	r3, [sp, #16]
 80064ae:	2a6f      	cmp	r2, #111	@ 0x6f
 80064b0:	d100      	bne.n	80064b4 <_printf_i+0xcc>
 80064b2:	3f02      	subs	r7, #2
 80064b4:	0023      	movs	r3, r4
 80064b6:	2200      	movs	r2, #0
 80064b8:	3343      	adds	r3, #67	@ 0x43
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	6863      	ldr	r3, [r4, #4]
 80064be:	60a3      	str	r3, [r4, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	db06      	blt.n	80064d2 <_printf_i+0xea>
 80064c4:	2104      	movs	r1, #4
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	9d03      	ldr	r5, [sp, #12]
 80064ca:	438a      	bics	r2, r1
 80064cc:	6022      	str	r2, [r4, #0]
 80064ce:	4333      	orrs	r3, r6
 80064d0:	d00c      	beq.n	80064ec <_printf_i+0x104>
 80064d2:	9d03      	ldr	r5, [sp, #12]
 80064d4:	0030      	movs	r0, r6
 80064d6:	0039      	movs	r1, r7
 80064d8:	f7f9 feaa 	bl	8000230 <__aeabi_uidivmod>
 80064dc:	9b04      	ldr	r3, [sp, #16]
 80064de:	3d01      	subs	r5, #1
 80064e0:	5c5b      	ldrb	r3, [r3, r1]
 80064e2:	702b      	strb	r3, [r5, #0]
 80064e4:	0033      	movs	r3, r6
 80064e6:	0006      	movs	r6, r0
 80064e8:	429f      	cmp	r7, r3
 80064ea:	d9f3      	bls.n	80064d4 <_printf_i+0xec>
 80064ec:	2f08      	cmp	r7, #8
 80064ee:	d109      	bne.n	8006504 <_printf_i+0x11c>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	07db      	lsls	r3, r3, #31
 80064f4:	d506      	bpl.n	8006504 <_printf_i+0x11c>
 80064f6:	6862      	ldr	r2, [r4, #4]
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	dc02      	bgt.n	8006504 <_printf_i+0x11c>
 80064fe:	2330      	movs	r3, #48	@ 0x30
 8006500:	3d01      	subs	r5, #1
 8006502:	702b      	strb	r3, [r5, #0]
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	1b5b      	subs	r3, r3, r5
 8006508:	6123      	str	r3, [r4, #16]
 800650a:	9b07      	ldr	r3, [sp, #28]
 800650c:	0021      	movs	r1, r4
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	9805      	ldr	r0, [sp, #20]
 8006512:	9b06      	ldr	r3, [sp, #24]
 8006514:	aa09      	add	r2, sp, #36	@ 0x24
 8006516:	f7ff fef7 	bl	8006308 <_printf_common>
 800651a:	3001      	adds	r0, #1
 800651c:	d148      	bne.n	80065b0 <_printf_i+0x1c8>
 800651e:	2001      	movs	r0, #1
 8006520:	4240      	negs	r0, r0
 8006522:	b00b      	add	sp, #44	@ 0x2c
 8006524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006526:	2220      	movs	r2, #32
 8006528:	6809      	ldr	r1, [r1, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	6022      	str	r2, [r4, #0]
 800652e:	2278      	movs	r2, #120	@ 0x78
 8006530:	4932      	ldr	r1, [pc, #200]	@ (80065fc <_printf_i+0x214>)
 8006532:	9104      	str	r1, [sp, #16]
 8006534:	0021      	movs	r1, r4
 8006536:	3145      	adds	r1, #69	@ 0x45
 8006538:	700a      	strb	r2, [r1, #0]
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	6822      	ldr	r2, [r4, #0]
 800653e:	c940      	ldmia	r1!, {r6}
 8006540:	0610      	lsls	r0, r2, #24
 8006542:	d402      	bmi.n	800654a <_printf_i+0x162>
 8006544:	0650      	lsls	r0, r2, #25
 8006546:	d500      	bpl.n	800654a <_printf_i+0x162>
 8006548:	b2b6      	uxth	r6, r6
 800654a:	6019      	str	r1, [r3, #0]
 800654c:	07d3      	lsls	r3, r2, #31
 800654e:	d502      	bpl.n	8006556 <_printf_i+0x16e>
 8006550:	2320      	movs	r3, #32
 8006552:	4313      	orrs	r3, r2
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	2e00      	cmp	r6, #0
 8006558:	d001      	beq.n	800655e <_printf_i+0x176>
 800655a:	2710      	movs	r7, #16
 800655c:	e7aa      	b.n	80064b4 <_printf_i+0xcc>
 800655e:	2220      	movs	r2, #32
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	4393      	bics	r3, r2
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	e7f8      	b.n	800655a <_printf_i+0x172>
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	680d      	ldr	r5, [r1, #0]
 800656c:	1d10      	adds	r0, r2, #4
 800656e:	6949      	ldr	r1, [r1, #20]
 8006570:	6018      	str	r0, [r3, #0]
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	062e      	lsls	r6, r5, #24
 8006576:	d501      	bpl.n	800657c <_printf_i+0x194>
 8006578:	6019      	str	r1, [r3, #0]
 800657a:	e002      	b.n	8006582 <_printf_i+0x19a>
 800657c:	066d      	lsls	r5, r5, #25
 800657e:	d5fb      	bpl.n	8006578 <_printf_i+0x190>
 8006580:	8019      	strh	r1, [r3, #0]
 8006582:	2300      	movs	r3, #0
 8006584:	9d03      	ldr	r5, [sp, #12]
 8006586:	6123      	str	r3, [r4, #16]
 8006588:	e7bf      	b.n	800650a <_printf_i+0x122>
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	1d11      	adds	r1, r2, #4
 800658e:	6019      	str	r1, [r3, #0]
 8006590:	6815      	ldr	r5, [r2, #0]
 8006592:	2100      	movs	r1, #0
 8006594:	0028      	movs	r0, r5
 8006596:	6862      	ldr	r2, [r4, #4]
 8006598:	f000 f856 	bl	8006648 <memchr>
 800659c:	2800      	cmp	r0, #0
 800659e:	d001      	beq.n	80065a4 <_printf_i+0x1bc>
 80065a0:	1b40      	subs	r0, r0, r5
 80065a2:	6060      	str	r0, [r4, #4]
 80065a4:	6863      	ldr	r3, [r4, #4]
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	2300      	movs	r3, #0
 80065aa:	9a03      	ldr	r2, [sp, #12]
 80065ac:	7013      	strb	r3, [r2, #0]
 80065ae:	e7ac      	b.n	800650a <_printf_i+0x122>
 80065b0:	002a      	movs	r2, r5
 80065b2:	6923      	ldr	r3, [r4, #16]
 80065b4:	9906      	ldr	r1, [sp, #24]
 80065b6:	9805      	ldr	r0, [sp, #20]
 80065b8:	9d07      	ldr	r5, [sp, #28]
 80065ba:	47a8      	blx	r5
 80065bc:	3001      	adds	r0, #1
 80065be:	d0ae      	beq.n	800651e <_printf_i+0x136>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	079b      	lsls	r3, r3, #30
 80065c4:	d415      	bmi.n	80065f2 <_printf_i+0x20a>
 80065c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065c8:	68e0      	ldr	r0, [r4, #12]
 80065ca:	4298      	cmp	r0, r3
 80065cc:	daa9      	bge.n	8006522 <_printf_i+0x13a>
 80065ce:	0018      	movs	r0, r3
 80065d0:	e7a7      	b.n	8006522 <_printf_i+0x13a>
 80065d2:	0022      	movs	r2, r4
 80065d4:	2301      	movs	r3, #1
 80065d6:	9906      	ldr	r1, [sp, #24]
 80065d8:	9805      	ldr	r0, [sp, #20]
 80065da:	9e07      	ldr	r6, [sp, #28]
 80065dc:	3219      	adds	r2, #25
 80065de:	47b0      	blx	r6
 80065e0:	3001      	adds	r0, #1
 80065e2:	d09c      	beq.n	800651e <_printf_i+0x136>
 80065e4:	3501      	adds	r5, #1
 80065e6:	68e3      	ldr	r3, [r4, #12]
 80065e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065ea:	1a9b      	subs	r3, r3, r2
 80065ec:	42ab      	cmp	r3, r5
 80065ee:	dcf0      	bgt.n	80065d2 <_printf_i+0x1ea>
 80065f0:	e7e9      	b.n	80065c6 <_printf_i+0x1de>
 80065f2:	2500      	movs	r5, #0
 80065f4:	e7f7      	b.n	80065e6 <_printf_i+0x1fe>
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	08006a2e 	.word	0x08006a2e
 80065fc:	08006a3f 	.word	0x08006a3f

08006600 <memmove>:
 8006600:	b510      	push	{r4, lr}
 8006602:	4288      	cmp	r0, r1
 8006604:	d902      	bls.n	800660c <memmove+0xc>
 8006606:	188b      	adds	r3, r1, r2
 8006608:	4298      	cmp	r0, r3
 800660a:	d308      	bcc.n	800661e <memmove+0x1e>
 800660c:	2300      	movs	r3, #0
 800660e:	429a      	cmp	r2, r3
 8006610:	d007      	beq.n	8006622 <memmove+0x22>
 8006612:	5ccc      	ldrb	r4, [r1, r3]
 8006614:	54c4      	strb	r4, [r0, r3]
 8006616:	3301      	adds	r3, #1
 8006618:	e7f9      	b.n	800660e <memmove+0xe>
 800661a:	5c8b      	ldrb	r3, [r1, r2]
 800661c:	5483      	strb	r3, [r0, r2]
 800661e:	3a01      	subs	r2, #1
 8006620:	d2fb      	bcs.n	800661a <memmove+0x1a>
 8006622:	bd10      	pop	{r4, pc}

08006624 <_sbrk_r>:
 8006624:	2300      	movs	r3, #0
 8006626:	b570      	push	{r4, r5, r6, lr}
 8006628:	4d06      	ldr	r5, [pc, #24]	@ (8006644 <_sbrk_r+0x20>)
 800662a:	0004      	movs	r4, r0
 800662c:	0008      	movs	r0, r1
 800662e:	602b      	str	r3, [r5, #0]
 8006630:	f7fa fa4c 	bl	8000acc <_sbrk>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d103      	bne.n	8006640 <_sbrk_r+0x1c>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d000      	beq.n	8006640 <_sbrk_r+0x1c>
 800663e:	6023      	str	r3, [r4, #0]
 8006640:	bd70      	pop	{r4, r5, r6, pc}
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	20000348 	.word	0x20000348

08006648 <memchr>:
 8006648:	b2c9      	uxtb	r1, r1
 800664a:	1882      	adds	r2, r0, r2
 800664c:	4290      	cmp	r0, r2
 800664e:	d101      	bne.n	8006654 <memchr+0xc>
 8006650:	2000      	movs	r0, #0
 8006652:	4770      	bx	lr
 8006654:	7803      	ldrb	r3, [r0, #0]
 8006656:	428b      	cmp	r3, r1
 8006658:	d0fb      	beq.n	8006652 <memchr+0xa>
 800665a:	3001      	adds	r0, #1
 800665c:	e7f6      	b.n	800664c <memchr+0x4>

0800665e <memcpy>:
 800665e:	2300      	movs	r3, #0
 8006660:	b510      	push	{r4, lr}
 8006662:	429a      	cmp	r2, r3
 8006664:	d100      	bne.n	8006668 <memcpy+0xa>
 8006666:	bd10      	pop	{r4, pc}
 8006668:	5ccc      	ldrb	r4, [r1, r3]
 800666a:	54c4      	strb	r4, [r0, r3]
 800666c:	3301      	adds	r3, #1
 800666e:	e7f8      	b.n	8006662 <memcpy+0x4>

08006670 <_realloc_r>:
 8006670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006672:	0006      	movs	r6, r0
 8006674:	000c      	movs	r4, r1
 8006676:	0015      	movs	r5, r2
 8006678:	2900      	cmp	r1, #0
 800667a:	d105      	bne.n	8006688 <_realloc_r+0x18>
 800667c:	0011      	movs	r1, r2
 800667e:	f7ff fc55 	bl	8005f2c <_malloc_r>
 8006682:	0004      	movs	r4, r0
 8006684:	0020      	movs	r0, r4
 8006686:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006688:	2a00      	cmp	r2, #0
 800668a:	d103      	bne.n	8006694 <_realloc_r+0x24>
 800668c:	f7ff fbe2 	bl	8005e54 <_free_r>
 8006690:	002c      	movs	r4, r5
 8006692:	e7f7      	b.n	8006684 <_realloc_r+0x14>
 8006694:	f000 f81c 	bl	80066d0 <_malloc_usable_size_r>
 8006698:	0007      	movs	r7, r0
 800669a:	4285      	cmp	r5, r0
 800669c:	d802      	bhi.n	80066a4 <_realloc_r+0x34>
 800669e:	0843      	lsrs	r3, r0, #1
 80066a0:	42ab      	cmp	r3, r5
 80066a2:	d3ef      	bcc.n	8006684 <_realloc_r+0x14>
 80066a4:	0029      	movs	r1, r5
 80066a6:	0030      	movs	r0, r6
 80066a8:	f7ff fc40 	bl	8005f2c <_malloc_r>
 80066ac:	9001      	str	r0, [sp, #4]
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d101      	bne.n	80066b6 <_realloc_r+0x46>
 80066b2:	9c01      	ldr	r4, [sp, #4]
 80066b4:	e7e6      	b.n	8006684 <_realloc_r+0x14>
 80066b6:	002a      	movs	r2, r5
 80066b8:	42bd      	cmp	r5, r7
 80066ba:	d900      	bls.n	80066be <_realloc_r+0x4e>
 80066bc:	003a      	movs	r2, r7
 80066be:	0021      	movs	r1, r4
 80066c0:	9801      	ldr	r0, [sp, #4]
 80066c2:	f7ff ffcc 	bl	800665e <memcpy>
 80066c6:	0021      	movs	r1, r4
 80066c8:	0030      	movs	r0, r6
 80066ca:	f7ff fbc3 	bl	8005e54 <_free_r>
 80066ce:	e7f0      	b.n	80066b2 <_realloc_r+0x42>

080066d0 <_malloc_usable_size_r>:
 80066d0:	1f0b      	subs	r3, r1, #4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	1f18      	subs	r0, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da01      	bge.n	80066de <_malloc_usable_size_r+0xe>
 80066da:	580b      	ldr	r3, [r1, r0]
 80066dc:	18c0      	adds	r0, r0, r3
 80066de:	4770      	bx	lr

080066e0 <_init>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr

080066ec <_fini>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	46c0      	nop			@ (mov r8, r8)
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr
